
uc3b0256-bldc_foc.elf:     file format elf32-avr32

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .reset        00002004  80000000  80000000  00000400  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .rela.got     00000000  80002004  80002004  00002404  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .init         0000001a  80002004  80002004  00002404  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .text         00008ddc  80002020  80002020  00002420  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  4 .exception    00000200  8000ae00  8000ae00  0000b200  2**9
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  5 .fini         00000018  8000b000  8000b000  0000b400  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  6 .rodata       00001274  8000b018  8000b018  0000b418  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .lalign       00000004  8000c28c  8000c28c  0000c68c  2**0
                  ALLOC
  8 .dalign       00000004  00000004  00000004  00000000  2**0
                  ALLOC
  9 .ctors        00000008  00000008  8000c290  0000c808  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .dtors        00000008  00000010  8000c298  0000c810  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .jcr          00000004  00000018  8000c2a0  0000c818  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 .got          00000000  0000001c  8000c2a4  0000c81c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 13 .data         00000514  0000001c  8000c2a4  0000c81c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 14 .balign       00000000  00000530  8000c7b8  0000cd30  2**0
                  ALLOC
 15 .bss          00000db0  00000530  00000530  00000000  2**2
                  ALLOC
 16 .heap         00005d20  000012e0  000012e0  00000000  2**0
                  ALLOC
 17 .comment      00000240  00000000  00000000  0000cd30  2**0
                  CONTENTS, READONLY
 18 .debug_aranges 000004a0  00000000  00000000  0000cf70  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_pubnames 00000c92  00000000  00000000  0000d410  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_info   00058b61  00000000  00000000  0000e0a2  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_abbrev 00002114  00000000  00000000  00066c03  2**0
                  CONTENTS, READONLY, DEBUGGING
 22 .debug_line   0000413e  00000000  00000000  00068d17  2**0
                  CONTENTS, READONLY, DEBUGGING
 23 .debug_frame  00001c88  00000000  00000000  0006ce58  2**2
                  CONTENTS, READONLY, DEBUGGING
 24 .debug_str    0000564d  00000000  00000000  0006eae0  2**0
                  CONTENTS, READONLY, DEBUGGING
 25 .debug_loc    00001a17  00000000  00000000  0007412d  2**0
                  CONTENTS, READONLY, DEBUGGING
 26 .stack        00001000  00007000  00007000  00000000  2**0
                  ALLOC
 27 .debug_ranges 00000ad8  00000000  00000000  00075b44  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .reset:

80000000 <_trampoline>:
80000000:	e0 8f 10 00 	bral	80002000 <program_start>
	...

80002000 <program_start>:
80002000:	fe cf ff e0 	sub	pc,pc,-32

Disassembly of section .init:

80002004 <_init>:
80002004:	eb cd 40 40 	pushm	r6,lr
80002008:	48 26       	lddpc	r6,80002010 <_init+0xc>
8000200a:	1e 26       	rsub	r6,pc
8000200c:	c0 48       	rjmp	80002014 <_init+0x10>
8000200e:	d7 03       	nop
80002010:	80 00       	ld.sh	r0,r0[0x0]
80002012:	1f ee       	ld.ub	lr,pc[0x6]
80002014:	c6 0c       	rcall	800020d4 <frame_dummy>
80002016:	e0 a0 46 e1 	rcall	8000add8 <__do_global_ctors_aux>
8000201a:	e3 cd 80 40 	ldm	sp++,r6,pc

Disassembly of section .text:

80002020 <_stext>:
80002020:	30 07       	mov	r7,0
80002022:	49 5a       	lddpc	r10,80002074 <_stext+0x54>
80002024:	5b fa       	cp.w	r10,-1
80002026:	f4 0d 17 10 	movne	sp,r10
8000202a:	49 4b       	lddpc	r11,80002078 <_stext+0x58>
8000202c:	49 4c       	lddpc	r12,8000207c <_stext+0x5c>
8000202e:	18 3b       	cp.w	r11,r12
80002030:	c0 60       	breq	8000203c <_stext+0x1c>
80002032:	49 4a       	lddpc	r10,80002080 <_stext+0x60>
80002034:	b7 09       	ld.d	r8,r11++
80002036:	b9 28       	st.d	r12++,r8
80002038:	14 3c       	cp.w	r12,r10
8000203a:	cf d5       	brlt	80002034 <_stext+0x14>
8000203c:	49 2a       	lddpc	r10,80002084 <_stext+0x64>
8000203e:	49 1c       	lddpc	r12,80002080 <_stext+0x60>
80002040:	30 08       	mov	r8,0
80002042:	30 09       	mov	r9,0
80002044:	b9 28       	st.d	r12++,r8
80002046:	14 3c       	cp.w	r12,r10
80002048:	cf e5       	brlt	80002044 <_stext+0x24>
8000204a:	e0 a0 0b e5 	rcall	80003814 <_init_startup>
8000204e:	48 fc       	lddpc	r12,80002088 <_stext+0x68>
80002050:	e0 a0 19 78 	rcall	80005340 <atexit>
80002054:	cd 8f       	rcall	80002004 <_init>
80002056:	1a 9c       	mov	r12,sp
80002058:	30 0b       	mov	r11,0
8000205a:	e0 a0 17 78 	rcall	80004f4a <_init_argv>
8000205e:	5b fc       	cp.w	r12,-1
80002060:	f9 bc 00 00 	moveq	r12,0
80002064:	f9 ba 00 00 	moveq	r10,0
80002068:	14 1d       	sub	sp,r10
8000206a:	e0 a0 0c 25 	rcall	800038b4 <main>
8000206e:	e0 a0 19 77 	rcall	8000535c <exit>
80002072:	d7 03       	nop
80002074:	00 00       	add	r0,r0
80002076:	80 00       	ld.sh	r0,r0[0x0]
80002078:	80 00       	ld.sh	r0,r0[0x0]
8000207a:	c2 90       	breq	800020cc <__do_global_dtors_aux+0x40>
8000207c:	00 00       	add	r0,r0
8000207e:	00 08       	add	r8,r0
80002080:	00 00       	add	r0,r0
80002082:	05 30       	ld.ub	r0,r2++
80002084:	00 00       	add	r0,r0
80002086:	12 e0       	st.h	--r9,r0
80002088:	80 00       	ld.sh	r0,r0[0x0]
8000208a:	b0 00       	st.h	r8[0x0],r0

8000208c <__do_global_dtors_aux>:
8000208c:	eb cd 40 e0 	pushm	r5-r7,lr
80002090:	48 e6       	lddpc	r6,800020c8 <__do_global_dtors_aux+0x3c>
80002092:	30 08       	mov	r8,0
80002094:	0d 89       	ld.ub	r9,r6[0x0]
80002096:	f0 09 18 00 	cp.b	r9,r8
8000209a:	c1 41       	brne	800020c2 <__do_global_dtors_aux+0x36>
8000209c:	48 c5       	lddpc	r5,800020cc <__do_global_dtors_aux+0x40>
8000209e:	48 d8       	lddpc	r8,800020d0 <__do_global_dtors_aux+0x44>
800020a0:	6c 19       	ld.w	r9,r6[0x4]
800020a2:	0a 18       	sub	r8,r5
800020a4:	a3 48       	asr	r8,0x2
800020a6:	f0 c7 00 01 	sub	r7,r8,1
800020aa:	0e 39       	cp.w	r9,r7
800020ac:	c0 92       	brcc	800020be <__do_global_dtors_aux+0x32>
800020ae:	2f f9       	sub	r9,-1
800020b0:	8d 19       	st.w	r6[0x4],r9
800020b2:	ea 09 03 28 	ld.w	r8,r5[r9<<0x2]
800020b6:	5d 18       	icall	r8
800020b8:	6c 19       	ld.w	r9,r6[0x4]
800020ba:	0e 39       	cp.w	r9,r7
800020bc:	cf 93       	brcs	800020ae <__do_global_dtors_aux+0x22>
800020be:	30 18       	mov	r8,1
800020c0:	ac 88       	st.b	r6[0x0],r8
800020c2:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
800020c6:	d7 03       	nop
800020c8:	00 00       	add	r0,r0
800020ca:	05 30       	ld.ub	r0,r2++
800020cc:	00 00       	add	r0,r0
800020ce:	00 10       	sub	r0,r0
800020d0:	00 00       	add	r0,r0
800020d2:	00 14       	sub	r4,r0

800020d4 <frame_dummy>:
800020d4:	d4 01       	pushm	lr
800020d6:	48 5c       	lddpc	r12,800020e8 <frame_dummy+0x14>
800020d8:	78 08       	ld.w	r8,r12[0x0]
800020da:	58 08       	cp.w	r8,0
800020dc:	c0 50       	breq	800020e6 <frame_dummy+0x12>
800020de:	48 48       	lddpc	r8,800020ec <frame_dummy+0x18>
800020e0:	58 08       	cp.w	r8,0
800020e2:	c0 20       	breq	800020e6 <frame_dummy+0x12>
800020e4:	5d 18       	icall	r8
800020e6:	d8 02       	popm	pc
800020e8:	00 00       	add	r0,r0
800020ea:	00 18       	sub	r8,r0
800020ec:	00 00       	add	r0,r0
	...

800020f0 <usb_write_ep_txpacket>:
//! FIFO beginning whether or not the FIFO is to be written in several steps.
//!
//! @warning Do not mix calls to this function with calls to indexed macros.
//!
U32 usb_write_ep_txpacket(U8 ep, const void *txbuf, U32 data_length, const void **ptxbuf)
{
800020f0:	d4 31       	pushm	r0-r7,lr

  // Initialize pointers for copy loops and limit the number of bytes to copy
  ep_fifo.u8ptr = pep_fifo[ep].u8ptr;
  txbuf_cur.u8ptr = txbuf;
  txbuf_end.u8ptr = txbuf_cur.u8ptr +
                    min(data_length, Usb_get_endpoint_size(ep) - Usb_byte_count(ep));
800020f2:	f8 08 15 02 	lsl	r8,r12,0x2
800020f6:	e0 38 ff 00 	sub	r8,130816
//! FIFO beginning whether or not the FIFO is to be written in several steps.
//!
//! @warning Do not mix calls to this function with calls to indexed macros.
//!
U32 usb_write_ep_txpacket(U8 ep, const void *txbuf, U32 data_length, const void **ptxbuf)
{
800020fa:	18 92       	mov	r2,r12

  // Initialize pointers for copy loops and limit the number of bytes to copy
  ep_fifo.u8ptr = pep_fifo[ep].u8ptr;
  txbuf_cur.u8ptr = txbuf;
  txbuf_end.u8ptr = txbuf_cur.u8ptr +
                    min(data_length, Usb_get_endpoint_size(ep) - Usb_byte_count(ep));
800020fc:	70 0e       	ld.w	lr,r8[0x0]
800020fe:	f0 cc ff d0 	sub	r12,r8,-48
80002102:	fd de c0 83 	bfextu	lr,lr,0x4,0x3
80002106:	78 06       	ld.w	r6,r12[0x0]
80002108:	30 88       	mov	r8,8
8000210a:	ed d6 c2 8b 	bfextu	r6,r6,0x14,0xb
8000210e:	f0 0e 09 48 	lsl	r8,r8,lr
80002112:	0c 18       	sub	r8,r6
80002114:	f4 08 0d 48 	min	r8,r10,r8
#endif  // !__OPTIMIZE_SIZE__

  // Initialize pointers for copy loops and limit the number of bytes to copy
  ep_fifo.u8ptr = pep_fifo[ep].u8ptr;
  txbuf_cur.u8ptr = txbuf;
  txbuf_end.u8ptr = txbuf_cur.u8ptr +
80002118:	f6 08 00 07 	add	r7,r11,r8
#else
  UnionCPtr   txbuf_end;
#endif  // !__OPTIMIZE_SIZE__

  // Initialize pointers for copy loops and limit the number of bytes to copy
  ep_fifo.u8ptr = pep_fifo[ep].u8ptr;
8000211c:	4f 38       	lddpc	r8,800022e8 <usb_write_ep_txpacket+0x1f8>
//! FIFO beginning whether or not the FIFO is to be written in several steps.
//!
//! @warning Do not mix calls to this function with calls to indexed macros.
//!
U32 usb_write_ep_txpacket(U8 ep, const void *txbuf, U32 data_length, const void **ptxbuf)
{
8000211e:	16 94       	mov	r4,r11
#else
  UnionCPtr   txbuf_end;
#endif  // !__OPTIMIZE_SIZE__

  // Initialize pointers for copy loops and limit the number of bytes to copy
  ep_fifo.u8ptr = pep_fifo[ep].u8ptr;
80002120:	f0 02 03 26 	ld.w	r6,r8[r2<<0x2]
//! FIFO beginning whether or not the FIFO is to be written in several steps.
//!
//! @warning Do not mix calls to this function with calls to indexed macros.
//!
U32 usb_write_ep_txpacket(U8 ep, const void *txbuf, U32 data_length, const void **ptxbuf)
{
80002124:	14 91       	mov	r1,r10
80002126:	12 90       	mov	r0,r9
  UnionCPtr   txbuf_end;
#endif  // !__OPTIMIZE_SIZE__

  // Initialize pointers for copy loops and limit the number of bytes to copy
  ep_fifo.u8ptr = pep_fifo[ep].u8ptr;
  txbuf_cur.u8ptr = txbuf;
80002128:	16 9e       	mov	lr,r11
  txbuf_end.u16ptr = (U16 *)Align_down((U32)txbuf_end.u8ptr, sizeof(U16));
  txbuf_end.u32ptr = (U32 *)Align_down((U32)txbuf_end.u16ptr, sizeof(U32));
  txbuf_end.u64ptr = (U64 *)Align_down((U32)txbuf_end.u32ptr, sizeof(U64));

  // If all addresses are aligned the same way with respect to 16-bit boundaries
  if (Get_align((U32)txbuf_cur.u8ptr, sizeof(U16)) == Get_align((U32)ep_fifo.u8ptr, sizeof(U16)))
8000212a:	f7 e6 20 08 	eor	r8,r11,r6
8000212e:	ed b8 00 00 	bld	r8,0x0
80002132:	c7 70       	breq	80002220 <usb_write_ep_txpacket+0x130>
  {
    // If pointer to transmission buffer is not 16-bit aligned
    if (!Test_align((U32)txbuf_cur.u8ptr, sizeof(U16)))
80002134:	ed bb 00 00 	bld	r11,0x0
80002138:	c0 61       	brne	80002144 <usb_write_ep_txpacket+0x54>
    {
      // Copy 8-bit data to reach 16-bit alignment
      if (txbuf_cur.u8ptr < txbuf_end.u8ptr)
8000213a:	0e 3b       	cp.w	r11,r7
8000213c:	c0 42       	brcc	80002144 <usb_write_ep_txpacket+0x54>
      {
        // 8-bit accesses to FIFO data registers do require pointer post-increment
        *ep_fifo.u8ptr++ = *txbuf_cur.u8ptr++;
8000213e:	16 9e       	mov	lr,r11
80002140:	1d 38       	ld.ub	r8,lr++
80002142:	0c c8       	st.b	r6++,r8
      }
    }

    // If all addresses are aligned the same way with respect to 32-bit boundaries
    if (Get_align((U32)txbuf_cur.u16ptr, sizeof(U32)) == Get_align((U32)ep_fifo.u16ptr, sizeof(U32)))
80002144:	ed ee 20 08 	eor	r8,r6,lr
  ep_fifo.u8ptr = pep_fifo[ep].u8ptr;
  txbuf_cur.u8ptr = txbuf;
  txbuf_end.u8ptr = txbuf_cur.u8ptr +
                    min(data_length, Usb_get_endpoint_size(ep) - Usb_byte_count(ep));
#if !__OPTIMIZE_SIZE__  // Auto-generated when GCC's -Os command option is used
  txbuf_end.u16ptr = (U16 *)Align_down((U32)txbuf_end.u8ptr, sizeof(U16));
80002148:	0e 9c       	mov	r12,r7
        *ep_fifo.u8ptr++ = *txbuf_cur.u8ptr++;
      }
    }

    // If all addresses are aligned the same way with respect to 32-bit boundaries
    if (Get_align((U32)txbuf_cur.u16ptr, sizeof(U32)) == Get_align((U32)ep_fifo.u16ptr, sizeof(U32)))
8000214a:	f1 d8 c0 02 	bfextu	r8,r8,0x0,0x2
  ep_fifo.u8ptr = pep_fifo[ep].u8ptr;
  txbuf_cur.u8ptr = txbuf;
  txbuf_end.u8ptr = txbuf_cur.u8ptr +
                    min(data_length, Usb_get_endpoint_size(ep) - Usb_byte_count(ep));
#if !__OPTIMIZE_SIZE__  // Auto-generated when GCC's -Os command option is used
  txbuf_end.u16ptr = (U16 *)Align_down((U32)txbuf_end.u8ptr, sizeof(U16));
8000214e:	a1 cc       	cbr	r12,0x0
        *ep_fifo.u8ptr++ = *txbuf_cur.u8ptr++;
      }
    }

    // If all addresses are aligned the same way with respect to 32-bit boundaries
    if (Get_align((U32)txbuf_cur.u16ptr, sizeof(U32)) == Get_align((U32)ep_fifo.u16ptr, sizeof(U32)))
80002150:	58 08       	cp.w	r8,0
80002152:	c2 a1       	brne	800021a6 <usb_write_ep_txpacket+0xb6>
    {
      // If pointer to transmission buffer is not 32-bit aligned
      if (!Test_align((U32)txbuf_cur.u16ptr, sizeof(U32)))
80002154:	f1 de c0 02 	bfextu	r8,lr,0x0,0x2
80002158:	c0 60       	breq	80002164 <usb_write_ep_txpacket+0x74>
      {
        // Copy 16-bit data to reach 32-bit alignment
        if (txbuf_cur.u16ptr < txbuf_end.u16ptr)
8000215a:	1c 3c       	cp.w	r12,lr
8000215c:	e0 88 00 04 	brls	80002164 <usb_write_ep_txpacket+0x74>
        {
          // 16-bit accesses to FIFO data registers do require pointer post-increment
          *ep_fifo.u16ptr++ = *txbuf_cur.u16ptr++;
80002160:	1d 18       	ld.sh	r8,lr++
80002162:	0c b8       	st.h	r6++,r8
  txbuf_cur.u8ptr = txbuf;
  txbuf_end.u8ptr = txbuf_cur.u8ptr +
                    min(data_length, Usb_get_endpoint_size(ep) - Usb_byte_count(ep));
#if !__OPTIMIZE_SIZE__  // Auto-generated when GCC's -Os command option is used
  txbuf_end.u16ptr = (U16 *)Align_down((U32)txbuf_end.u8ptr, sizeof(U16));
  txbuf_end.u32ptr = (U32 *)Align_down((U32)txbuf_end.u16ptr, sizeof(U32));
80002164:	18 95       	mov	r5,r12
          *ep_fifo.u16ptr++ = *txbuf_cur.u16ptr++;
        }
      }

      // If pointer to transmission buffer is not 64-bit aligned
      if (!Test_align((U32)txbuf_cur.u32ptr, sizeof(U64)))
80002166:	f1 de c0 03 	bfextu	r8,lr,0x0,0x3
  txbuf_cur.u8ptr = txbuf;
  txbuf_end.u8ptr = txbuf_cur.u8ptr +
                    min(data_length, Usb_get_endpoint_size(ep) - Usb_byte_count(ep));
#if !__OPTIMIZE_SIZE__  // Auto-generated when GCC's -Os command option is used
  txbuf_end.u16ptr = (U16 *)Align_down((U32)txbuf_end.u8ptr, sizeof(U16));
  txbuf_end.u32ptr = (U32 *)Align_down((U32)txbuf_end.u16ptr, sizeof(U32));
8000216a:	e0 15 ff fc 	andl	r5,0xfffc
          *ep_fifo.u16ptr++ = *txbuf_cur.u16ptr++;
        }
      }

      // If pointer to transmission buffer is not 64-bit aligned
      if (!Test_align((U32)txbuf_cur.u32ptr, sizeof(U64)))
8000216e:	58 08       	cp.w	r8,0
80002170:	e0 81 00 9f 	brne	800022ae <usb_write_ep_txpacket+0x1be>
  txbuf_end.u8ptr = txbuf_cur.u8ptr +
                    min(data_length, Usb_get_endpoint_size(ep) - Usb_byte_count(ep));
#if !__OPTIMIZE_SIZE__  // Auto-generated when GCC's -Os command option is used
  txbuf_end.u16ptr = (U16 *)Align_down((U32)txbuf_end.u8ptr, sizeof(U16));
  txbuf_end.u32ptr = (U32 *)Align_down((U32)txbuf_end.u16ptr, sizeof(U32));
  txbuf_end.u64ptr = (U64 *)Align_down((U32)txbuf_end.u32ptr, sizeof(U64));
80002174:	0a 9b       	mov	r11,r5
80002176:	e0 1b ff f8 	andl	r11,0xfff8
          *ep_fifo.u32ptr = *txbuf_cur.u32ptr++;
        }
      }

      // Copy 64-bit-aligned data
      while (txbuf_cur.u64ptr < txbuf_end.u64ptr)
8000217a:	1c 3b       	cp.w	r11,lr
8000217c:	e0 88 00 10 	brls	8000219c <usb_write_ep_txpacket+0xac>
80002180:	1c 9a       	mov	r10,lr
      {
        // 64-bit accesses to FIFO data registers do not require pointer post-increment
        *ep_fifo.u64ptr = *txbuf_cur.u64ptr++;
80002182:	b5 09       	ld.d	r8,r10++
80002184:	ec e9 00 00 	st.d	r6[0],r8
          *ep_fifo.u32ptr = *txbuf_cur.u32ptr++;
        }
      }

      // Copy 64-bit-aligned data
      while (txbuf_cur.u64ptr < txbuf_end.u64ptr)
80002188:	14 3b       	cp.w	r11,r10
8000218a:	fe 9b ff fc 	brhi	80002182 <usb_write_ep_txpacket+0x92>
8000218e:	fc 08 11 ff 	rsub	r8,lr,-1
80002192:	16 08       	add	r8,r11
80002194:	e0 18 ff f8 	andl	r8,0xfff8
80002198:	2f 88       	sub	r8,-8
8000219a:	10 0e       	add	lr,r8
        // 64-bit accesses to FIFO data registers do not require pointer post-increment
        *ep_fifo.u64ptr = *txbuf_cur.u64ptr++;
      }

      // Copy 32-bit-aligned data
      if (txbuf_cur.u32ptr < txbuf_end.u32ptr)
8000219c:	1c 35       	cp.w	r5,lr
8000219e:	e0 88 00 04 	brls	800021a6 <usb_write_ep_txpacket+0xb6>
      {
        // 32-bit accesses to FIFO data registers do not require pointer post-increment
        *ep_fifo.u32ptr = *txbuf_cur.u32ptr++;
800021a2:	1d 08       	ld.w	r8,lr++
800021a4:	8d 08       	st.w	r6[0x0],r8
      }
    }

    // Copy remaining 16-bit data if some
    while (txbuf_cur.u16ptr < txbuf_end.u16ptr)
800021a6:	1c 3c       	cp.w	r12,lr
800021a8:	e0 88 00 3c 	brls	80002220 <usb_write_ep_txpacket+0x130>
//! FIFO beginning whether or not the FIFO is to be written in several steps.
//!
//! @warning Do not mix calls to this function with calls to indexed macros.
//!
U32 usb_write_ep_txpacket(U8 ep, const void *txbuf, U32 data_length, const void **ptxbuf)
{
800021ac:	fc 08 11 ff 	rsub	r8,lr,-1
800021b0:	18 08       	add	r8,r12
800021b2:	a1 98       	lsr	r8,0x1
800021b4:	f0 c3 ff ff 	sub	r3,r8,-1
800021b8:	fd e6 10 08 	or	r8,lr,r6
800021bc:	f1 d8 c0 02 	bfextu	r8,r8,0x0,0x2
800021c0:	5f 09       	sreq	r9
800021c2:	fc c8 ff fc 	sub	r8,lr,-4
800021c6:	58 13       	cp.w	r3,1
800021c8:	5f bb       	srhi	r11
800021ca:	10 36       	cp.w	r6,r8
800021cc:	5f ba       	srhi	r10
800021ce:	12 6b       	and	r11,r9
800021d0:	ec c8 ff fc 	sub	r8,r6,-4
800021d4:	10 3e       	cp.w	lr,r8
800021d6:	5f b9       	srhi	r9
800021d8:	12 4a       	or	r10,r9
800021da:	14 6b       	and	r11,r10
800021dc:	c7 70       	breq	800022ca <usb_write_ep_txpacket+0x1da>
800021de:	e6 0b 16 01 	lsr	r11,r3,0x1
800021e2:	f6 05 15 01 	lsl	r5,r11,0x1
800021e6:	c7 d0       	breq	800022e0 <usb_write_ep_txpacket+0x1f0>
800021e8:	30 0a       	mov	r10,0
800021ea:	14 99       	mov	r9,r10

    // Copy remaining 16-bit data if some
    while (txbuf_cur.u16ptr < txbuf_end.u16ptr)
    {
      // 16-bit accesses to FIFO data registers do require pointer post-increment
      *ep_fifo.u16ptr++ = *txbuf_cur.u16ptr++;
800021ec:	fc 09 03 08 	ld.w	r8,lr[r9]
800021f0:	ec 09 09 08 	st.w	r6[r9],r8
800021f4:	2f fa       	sub	r10,-1
800021f6:	2f c9       	sub	r9,-4
800021f8:	16 3a       	cp.w	r10,r11
800021fa:	cf 93       	brcs	800021ec <usb_write_ep_txpacket+0xfc>
//! FIFO beginning whether or not the FIFO is to be written in several steps.
//!
//! @warning Do not mix calls to this function with calls to indexed macros.
//!
U32 usb_write_ep_txpacket(U8 ep, const void *txbuf, U32 data_length, const void **ptxbuf)
{
800021fc:	ea 08 15 01 	lsl	r8,r5,0x1
80002200:	fc 08 00 09 	add	r9,lr,r8
80002204:	ec 08 00 08 	add	r8,r6,r8
80002208:	0a 33       	cp.w	r3,r5
8000220a:	c0 70       	breq	80002218 <usb_write_ep_txpacket+0x128>
8000220c:	10 9a       	mov	r10,r8

    // Copy remaining 16-bit data if some
    while (txbuf_cur.u16ptr < txbuf_end.u16ptr)
    {
      // 16-bit accesses to FIFO data registers do require pointer post-increment
      *ep_fifo.u16ptr++ = *txbuf_cur.u16ptr++;
8000220e:	13 18       	ld.sh	r8,r9++
80002210:	14 b8       	st.h	r10++,r8
        *ep_fifo.u32ptr = *txbuf_cur.u32ptr++;
      }
    }

    // Copy remaining 16-bit data if some
    while (txbuf_cur.u16ptr < txbuf_end.u16ptr)
80002212:	12 3c       	cp.w	r12,r9
80002214:	fe 9b ff fd 	brhi	8000220e <usb_write_ep_txpacket+0x11e>
//! FIFO beginning whether or not the FIFO is to be written in several steps.
//!
//! @warning Do not mix calls to this function with calls to indexed macros.
//!
U32 usb_write_ep_txpacket(U8 ep, const void *txbuf, U32 data_length, const void **ptxbuf)
{
80002218:	e6 08 15 01 	lsl	r8,r3,0x1
8000221c:	10 06       	add	r6,r8
8000221e:	10 0e       	add	lr,r8
  }

#endif  // !__OPTIMIZE_SIZE__

  // Copy remaining 8-bit data if some
  while (txbuf_cur.u8ptr < txbuf_end.u8ptr)
80002220:	1c 9c       	mov	r12,lr
80002222:	1c 37       	cp.w	r7,lr
80002224:	e0 88 00 3b 	brls	8000229a <usb_write_ep_txpacket+0x1aa>
80002228:	fd e6 10 08 	or	r8,lr,r6
8000222c:	f1 d8 c0 02 	bfextu	r8,r8,0x0,0x2
80002230:	5f 09       	sreq	r9
80002232:	fc c8 ff fc 	sub	r8,lr,-4
//! FIFO beginning whether or not the FIFO is to be written in several steps.
//!
//! @warning Do not mix calls to this function with calls to indexed macros.
//!
U32 usb_write_ep_txpacket(U8 ep, const void *txbuf, U32 data_length, const void **ptxbuf)
{
80002236:	ee 0e 01 05 	sub	r5,r7,lr
8000223a:	10 36       	cp.w	r6,r8
8000223c:	5f ba       	srhi	r10
8000223e:	58 35       	cp.w	r5,3
80002240:	5f bb       	srhi	r11
80002242:	ec c8 ff fc 	sub	r8,r6,-4
80002246:	12 6b       	and	r11,r9
80002248:	fc c3 ff ff 	sub	r3,lr,-1
8000224c:	10 3e       	cp.w	lr,r8
8000224e:	5f b9       	srhi	r9
80002250:	12 4a       	or	r10,r9
80002252:	14 6b       	and	r11,r10
80002254:	c3 30       	breq	800022ba <usb_write_ep_txpacket+0x1ca>
80002256:	ea 0b 16 02 	lsr	r11,r5,0x2
8000225a:	f6 0c 15 02 	lsl	r12,r11,0x2
8000225e:	c3 e0       	breq	800022da <usb_write_ep_txpacket+0x1ea>
80002260:	30 0a       	mov	r10,0
80002262:	14 99       	mov	r9,r10

  // Copy remaining 8-bit data if some
  while (txbuf_cur.u8ptr < txbuf_end.u8ptr)
  {
    // 8-bit accesses to FIFO data registers do require pointer post-increment
    *ep_fifo.u8ptr++ = *txbuf_cur.u8ptr++;
80002264:	fc 09 03 08 	ld.w	r8,lr[r9]
80002268:	ec 09 09 08 	st.w	r6[r9],r8
8000226c:	2f fa       	sub	r10,-1
8000226e:	2f c9       	sub	r9,-4
80002270:	16 3a       	cp.w	r10,r11
80002272:	cf 93       	brcs	80002264 <usb_write_ep_txpacket+0x174>
  }

#endif  // !__OPTIMIZE_SIZE__

  // Copy remaining 8-bit data if some
  while (txbuf_cur.u8ptr < txbuf_end.u8ptr)
80002274:	ec 0c 00 08 	add	r8,r6,r12
80002278:	fc 0c 00 09 	add	r9,lr,r12
8000227c:	18 35       	cp.w	r5,r12
8000227e:	c0 70       	breq	8000228c <usb_write_ep_txpacket+0x19c>
80002280:	10 9a       	mov	r10,r8
  {
    // 8-bit accesses to FIFO data registers do require pointer post-increment
    *ep_fifo.u8ptr++ = *txbuf_cur.u8ptr++;
80002282:	13 38       	ld.ub	r8,r9++
80002284:	14 c8       	st.b	r10++,r8
  }

#endif  // !__OPTIMIZE_SIZE__

  // Copy remaining 8-bit data if some
  while (txbuf_cur.u8ptr < txbuf_end.u8ptr)
80002286:	12 37       	cp.w	r7,r9
80002288:	fe 9b ff fd 	brhi	80002282 <usb_write_ep_txpacket+0x192>
//! FIFO beginning whether or not the FIFO is to be written in several steps.
//!
//! @warning Do not mix calls to this function with calls to indexed macros.
//!
U32 usb_write_ep_txpacket(U8 ep, const void *txbuf, U32 data_length, const void **ptxbuf)
{
8000228c:	e6 08 11 01 	rsub	r8,r3,1
80002290:	ee 08 00 08 	add	r8,r7,r8
80002294:	10 06       	add	r6,r8
80002296:	fc 08 00 0c 	add	r12,lr,r8
    // 8-bit accesses to FIFO data registers do require pointer post-increment
    *ep_fifo.u8ptr++ = *txbuf_cur.u8ptr++;
  }

  // Save current position in FIFO data register
  pep_fifo[ep].u8ptr = ep_fifo.u8ptr;
8000229a:	49 48       	lddpc	r8,800022e8 <usb_write_ep_txpacket+0x1f8>
8000229c:	f0 02 09 26 	st.w	r8[r2<<0x2],r6

  // Return the updated buffer address and the number of non-copied bytes
  if (ptxbuf) *ptxbuf = txbuf_cur.u8ptr;
800022a0:	58 00       	cp.w	r0,0
800022a2:	c0 20       	breq	800022a6 <usb_write_ep_txpacket+0x1b6>
800022a4:	81 0c       	st.w	r0[0x0],r12
800022a6:	e8 0c 01 0c 	sub	r12,r4,r12
  return data_length - (txbuf_cur.u8ptr - (U8 *)txbuf);
}
800022aa:	02 0c       	add	r12,r1
800022ac:	d8 32       	popm	r0-r7,pc

      // If pointer to transmission buffer is not 64-bit aligned
      if (!Test_align((U32)txbuf_cur.u32ptr, sizeof(U64)))
      {
        // Copy 32-bit data to reach 64-bit alignment
        if (txbuf_cur.u32ptr < txbuf_end.u32ptr)
800022ae:	1c 35       	cp.w	r5,lr
800022b0:	fe 98 ff 62 	brls	80002174 <usb_write_ep_txpacket+0x84>
        {
          // 32-bit accesses to FIFO data registers do not require pointer post-increment
          *ep_fifo.u32ptr = *txbuf_cur.u32ptr++;
800022b4:	1d 08       	ld.w	r8,lr++
800022b6:	8d 08       	st.w	r6[0x0],r8
800022b8:	c5 eb       	rjmp	80002174 <usb_write_ep_txpacket+0x84>
  }

#endif  // !__OPTIMIZE_SIZE__

  // Copy remaining 8-bit data if some
  while (txbuf_cur.u8ptr < txbuf_end.u8ptr)
800022ba:	0c 9a       	mov	r10,r6
800022bc:	1c 99       	mov	r9,lr
  {
    // 8-bit accesses to FIFO data registers do require pointer post-increment
    *ep_fifo.u8ptr++ = *txbuf_cur.u8ptr++;
800022be:	13 38       	ld.ub	r8,r9++
800022c0:	14 c8       	st.b	r10++,r8
  }

#endif  // !__OPTIMIZE_SIZE__

  // Copy remaining 8-bit data if some
  while (txbuf_cur.u8ptr < txbuf_end.u8ptr)
800022c2:	12 37       	cp.w	r7,r9
800022c4:	fe 9b ff fd 	brhi	800022be <usb_write_ep_txpacket+0x1ce>
800022c8:	ce 2b       	rjmp	8000228c <usb_write_ep_txpacket+0x19c>
//! FIFO beginning whether or not the FIFO is to be written in several steps.
//!
//! @warning Do not mix calls to this function with calls to indexed macros.
//!
U32 usb_write_ep_txpacket(U8 ep, const void *txbuf, U32 data_length, const void **ptxbuf)
{
800022ca:	0c 9a       	mov	r10,r6
800022cc:	1c 99       	mov	r9,lr

    // Copy remaining 16-bit data if some
    while (txbuf_cur.u16ptr < txbuf_end.u16ptr)
    {
      // 16-bit accesses to FIFO data registers do require pointer post-increment
      *ep_fifo.u16ptr++ = *txbuf_cur.u16ptr++;
800022ce:	13 18       	ld.sh	r8,r9++
800022d0:	14 b8       	st.h	r10++,r8
        *ep_fifo.u32ptr = *txbuf_cur.u32ptr++;
      }
    }

    // Copy remaining 16-bit data if some
    while (txbuf_cur.u16ptr < txbuf_end.u16ptr)
800022d2:	12 3c       	cp.w	r12,r9
800022d4:	fe 9b ff fd 	brhi	800022ce <usb_write_ep_txpacket+0x1de>
800022d8:	ca 0b       	rjmp	80002218 <usb_write_ep_txpacket+0x128>
800022da:	1c 99       	mov	r9,lr
800022dc:	0c 98       	mov	r8,r6
800022de:	cd 1b       	rjmp	80002280 <usb_write_ep_txpacket+0x190>
800022e0:	1c 99       	mov	r9,lr
800022e2:	0c 98       	mov	r8,r6
800022e4:	c9 4b       	rjmp	8000220c <usb_write_ep_txpacket+0x11c>
800022e6:	d7 03       	nop
800022e8:	00 00       	add	r0,r0
800022ea:	06 6c       	and	r12,r3

800022ec <usb_read_ep_rxpacket>:
//! FIFO beginning whether or not the FIFO is to be read in several steps.
//!
//! @warning Do not mix calls to this function with calls to indexed macros.
//!
U32 usb_read_ep_rxpacket(U8 ep, void *rxbuf, U32 data_length, void **prxbuf)
{
800022ec:	d4 31       	pushm	r0-r7,lr
800022ee:	20 2d       	sub	sp,8
#endif  // !__OPTIMIZE_SIZE__

  // Initialize pointers for copy loops and limit the number of bytes to copy
  ep_fifo.u8ptr = pep_fifo[ep].u8ptr;
  rxbuf_cur.u8ptr = rxbuf;
  rxbuf_end.u8ptr = rxbuf_cur.u8ptr + min(data_length, Usb_byte_count(ep));
800022f0:	f8 08 15 02 	lsl	r8,r12,0x2
800022f4:	e0 38 fe d0 	sub	r8,130768
//! FIFO beginning whether or not the FIFO is to be read in several steps.
//!
//! @warning Do not mix calls to this function with calls to indexed macros.
//!
U32 usb_read_ep_rxpacket(U8 ep, void *rxbuf, U32 data_length, void **prxbuf)
{
800022f8:	18 90       	mov	r0,r12
#endif  // !__OPTIMIZE_SIZE__

  // Initialize pointers for copy loops and limit the number of bytes to copy
  ep_fifo.u8ptr = pep_fifo[ep].u8ptr;
  rxbuf_cur.u8ptr = rxbuf;
  rxbuf_end.u8ptr = rxbuf_cur.u8ptr + min(data_length, Usb_byte_count(ep));
800022fa:	70 0c       	ld.w	r12,r8[0x0]
#else
  StructCPtr  rxbuf_end;
#endif  // !__OPTIMIZE_SIZE__

  // Initialize pointers for copy loops and limit the number of bytes to copy
  ep_fifo.u8ptr = pep_fifo[ep].u8ptr;
800022fc:	4f 98       	lddpc	r8,800024e0 <usb_read_ep_rxpacket+0x1f4>
//! FIFO beginning whether or not the FIFO is to be read in several steps.
//!
//! @warning Do not mix calls to this function with calls to indexed macros.
//!
U32 usb_read_ep_rxpacket(U8 ep, void *rxbuf, U32 data_length, void **prxbuf)
{
800022fe:	50 1a       	stdsp	sp[0x4],r10
80002300:	50 09       	stdsp	sp[0x0],r9
#endif  // !__OPTIMIZE_SIZE__

  // Initialize pointers for copy loops and limit the number of bytes to copy
  ep_fifo.u8ptr = pep_fifo[ep].u8ptr;
  rxbuf_cur.u8ptr = rxbuf;
  rxbuf_end.u8ptr = rxbuf_cur.u8ptr + min(data_length, Usb_byte_count(ep));
80002302:	f9 dc c2 8b 	bfextu	r12,r12,0x14,0xb
#else
  StructCPtr  rxbuf_end;
#endif  // !__OPTIMIZE_SIZE__

  // Initialize pointers for copy loops and limit the number of bytes to copy
  ep_fifo.u8ptr = pep_fifo[ep].u8ptr;
80002306:	f0 00 03 2e 	ld.w	lr,r8[r0<<0x2]
  rxbuf_cur.u8ptr = rxbuf;
  rxbuf_end.u8ptr = rxbuf_cur.u8ptr + min(data_length, Usb_byte_count(ep));
8000230a:	f4 0c 0d 4c 	min	r12,r10,r12
//! FIFO beginning whether or not the FIFO is to be read in several steps.
//!
//! @warning Do not mix calls to this function with calls to indexed macros.
//!
U32 usb_read_ep_rxpacket(U8 ep, void *rxbuf, U32 data_length, void **prxbuf)
{
8000230e:	16 92       	mov	r2,r11
#endif  // !__OPTIMIZE_SIZE__

  // Initialize pointers for copy loops and limit the number of bytes to copy
  ep_fifo.u8ptr = pep_fifo[ep].u8ptr;
  rxbuf_cur.u8ptr = rxbuf;
  rxbuf_end.u8ptr = rxbuf_cur.u8ptr + min(data_length, Usb_byte_count(ep));
80002310:	f6 0c 00 05 	add	r5,r11,r12
  StructCPtr  rxbuf_end;
#endif  // !__OPTIMIZE_SIZE__

  // Initialize pointers for copy loops and limit the number of bytes to copy
  ep_fifo.u8ptr = pep_fifo[ep].u8ptr;
  rxbuf_cur.u8ptr = rxbuf;
80002314:	16 97       	mov	r7,r11
  rxbuf_end.u16ptr = (U16 *)Align_down((U32)rxbuf_end.u8ptr, sizeof(U16));
  rxbuf_end.u32ptr = (U32 *)Align_down((U32)rxbuf_end.u16ptr, sizeof(U32));
  rxbuf_end.u64ptr = (U64 *)Align_down((U32)rxbuf_end.u32ptr, sizeof(U64));

  // If all addresses are aligned the same way with respect to 16-bit boundaries
  if (Get_align((U32)rxbuf_cur.u8ptr, sizeof(U16)) == Get_align((U32)ep_fifo.u8ptr, sizeof(U16)))
80002316:	f7 ee 20 08 	eor	r8,r11,lr
8000231a:	ed b8 00 00 	bld	r8,0x0
8000231e:	c7 80       	breq	8000240e <usb_read_ep_rxpacket+0x122>
  {
    // If pointer to reception buffer is not 16-bit aligned
    if (!Test_align((U32)rxbuf_cur.u8ptr, sizeof(U16)))
80002320:	ed bb 00 00 	bld	r11,0x0
80002324:	c0 61       	brne	80002330 <usb_read_ep_rxpacket+0x44>
    {
      // Copy 8-bit data to reach 16-bit alignment
      if (rxbuf_cur.u8ptr < rxbuf_end.u8ptr)
80002326:	0a 3b       	cp.w	r11,r5
80002328:	c0 42       	brcc	80002330 <usb_read_ep_rxpacket+0x44>
      {
        // 8-bit accesses to FIFO data registers do require pointer post-increment
        *rxbuf_cur.u8ptr++ = *ep_fifo.u8ptr++;
8000232a:	1d 38       	ld.ub	r8,lr++
8000232c:	16 97       	mov	r7,r11
8000232e:	0e c8       	st.b	r7++,r8
      }
    }

    // If all addresses are aligned the same way with respect to 32-bit boundaries
    if (Get_align((U32)rxbuf_cur.u16ptr, sizeof(U32)) == Get_align((U32)ep_fifo.u16ptr, sizeof(U32)))
80002330:	fd e7 20 08 	eor	r8,lr,r7
  // Initialize pointers for copy loops and limit the number of bytes to copy
  ep_fifo.u8ptr = pep_fifo[ep].u8ptr;
  rxbuf_cur.u8ptr = rxbuf;
  rxbuf_end.u8ptr = rxbuf_cur.u8ptr + min(data_length, Usb_byte_count(ep));
#if !__OPTIMIZE_SIZE__  // Auto-generated when GCC's -Os command option is used
  rxbuf_end.u16ptr = (U16 *)Align_down((U32)rxbuf_end.u8ptr, sizeof(U16));
80002334:	0a 93       	mov	r3,r5
        *rxbuf_cur.u8ptr++ = *ep_fifo.u8ptr++;
      }
    }

    // If all addresses are aligned the same way with respect to 32-bit boundaries
    if (Get_align((U32)rxbuf_cur.u16ptr, sizeof(U32)) == Get_align((U32)ep_fifo.u16ptr, sizeof(U32)))
80002336:	f1 d8 c0 02 	bfextu	r8,r8,0x0,0x2
  // Initialize pointers for copy loops and limit the number of bytes to copy
  ep_fifo.u8ptr = pep_fifo[ep].u8ptr;
  rxbuf_cur.u8ptr = rxbuf;
  rxbuf_end.u8ptr = rxbuf_cur.u8ptr + min(data_length, Usb_byte_count(ep));
#if !__OPTIMIZE_SIZE__  // Auto-generated when GCC's -Os command option is used
  rxbuf_end.u16ptr = (U16 *)Align_down((U32)rxbuf_end.u8ptr, sizeof(U16));
8000233a:	a1 c3       	cbr	r3,0x0
        *rxbuf_cur.u8ptr++ = *ep_fifo.u8ptr++;
      }
    }

    // If all addresses are aligned the same way with respect to 32-bit boundaries
    if (Get_align((U32)rxbuf_cur.u16ptr, sizeof(U32)) == Get_align((U32)ep_fifo.u16ptr, sizeof(U32)))
8000233c:	58 08       	cp.w	r8,0
8000233e:	c2 a1       	brne	80002392 <usb_read_ep_rxpacket+0xa6>
    {
      // If pointer to reception buffer is not 32-bit aligned
      if (!Test_align((U32)rxbuf_cur.u16ptr, sizeof(U32)))
80002340:	f1 d7 c0 02 	bfextu	r8,r7,0x0,0x2
80002344:	c0 60       	breq	80002350 <usb_read_ep_rxpacket+0x64>
      {
        // Copy 16-bit data to reach 32-bit alignment
        if (rxbuf_cur.u16ptr < rxbuf_end.u16ptr)
80002346:	0e 33       	cp.w	r3,r7
80002348:	e0 88 00 04 	brls	80002350 <usb_read_ep_rxpacket+0x64>
        {
          // 16-bit accesses to FIFO data registers do require pointer post-increment
          *rxbuf_cur.u16ptr++ = *ep_fifo.u16ptr++;
8000234c:	1d 18       	ld.sh	r8,lr++
8000234e:	0e b8       	st.h	r7++,r8
  ep_fifo.u8ptr = pep_fifo[ep].u8ptr;
  rxbuf_cur.u8ptr = rxbuf;
  rxbuf_end.u8ptr = rxbuf_cur.u8ptr + min(data_length, Usb_byte_count(ep));
#if !__OPTIMIZE_SIZE__  // Auto-generated when GCC's -Os command option is used
  rxbuf_end.u16ptr = (U16 *)Align_down((U32)rxbuf_end.u8ptr, sizeof(U16));
  rxbuf_end.u32ptr = (U32 *)Align_down((U32)rxbuf_end.u16ptr, sizeof(U32));
80002350:	06 9c       	mov	r12,r3
          *rxbuf_cur.u16ptr++ = *ep_fifo.u16ptr++;
        }
      }

      // If pointer to reception buffer is not 64-bit aligned
      if (!Test_align((U32)rxbuf_cur.u32ptr, sizeof(U64)))
80002352:	f1 d7 c0 03 	bfextu	r8,r7,0x0,0x3
  ep_fifo.u8ptr = pep_fifo[ep].u8ptr;
  rxbuf_cur.u8ptr = rxbuf;
  rxbuf_end.u8ptr = rxbuf_cur.u8ptr + min(data_length, Usb_byte_count(ep));
#if !__OPTIMIZE_SIZE__  // Auto-generated when GCC's -Os command option is used
  rxbuf_end.u16ptr = (U16 *)Align_down((U32)rxbuf_end.u8ptr, sizeof(U16));
  rxbuf_end.u32ptr = (U32 *)Align_down((U32)rxbuf_end.u16ptr, sizeof(U32));
80002356:	e0 1c ff fc 	andl	r12,0xfffc
          *rxbuf_cur.u16ptr++ = *ep_fifo.u16ptr++;
        }
      }

      // If pointer to reception buffer is not 64-bit aligned
      if (!Test_align((U32)rxbuf_cur.u32ptr, sizeof(U64)))
8000235a:	58 08       	cp.w	r8,0
8000235c:	e0 81 00 a6 	brne	800024a8 <usb_read_ep_rxpacket+0x1bc>
  rxbuf_cur.u8ptr = rxbuf;
  rxbuf_end.u8ptr = rxbuf_cur.u8ptr + min(data_length, Usb_byte_count(ep));
#if !__OPTIMIZE_SIZE__  // Auto-generated when GCC's -Os command option is used
  rxbuf_end.u16ptr = (U16 *)Align_down((U32)rxbuf_end.u8ptr, sizeof(U16));
  rxbuf_end.u32ptr = (U32 *)Align_down((U32)rxbuf_end.u16ptr, sizeof(U32));
  rxbuf_end.u64ptr = (U64 *)Align_down((U32)rxbuf_end.u32ptr, sizeof(U64));
80002360:	18 9b       	mov	r11,r12
80002362:	e0 1b ff f8 	andl	r11,0xfff8
          *rxbuf_cur.u32ptr++ = *ep_fifo.u32ptr;
        }
      }

      // Copy 64-bit-aligned data
      while (rxbuf_cur.u64ptr < rxbuf_end.u64ptr)
80002366:	0e 3b       	cp.w	r11,r7
80002368:	e0 88 00 10 	brls	80002388 <usb_read_ep_rxpacket+0x9c>
8000236c:	0e 9a       	mov	r10,r7
      {
        // 64-bit accesses to FIFO data registers do not require pointer post-increment
        *rxbuf_cur.u64ptr++ = *ep_fifo.u64ptr;
8000236e:	fc e8 00 00 	ld.d	r8,lr[0]
80002372:	b5 28       	st.d	r10++,r8
          *rxbuf_cur.u32ptr++ = *ep_fifo.u32ptr;
        }
      }

      // Copy 64-bit-aligned data
      while (rxbuf_cur.u64ptr < rxbuf_end.u64ptr)
80002374:	14 3b       	cp.w	r11,r10
80002376:	fe 9b ff fc 	brhi	8000236e <usb_read_ep_rxpacket+0x82>
8000237a:	ee 08 11 ff 	rsub	r8,r7,-1
8000237e:	16 08       	add	r8,r11
80002380:	e0 18 ff f8 	andl	r8,0xfff8
80002384:	2f 88       	sub	r8,-8
80002386:	10 07       	add	r7,r8
        // 64-bit accesses to FIFO data registers do not require pointer post-increment
        *rxbuf_cur.u64ptr++ = *ep_fifo.u64ptr;
      }

      // Copy 32-bit-aligned data
      if (rxbuf_cur.u32ptr < rxbuf_end.u32ptr)
80002388:	0e 3c       	cp.w	r12,r7
8000238a:	e0 88 00 04 	brls	80002392 <usb_read_ep_rxpacket+0xa6>
      {
        // 32-bit accesses to FIFO data registers do not require pointer post-increment
        *rxbuf_cur.u32ptr++ = *ep_fifo.u32ptr;
8000238e:	7c 08       	ld.w	r8,lr[0x0]
80002390:	0e a8       	st.w	r7++,r8
      }
    }

    // Copy remaining 16-bit data if some
    while (rxbuf_cur.u16ptr < rxbuf_end.u16ptr)
80002392:	0e 33       	cp.w	r3,r7
80002394:	e0 88 00 3d 	brls	8000240e <usb_read_ep_rxpacket+0x122>
//! FIFO beginning whether or not the FIFO is to be read in several steps.
//!
//! @warning Do not mix calls to this function with calls to indexed macros.
//!
U32 usb_read_ep_rxpacket(U8 ep, void *rxbuf, U32 data_length, void **prxbuf)
{
80002398:	ee 08 11 ff 	rsub	r8,r7,-1
8000239c:	06 08       	add	r8,r3
8000239e:	a1 98       	lsr	r8,0x1
800023a0:	f0 c1 ff ff 	sub	r1,r8,-1
800023a4:	ef ee 10 08 	or	r8,r7,lr
800023a8:	f1 d8 c0 02 	bfextu	r8,r8,0x0,0x2
800023ac:	5f 09       	sreq	r9
800023ae:	fc c8 ff fc 	sub	r8,lr,-4
800023b2:	58 11       	cp.w	r1,1
800023b4:	5f bb       	srhi	r11
800023b6:	10 37       	cp.w	r7,r8
800023b8:	5f ba       	srhi	r10
800023ba:	12 6b       	and	r11,r9
800023bc:	ee c8 ff fc 	sub	r8,r7,-4
800023c0:	10 3e       	cp.w	lr,r8
800023c2:	5f b9       	srhi	r9
800023c4:	12 4a       	or	r10,r9
800023c6:	14 6b       	and	r11,r10
800023c8:	c7 e0       	breq	800024c4 <usb_read_ep_rxpacket+0x1d8>
800023ca:	e2 06 16 01 	lsr	r6,r1,0x1
800023ce:	ec 04 15 01 	lsl	r4,r6,0x1
800023d2:	e0 80 00 84 	breq	800024da <usb_read_ep_rxpacket+0x1ee>
800023d6:	1c 9c       	mov	r12,lr
800023d8:	0e 9b       	mov	r11,r7
800023da:	1c 9a       	mov	r10,lr
800023dc:	30 09       	mov	r9,0

    // Copy remaining 16-bit data if some
    while (rxbuf_cur.u16ptr < rxbuf_end.u16ptr)
    {
      // 16-bit accesses to FIFO data registers do require pointer post-increment
      *rxbuf_cur.u16ptr++ = *ep_fifo.u16ptr++;
800023de:	15 18       	ld.sh	r8,r10++
800023e0:	19 08       	ld.w	r8,r12++
800023e2:	16 a8       	st.w	r11++,r8
800023e4:	2f f9       	sub	r9,-1
800023e6:	0c 39       	cp.w	r9,r6
800023e8:	cf b3       	brcs	800023de <usb_read_ep_rxpacket+0xf2>
//! FIFO beginning whether or not the FIFO is to be read in several steps.
//!
//! @warning Do not mix calls to this function with calls to indexed macros.
//!
U32 usb_read_ep_rxpacket(U8 ep, void *rxbuf, U32 data_length, void **prxbuf)
{
800023ea:	e8 08 15 01 	lsl	r8,r4,0x1
800023ee:	ee 08 00 09 	add	r9,r7,r8
800023f2:	fc 08 00 08 	add	r8,lr,r8
800023f6:	08 31       	cp.w	r1,r4
800023f8:	c0 70       	breq	80002406 <usb_read_ep_rxpacket+0x11a>
800023fa:	10 9a       	mov	r10,r8

    // Copy remaining 16-bit data if some
    while (rxbuf_cur.u16ptr < rxbuf_end.u16ptr)
    {
      // 16-bit accesses to FIFO data registers do require pointer post-increment
      *rxbuf_cur.u16ptr++ = *ep_fifo.u16ptr++;
800023fc:	15 18       	ld.sh	r8,r10++
800023fe:	12 b8       	st.h	r9++,r8
        *rxbuf_cur.u32ptr++ = *ep_fifo.u32ptr;
      }
    }

    // Copy remaining 16-bit data if some
    while (rxbuf_cur.u16ptr < rxbuf_end.u16ptr)
80002400:	12 33       	cp.w	r3,r9
80002402:	fe 9b ff fd 	brhi	800023fc <usb_read_ep_rxpacket+0x110>
//! FIFO beginning whether or not the FIFO is to be read in several steps.
//!
//! @warning Do not mix calls to this function with calls to indexed macros.
//!
U32 usb_read_ep_rxpacket(U8 ep, void *rxbuf, U32 data_length, void **prxbuf)
{
80002406:	e2 08 15 01 	lsl	r8,r1,0x1
8000240a:	10 0e       	add	lr,r8
8000240c:	10 07       	add	r7,r8
  }

#endif  // !__OPTIMIZE_SIZE__

  // Copy remaining 8-bit data if some
  while (rxbuf_cur.u8ptr < rxbuf_end.u8ptr)
8000240e:	0e 9c       	mov	r12,r7
80002410:	0e 35       	cp.w	r5,r7
80002412:	e0 88 00 3e 	brls	8000248e <usb_read_ep_rxpacket+0x1a2>
80002416:	ef ee 10 08 	or	r8,r7,lr
8000241a:	f1 d8 c0 02 	bfextu	r8,r8,0x0,0x2
8000241e:	5f 09       	sreq	r9
80002420:	fc c8 ff fc 	sub	r8,lr,-4
//! FIFO beginning whether or not the FIFO is to be read in several steps.
//!
//! @warning Do not mix calls to this function with calls to indexed macros.
//!
U32 usb_read_ep_rxpacket(U8 ep, void *rxbuf, U32 data_length, void **prxbuf)
{
80002424:	ea 07 01 04 	sub	r4,r5,r7
80002428:	10 37       	cp.w	r7,r8
8000242a:	5f ba       	srhi	r10
8000242c:	58 34       	cp.w	r4,3
8000242e:	5f bb       	srhi	r11
80002430:	ee c8 ff fc 	sub	r8,r7,-4
80002434:	12 6b       	and	r11,r9
80002436:	ee c3 ff ff 	sub	r3,r7,-1
8000243a:	10 3e       	cp.w	lr,r8
8000243c:	5f b9       	srhi	r9
8000243e:	12 4a       	or	r10,r9
80002440:	14 6b       	and	r11,r10
80002442:	c3 90       	breq	800024b4 <usb_read_ep_rxpacket+0x1c8>
80002444:	e8 0c 16 02 	lsr	r12,r4,0x2
80002448:	f8 06 15 02 	lsl	r6,r12,0x2
8000244c:	c4 40       	breq	800024d4 <usb_read_ep_rxpacket+0x1e8>
8000244e:	30 0b       	mov	r11,0
80002450:	16 9a       	mov	r10,r11
80002452:	fc 0b 00 08 	add	r8,lr,r11

  // Copy remaining 8-bit data if some
  while (rxbuf_cur.u8ptr < rxbuf_end.u8ptr)
  {
    // 8-bit accesses to FIFO data registers do require pointer post-increment
    *rxbuf_cur.u8ptr++ = *ep_fifo.u8ptr++;
80002456:	11 88       	ld.ub	r8,r8[0x0]
80002458:	fc 0a 03 09 	ld.w	r9,lr[r10]
8000245c:	ee 0a 09 09 	st.w	r7[r10],r9
80002460:	2f fb       	sub	r11,-1
80002462:	2f ca       	sub	r10,-4
80002464:	18 3b       	cp.w	r11,r12
80002466:	cf 63       	brcs	80002452 <usb_read_ep_rxpacket+0x166>
  }

#endif  // !__OPTIMIZE_SIZE__

  // Copy remaining 8-bit data if some
  while (rxbuf_cur.u8ptr < rxbuf_end.u8ptr)
80002468:	fc 06 00 08 	add	r8,lr,r6
8000246c:	ee 06 00 09 	add	r9,r7,r6
80002470:	0c 34       	cp.w	r4,r6
80002472:	c0 70       	breq	80002480 <usb_read_ep_rxpacket+0x194>
80002474:	10 9a       	mov	r10,r8
  {
    // 8-bit accesses to FIFO data registers do require pointer post-increment
    *rxbuf_cur.u8ptr++ = *ep_fifo.u8ptr++;
80002476:	15 38       	ld.ub	r8,r10++
80002478:	12 c8       	st.b	r9++,r8
  }

#endif  // !__OPTIMIZE_SIZE__

  // Copy remaining 8-bit data if some
  while (rxbuf_cur.u8ptr < rxbuf_end.u8ptr)
8000247a:	12 35       	cp.w	r5,r9
8000247c:	fe 9b ff fd 	brhi	80002476 <usb_read_ep_rxpacket+0x18a>
//! FIFO beginning whether or not the FIFO is to be read in several steps.
//!
//! @warning Do not mix calls to this function with calls to indexed macros.
//!
U32 usb_read_ep_rxpacket(U8 ep, void *rxbuf, U32 data_length, void **prxbuf)
{
80002480:	e6 08 11 01 	rsub	r8,r3,1
80002484:	ea 08 00 08 	add	r8,r5,r8
80002488:	10 0e       	add	lr,r8
8000248a:	ee 08 00 0c 	add	r12,r7,r8
    // 8-bit accesses to FIFO data registers do require pointer post-increment
    *rxbuf_cur.u8ptr++ = *ep_fifo.u8ptr++;
  }

  // Save current position in FIFO data register
  pep_fifo[ep].u8ptr = (volatile U8 *)ep_fifo.u8ptr;
8000248e:	49 58       	lddpc	r8,800024e0 <usb_read_ep_rxpacket+0x1f4>
80002490:	f0 00 09 2e 	st.w	r8[r0<<0x2],lr

  // Return the updated buffer address and the number of non-copied bytes
  if (prxbuf) *prxbuf = rxbuf_cur.u8ptr;
80002494:	40 08       	lddsp	r8,sp[0x0]
80002496:	58 08       	cp.w	r8,0
80002498:	c0 20       	breq	8000249c <usb_read_ep_rxpacket+0x1b0>
8000249a:	91 0c       	st.w	r8[0x0],r12
8000249c:	e4 0c 01 0c 	sub	r12,r2,r12
  return data_length - (rxbuf_cur.u8ptr - (U8 *)rxbuf);
}
800024a0:	40 18       	lddsp	r8,sp[0x4]
800024a2:	10 0c       	add	r12,r8
800024a4:	2f ed       	sub	sp,-8
800024a6:	d8 32       	popm	r0-r7,pc

      // If pointer to reception buffer is not 64-bit aligned
      if (!Test_align((U32)rxbuf_cur.u32ptr, sizeof(U64)))
      {
        // Copy 32-bit data to reach 64-bit alignment
        if (rxbuf_cur.u32ptr < rxbuf_end.u32ptr)
800024a8:	0e 3c       	cp.w	r12,r7
800024aa:	fe 98 ff 5b 	brls	80002360 <usb_read_ep_rxpacket+0x74>
        {
          // 32-bit accesses to FIFO data registers do not require pointer post-increment
          *rxbuf_cur.u32ptr++ = *ep_fifo.u32ptr;
800024ae:	7c 08       	ld.w	r8,lr[0x0]
800024b0:	0e a8       	st.w	r7++,r8
800024b2:	c5 7b       	rjmp	80002360 <usb_read_ep_rxpacket+0x74>
  }

#endif  // !__OPTIMIZE_SIZE__

  // Copy remaining 8-bit data if some
  while (rxbuf_cur.u8ptr < rxbuf_end.u8ptr)
800024b4:	1c 9a       	mov	r10,lr
800024b6:	0e 99       	mov	r9,r7
  {
    // 8-bit accesses to FIFO data registers do require pointer post-increment
    *rxbuf_cur.u8ptr++ = *ep_fifo.u8ptr++;
800024b8:	15 38       	ld.ub	r8,r10++
800024ba:	12 c8       	st.b	r9++,r8
  }

#endif  // !__OPTIMIZE_SIZE__

  // Copy remaining 8-bit data if some
  while (rxbuf_cur.u8ptr < rxbuf_end.u8ptr)
800024bc:	12 35       	cp.w	r5,r9
800024be:	fe 9b ff fd 	brhi	800024b8 <usb_read_ep_rxpacket+0x1cc>
800024c2:	cd fb       	rjmp	80002480 <usb_read_ep_rxpacket+0x194>
//! FIFO beginning whether or not the FIFO is to be read in several steps.
//!
//! @warning Do not mix calls to this function with calls to indexed macros.
//!
U32 usb_read_ep_rxpacket(U8 ep, void *rxbuf, U32 data_length, void **prxbuf)
{
800024c4:	1c 9a       	mov	r10,lr
800024c6:	0e 99       	mov	r9,r7

    // Copy remaining 16-bit data if some
    while (rxbuf_cur.u16ptr < rxbuf_end.u16ptr)
    {
      // 16-bit accesses to FIFO data registers do require pointer post-increment
      *rxbuf_cur.u16ptr++ = *ep_fifo.u16ptr++;
800024c8:	15 18       	ld.sh	r8,r10++
800024ca:	12 b8       	st.h	r9++,r8
        *rxbuf_cur.u32ptr++ = *ep_fifo.u32ptr;
      }
    }

    // Copy remaining 16-bit data if some
    while (rxbuf_cur.u16ptr < rxbuf_end.u16ptr)
800024cc:	12 33       	cp.w	r3,r9
800024ce:	fe 9b ff fd 	brhi	800024c8 <usb_read_ep_rxpacket+0x1dc>
800024d2:	c9 ab       	rjmp	80002406 <usb_read_ep_rxpacket+0x11a>
800024d4:	0e 99       	mov	r9,r7
800024d6:	1c 98       	mov	r8,lr
800024d8:	cc eb       	rjmp	80002474 <usb_read_ep_rxpacket+0x188>
800024da:	0e 99       	mov	r9,r7
800024dc:	1c 98       	mov	r8,lr
800024de:	c8 eb       	rjmp	800023fa <usb_read_ep_rxpacket+0x10e>
800024e0:	00 00       	add	r0,r0
800024e2:	06 6c       	and	r12,r3

800024e4 <usb_init_device>:
//!
//! @return Status
//!
Status_bool_t usb_init_device(void)
{
  return Is_usb_id_device() && !Is_usb_endpoint_enabled(EP_CONTROL) &&
800024e4:	fe 69 00 00 	mov	r9,-131072
800024e8:	f2 f8 08 04 	ld.w	r8,r9[2052]
800024ec:	ed b8 00 0a 	bld	r8,0xa
800024f0:	c0 51       	brne	800024fa <usb_init_device+0x16>
800024f2:	72 78       	ld.w	r8,r9[0x1c]
800024f4:	ed b8 00 00 	bld	r8,0x0
800024f8:	c0 21       	brne	800024fc <usb_init_device+0x18>
800024fa:	5e fd       	retal	0
800024fc:	72 78       	ld.w	r8,r9[0x1c]
800024fe:	a1 a8       	sbr	r8,0x0
80002500:	93 78       	st.w	r9[0x1c],r8
         Usb_configure_endpoint(EP_CONTROL,
80002502:	e0 69 04 00 	mov	r9,1024
//!
//! @return Status
//!
Status_bool_t usb_init_device(void)
{
  return Is_usb_id_device() && !Is_usb_endpoint_enabled(EP_CONTROL) &&
80002506:	fe 6c 01 00 	mov	r12,-130816
         Usb_configure_endpoint(EP_CONTROL,
8000250a:	30 8a       	mov	r10,8
//!
//! @return Status
//!
Status_bool_t usb_init_device(void)
{
  return Is_usb_id_device() && !Is_usb_endpoint_enabled(EP_CONTROL) &&
8000250c:	78 0b       	ld.w	r11,r12[0x0]
         Usb_configure_endpoint(EP_CONTROL,
8000250e:	34 08       	mov	r8,64
//!
//! @return Status
//!
Status_bool_t usb_init_device(void)
{
  return Is_usb_id_device() && !Is_usb_endpoint_enabled(EP_CONTROL) &&
80002510:	e0 1b e6 83 	andl	r11,0xe683
         Usb_configure_endpoint(EP_CONTROL,
80002514:	f0 0a 0c 48 	max	r8,r8,r10
80002518:	f0 09 0d 48 	min	r8,r8,r9
//!
//! @return Status
//!
Status_bool_t usb_init_device(void)
{
  return Is_usb_id_device() && !Is_usb_endpoint_enabled(EP_CONTROL) &&
8000251c:	a1 78       	lsl	r8,0x1
8000251e:	20 18       	sub	r8,1
80002520:	f0 08 12 00 	clz	r8,r8
80002524:	f0 08 11 1c 	rsub	r8,r8,28
80002528:	a5 68       	lsl	r8,0x4
8000252a:	e2 18 19 7c 	andl	r8,0x197c,COH
8000252e:	16 48       	or	r8,r11
80002530:	99 08       	st.w	r12[0x0],r8
80002532:	78 09       	ld.w	r9,r12[0x0]
80002534:	a1 b9       	sbr	r9,0x1
80002536:	fe 68 01 30 	mov	r8,-130768
8000253a:	99 09       	st.w	r12[0x0],r9
8000253c:	70 09       	ld.w	r9,r8[0x0]
8000253e:	f9 d9 c2 41 	bfextu	r12,r9,0x12,0x1
80002542:	5e fc       	retal	r12

80002544 <usb_task>:
//!
//! Depending on the USB mode supported (HOST/DEVICE/DUAL_ROLE) the function
//! calls the coresponding USB management function.
#ifndef FREERTOS_USED
void usb_task(void)
{
80002544:	d4 01       	pushm	lr
  }
// -----------------------------------------------------------------------------

// ---- DEVICE-ONLY USB MODE ---------------------------------------------------
  #elif USB_DEVICE_FEATURE == ENABLED
  usb_device_task();
80002546:	c3 dd       	rcall	800027c0 <usb_device_task>
80002548:	d8 02       	popm	pc
// ---- ERROR, NO MODE ENABLED -------------------------------------------------
  #else
    #error At least one of USB_DEVICE_FEATURE and USB_HOST_FEATURE must be enabled
  #endif
// -----------------------------------------------------------------------------
}
8000254a:	d7 03       	nop

8000254c <usb_task_init>:
//! @brief This function initializes the USB process.
//!
//! Depending on the mode supported (HOST/DEVICE/DUAL_ROLE) the function
//! calls the coresponding USB mode initialization function
void usb_task_init(void)
{
8000254c:	d4 01       	pushm	lr
void usb_task(void *pvParameters)
{
#endif  // FREERTOS_USED
  // Register the USB interrupt handler to the interrupt controller and enable
  // the USB interrupt.
  Disable_global_interrupt();
8000254e:	d3 03       	ssrf	0x10
  INTC_register_interrupt((__int_handler)&usb_general_interrupt, AVR32_USBB_IRQ, USB_INT_LEVEL);
80002550:	30 0a       	mov	r10,0
80002552:	e0 6b 02 20 	mov	r11,544
80002556:	fe cc ff da 	sub	r12,pc,-38
8000255a:	e0 a0 13 fb 	rcall	80004d50 <INTC_register_interrupt>
// ---- DEVICE-ONLY USB MODE ---------------------------------------------------
#elif USB_DEVICE_FEATURE == ENABLED
  #ifdef FREERTOS_USED
    if (usb_device_tsk) vTaskDelete(usb_device_tsk), usb_device_tsk = NULL;
  #endif
    Usb_force_device_mode();
8000255e:	d5 03       	csrf	0x10
80002560:	fe 68 00 00 	mov	r8,-131072
80002564:	f0 f9 08 00 	ld.w	r9,r8[2048]
80002568:	b9 b9       	sbr	r9,0x19
8000256a:	f1 49 08 00 	st.w	r8[2048],r9
8000256e:	f0 fa 08 00 	ld.w	r10,r8[2048]
80002572:	b9 ca       	cbr	r10,0x18
80002574:	f1 4a 08 00 	st.w	r8[2048],r10
    usb_device_task_init();
80002578:	c9 ec       	rcall	800026b4 <usb_device_task_init>
#endif
// -----------------------------------------------------------------------------
#ifdef FREERTOS_USED
  }
#endif
}
8000257a:	d8 02       	popm	pc

8000257c <usb_general_interrupt>:
__interrupt
#endif
static void usb_general_interrupt(void)

#endif
{
8000257c:	d4 01       	pushm	lr
  // may corrupt USB FIFO data).
  if (Is_usb_device())
  #endif
  {
    // VBus state detection
    if (Is_usb_vbus_transition() && Is_usb_vbus_interrupt_enabled())
8000257e:	fe 6a 00 00 	mov	r10,-131072
80002582:	f4 f8 08 04 	ld.w	r8,r10[2052]
80002586:	ed b8 00 01 	bld	r8,0x1
8000258a:	c0 61       	brne	80002596 <usb_general_interrupt+0x1a>
8000258c:	f4 f8 08 00 	ld.w	r8,r10[2048]
80002590:	ed b8 00 01 	bld	r8,0x1
80002594:	c5 d0       	breq	8000264e <usb_general_interrupt+0xd2>
        taskEXIT_CRITICAL();
  #endif
      }
    }
    // Device Start-of-Frame received
    if (Is_usb_sof() && Is_usb_sof_interrupt_enabled())
80002596:	fe 69 00 00 	mov	r9,-131072
8000259a:	72 18       	ld.w	r8,r9[0x4]
8000259c:	ed b8 00 02 	bld	r8,0x2
800025a0:	c0 51       	brne	800025aa <usb_general_interrupt+0x2e>
800025a2:	72 48       	ld.w	r8,r9[0x10]
800025a4:	ed b8 00 02 	bld	r8,0x2
800025a8:	c7 50       	breq	80002692 <usb_general_interrupt+0x116>
    {
      Usb_ack_sof();
      Usb_sof_action();
    }
    // Device Suspend event (no more USB activity detected)
    if (Is_usb_suspend() && Is_usb_suspend_interrupt_enabled())
800025aa:	fe 6a 00 00 	mov	r10,-131072
800025ae:	74 18       	ld.w	r8,r10[0x4]
800025b0:	ed b8 00 00 	bld	r8,0x0
800025b4:	c0 51       	brne	800025be <usb_general_interrupt+0x42>
800025b6:	74 48       	ld.w	r8,r10[0x10]
800025b8:	ed b8 00 00 	bld	r8,0x0
800025bc:	c3 a0       	breq	80002630 <usb_general_interrupt+0xb4>
      Usb_freeze_clock();
      Usb_send_event(EVT_USB_SUSPEND);
      Usb_suspend_action();
    }
    // Wake-up event (USB activity detected): Used to resume
    if (Is_usb_wake_up() && Is_usb_wake_up_interrupt_enabled())
800025be:	fe 69 00 00 	mov	r9,-131072
800025c2:	72 18       	ld.w	r8,r9[0x4]
800025c4:	ed b8 00 04 	bld	r8,0x4
800025c8:	c0 51       	brne	800025d2 <usb_general_interrupt+0x56>
800025ca:	72 48       	ld.w	r8,r9[0x10]
800025cc:	ed b8 00 04 	bld	r8,0x4
800025d0:	c2 10       	breq	80002612 <usb_general_interrupt+0x96>
      Usb_disable_wake_up_interrupt();
      Usb_wake_up_action();
      Usb_send_event(EVT_USB_WAKE_UP);
    }
    // Resume state bus detection
    if (Is_usb_resume() && Is_usb_resume_interrupt_enabled())
800025d2:	fe 6a 00 00 	mov	r10,-131072
800025d6:	74 18       	ld.w	r8,r10[0x4]
800025d8:	ed b8 00 05 	bld	r8,0x5
800025dc:	c0 51       	brne	800025e6 <usb_general_interrupt+0x6a>
800025de:	74 48       	ld.w	r8,r10[0x10]
800025e0:	ed b8 00 05 	bld	r8,0x5
800025e4:	c0 d0       	breq	800025fe <usb_general_interrupt+0x82>
      Usb_disable_resume_interrupt();
      Usb_resume_action();
      Usb_send_event(EVT_USB_RESUME);
    }
    // USB bus reset detection
    if (Is_usb_reset() && Is_usb_reset_interrupt_enabled())
800025e6:	fe 69 00 00 	mov	r9,-131072
800025ea:	72 18       	ld.w	r8,r9[0x4]
800025ec:	ed b8 00 03 	bld	r8,0x3
800025f0:	c0 51       	brne	800025fa <usb_general_interrupt+0x7e>
800025f2:	72 48       	ld.w	r8,r9[0x10]
800025f4:	ed b8 00 03 	bld	r8,0x3
800025f8:	c4 40       	breq	80002680 <usb_general_interrupt+0x104>
#endif  // End HOST FEATURE MODE

#ifdef FREERTOS_USED
  return task_woken;
#endif
}
800025fa:	d4 02       	popm	lr
800025fc:	d6 03       	rete
      Usb_send_event(EVT_USB_WAKE_UP);
    }
    // Resume state bus detection
    if (Is_usb_resume() && Is_usb_resume_interrupt_enabled())
    {
      Usb_disable_wake_up_interrupt();
800025fe:	31 08       	mov	r8,16
80002600:	95 58       	st.w	r10[0x14],r8
      Usb_ack_resume();
80002602:	32 09       	mov	r9,32
80002604:	95 29       	st.w	r10[0x8],r9
      Usb_disable_resume_interrupt();
80002606:	95 59       	st.w	r10[0x14],r9
      Usb_resume_action();
      Usb_send_event(EVT_USB_RESUME);
80002608:	4a 8a       	lddpc	r10,800026a8 <usb_general_interrupt+0x12c>
8000260a:	94 08       	ld.sh	r8,r10[0x0]
8000260c:	a7 b8       	sbr	r8,0x7
8000260e:	b4 08       	st.h	r10[0x0],r8
80002610:	ce bb       	rjmp	800025e6 <usb_general_interrupt+0x6a>
      Usb_suspend_action();
    }
    // Wake-up event (USB activity detected): Used to resume
    if (Is_usb_wake_up() && Is_usb_wake_up_interrupt_enabled())
    {
      Usb_unfreeze_clock();
80002612:	f2 f8 08 00 	ld.w	r8,r9[2048]
80002616:	af c8       	cbr	r8,0xe
80002618:	f3 48 08 00 	st.w	r9[2048],r8
      (void)Is_usb_clock_frozen();
8000261c:	f2 f8 08 00 	ld.w	r8,r9[2048]
      Usb_ack_wake_up();
80002620:	31 08       	mov	r8,16
80002622:	93 28       	st.w	r9[0x8],r8
      Usb_disable_wake_up_interrupt();
80002624:	93 58       	st.w	r9[0x14],r8
      Usb_wake_up_action();
      Usb_send_event(EVT_USB_WAKE_UP);
80002626:	4a 19       	lddpc	r9,800026a8 <usb_general_interrupt+0x12c>
80002628:	92 08       	ld.sh	r8,r9[0x0]
8000262a:	a7 a8       	sbr	r8,0x6
8000262c:	b2 08       	st.h	r9[0x0],r8
8000262e:	cd 2b       	rjmp	800025d2 <usb_general_interrupt+0x56>
      Usb_sof_action();
    }
    // Device Suspend event (no more USB activity detected)
    if (Is_usb_suspend() && Is_usb_suspend_interrupt_enabled())
    {
      Usb_ack_suspend();
80002630:	30 18       	mov	r8,1
80002632:	95 28       	st.w	r10[0x8],r8
      Usb_enable_wake_up_interrupt();
80002634:	31 09       	mov	r9,16
80002636:	95 69       	st.w	r10[0x18],r9
      (void)Is_usb_wake_up_interrupt_enabled();
80002638:	74 48       	ld.w	r8,r10[0x10]
      Usb_freeze_clock();
8000263a:	f4 f8 08 00 	ld.w	r8,r10[2048]
8000263e:	af a8       	sbr	r8,0xe
80002640:	f5 48 08 00 	st.w	r10[2048],r8
      Usb_send_event(EVT_USB_SUSPEND);
80002644:	49 99       	lddpc	r9,800026a8 <usb_general_interrupt+0x12c>
80002646:	92 08       	ld.sh	r8,r9[0x0]
80002648:	a5 b8       	sbr	r8,0x5
8000264a:	b2 08       	st.h	r9[0x0],r8
8000264c:	cb 9b       	rjmp	800025be <usb_general_interrupt+0x42>
  #endif
  {
    // VBus state detection
    if (Is_usb_vbus_transition() && Is_usb_vbus_interrupt_enabled())
    {
      Usb_ack_vbus_transition();
8000264e:	30 28       	mov	r8,2
80002650:	f5 48 08 08 	st.w	r10[2056],r8
      if (Is_usb_vbus_high())
80002654:	f4 fb 08 04 	ld.w	r11,r10[2052]
80002658:	e2 1b 08 00 	andl	r11,0x800,COH
8000265c:	c2 01       	brne	8000269c <usb_general_interrupt+0x120>
        Usb_send_event(EVT_USB_POWERED);
        Usb_vbus_on_action();
      }
      else
      {
        Usb_unfreeze_clock();
8000265e:	f4 f8 08 00 	ld.w	r8,r10[2048]
80002662:	af c8       	cbr	r8,0xe
80002664:	f5 48 08 00 	st.w	r10[2048],r8
        Usb_detach();
80002668:	74 09       	ld.w	r9,r10[0x0]
8000266a:	a9 a9       	sbr	r9,0x8
8000266c:	95 09       	st.w	r10[0x0],r9
        usb_connected = FALSE;
8000266e:	49 08       	lddpc	r8,800026ac <usb_general_interrupt+0x130>
80002670:	b0 8b       	st.b	r8[0x0],r11
        usb_configuration_nb = 0;
80002672:	49 09       	lddpc	r9,800026b0 <usb_general_interrupt+0x134>
80002674:	b2 8b       	st.b	r9[0x0],r11
        Usb_send_event(EVT_USB_UNPOWERED);
80002676:	48 da       	lddpc	r10,800026a8 <usb_general_interrupt+0x12c>
80002678:	94 08       	ld.sh	r8,r10[0x0]
8000267a:	a3 a8       	sbr	r8,0x2
8000267c:	b4 08       	st.h	r10[0x0],r8
8000267e:	c8 cb       	rjmp	80002596 <usb_general_interrupt+0x1a>
      Usb_send_event(EVT_USB_RESUME);
    }
    // USB bus reset detection
    if (Is_usb_reset() && Is_usb_reset_interrupt_enabled())
    {
      Usb_ack_reset();
80002680:	30 88       	mov	r8,8
80002682:	93 28       	st.w	r9[0x8],r8
      usb_init_device();
80002684:	c3 0f       	rcall	800024e4 <usb_init_device>
80002686:	48 99       	lddpc	r9,800026a8 <usb_general_interrupt+0x12c>
      Usb_reset_action();
      Usb_send_event(EVT_USB_RESET);
80002688:	92 08       	ld.sh	r8,r9[0x0]
8000268a:	a9 a8       	sbr	r8,0x8
8000268c:	b2 08       	st.h	r9[0x0],r8
8000268e:	d4 02       	popm	lr
#endif  // End HOST FEATURE MODE

#ifdef FREERTOS_USED
  return task_woken;
#endif
}
80002690:	d6 03       	rete
80002692:	30 48       	mov	r8,4
      }
    }
    // Device Start-of-Frame received
    if (Is_usb_sof() && Is_usb_sof_interrupt_enabled())
    {
      Usb_ack_sof();
80002694:	93 28       	st.w	r9[0x8],r8
80002696:	e0 a0 08 47 	rcall	80003724 <usb_sof_action>
      Usb_sof_action();
8000269a:	c8 8b       	rjmp	800025aa <usb_general_interrupt+0x2e>
8000269c:	c8 0c       	rcall	8000279c <usb_start_device>
    if (Is_usb_vbus_transition() && Is_usb_vbus_interrupt_enabled())
    {
      Usb_ack_vbus_transition();
      if (Is_usb_vbus_high())
      {
        usb_start_device();
8000269e:	48 39       	lddpc	r9,800026a8 <usb_general_interrupt+0x12c>
800026a0:	92 08       	ld.sh	r8,r9[0x0]
        Usb_send_event(EVT_USB_POWERED);
800026a2:	a1 b8       	sbr	r8,0x1
800026a4:	b2 08       	st.h	r9[0x0],r8
800026a6:	c7 8b       	rjmp	80002596 <usb_general_interrupt+0x1a>
800026a8:	00 00       	add	r0,r0
800026aa:	05 38       	ld.ub	r8,r2++
800026ac:	00 00       	add	r0,r0
800026ae:	06 88       	andn	r8,r3
800026b0:	00 00       	add	r0,r0
800026b2:	06 90       	mov	r0,r3

800026b4 <usb_device_task_init>:
//! This function enables the USB controller and inits the USB interrupts.
//! The aim is to allow the USB connection detection in order to send
//! the appropriate USB event to the operating mode manager.
//!
void usb_device_task_init(void)
{
800026b4:	eb cd 40 80 	pushm	r7,lr
  U8 i;

  usb_connected = FALSE;
800026b8:	30 08       	mov	r8,0
800026ba:	4b 59       	lddpc	r9,8000278c <usb_device_task_init+0xd8>
800026bc:	b2 88       	st.b	r9[0x0],r8
800026be:	4b 5e       	lddpc	lr,80002790 <usb_device_task_init+0xdc>
800026c0:	fc 08 11 00 	rsub	r8,lr,0
800026c4:	f9 d8 c0 02 	bfextu	r12,r8,0x0,0x2
800026c8:	c5 e0       	breq	80002784 <usb_device_task_init+0xd0>
800026ca:	30 0a       	mov	r10,0
  for (i = 0; i < NB_ENDPOINTS; i++) endpoint_status[i] = DISABLED;
800026cc:	14 9b       	mov	r11,r10
800026ce:	fc 0a 0b 0b 	st.b	lr[r10],r11
800026d2:	f4 c8 ff ff 	sub	r8,r10,-1
800026d6:	f5 d8 c0 08 	bfextu	r10,r8,0x0,0x8
800026da:	f4 09 11 04 	rsub	r9,r10,4
800026de:	5c 59       	castu.b	r9
800026e0:	f4 0c 18 00 	cp.b	r12,r10
800026e4:	fe 9b ff f5 	brhi	800026ce <usb_device_task_init+0x1a>
800026e8:	f8 08 11 04 	rsub	r8,r12,4
800026ec:	ef d8 c0 08 	bfextu	r7,r8,0x0,0x8
800026f0:	0e 9b       	mov	r11,r7
800026f2:	e2 1b 00 fc 	andl	r11,0xfc,COH
800026f6:	c0 d0       	breq	80002710 <usb_device_task_init+0x5c>
800026f8:	4a 88       	lddpc	r8,80002798 <usb_device_task_init+0xe4>
800026fa:	fc 0c 09 08 	st.w	lr[r12],r8
800026fe:	16 19       	sub	r9,r11
80002700:	f4 0b 00 08 	add	r8,r10,r11
80002704:	5c 59       	castu.b	r9
80002706:	f5 d8 c0 08 	bfextu	r10,r8,0x0,0x8
8000270a:	f6 07 18 00 	cp.b	r7,r11
8000270e:	c0 b0       	breq	80002724 <usb_device_task_init+0x70>
80002710:	30 0b       	mov	r11,0
80002712:	fc 0a 0b 0b 	st.b	lr[r10],r11
80002716:	f4 c8 ff ff 	sub	r8,r10,-1
8000271a:	20 19       	sub	r9,1
8000271c:	f5 d8 c0 08 	bfextu	r10,r8,0x0,0x8
80002720:	5c 59       	castu.b	r9
80002722:	cf 81       	brne	80002712 <usb_device_task_init+0x5e>
  usb_configuration_nb = 0;
80002724:	30 09       	mov	r9,0
80002726:	49 c8       	lddpc	r8,80002794 <usb_device_task_init+0xe0>
80002728:	b0 89       	st.b	r8[0x0],r9
  //! @todo Implement this on the silicon version
  //Pll_start_auto();
  //Wait_pll_ready();
  Disable_global_interrupt();
8000272a:	d3 03       	ssrf	0x10
  Usb_disable();
8000272c:	fe 69 00 00 	mov	r9,-131072
80002730:	f2 f8 08 00 	ld.w	r8,r9[2048]
80002734:	af d8       	cbr	r8,0xf
80002736:	f3 48 08 00 	st.w	r9[2048],r8
  (void)Is_usb_enabled();
8000273a:	f2 f8 08 00 	ld.w	r8,r9[2048]
  Enable_global_interrupt();
8000273e:	d5 03       	csrf	0x10
  Usb_disable_otg_pad();
80002740:	fe 6a 00 00 	mov	r10,-131072
80002744:	f4 f8 08 00 	ld.w	r8,r10[2048]
80002748:	ad c8       	cbr	r8,0xc
8000274a:	f5 48 08 00 	st.w	r10[2048],r8
  Usb_enable_otg_pad();
8000274e:	f4 f9 08 00 	ld.w	r9,r10[2048]
80002752:	ad a9       	sbr	r9,0xc
80002754:	f5 49 08 00 	st.w	r10[2048],r9
  Usb_enable();
80002758:	f4 f8 08 00 	ld.w	r8,r10[2048]
8000275c:	af b8       	sbr	r8,0xf
8000275e:	f5 48 08 00 	st.w	r10[2048],r8
  Usb_unfreeze_clock();
80002762:	f4 f9 08 00 	ld.w	r9,r10[2048]
80002766:	af c9       	cbr	r9,0xe
80002768:	f5 49 08 00 	st.w	r10[2048],r9
  (void)Is_usb_clock_frozen();
  Usb_ack_suspend();  // A suspend condition may be detected right after enabling the USB macro
8000276c:	30 19       	mov	r9,1
  Enable_global_interrupt();
  Usb_disable_otg_pad();
  Usb_enable_otg_pad();
  Usb_enable();
  Usb_unfreeze_clock();
  (void)Is_usb_clock_frozen();
8000276e:	f4 f8 08 00 	ld.w	r8,r10[2048]
  Usb_ack_suspend();  // A suspend condition may be detected right after enabling the USB macro
80002772:	95 29       	st.w	r10[0x8],r9
  Usb_enable_vbus_interrupt();
80002774:	f4 f8 08 00 	ld.w	r8,r10[2048]
80002778:	a1 b8       	sbr	r8,0x1
8000277a:	f5 48 08 00 	st.w	r10[2048],r8
  Enable_global_interrupt();
8000277e:	d5 03       	csrf	0x10
              configTSK_USB_DEV_STACK_SIZE,
              NULL,
              configTSK_USB_DEV_PRIORITY,
              &usb_device_tsk);
#endif  // FREERTOS_USED
}
80002780:	e3 cd 80 80 	ldm	sp++,r7,pc
80002784:	18 9a       	mov	r10,r12
80002786:	30 49       	mov	r9,4
80002788:	cb 0b       	rjmp	800026e8 <usb_device_task_init+0x34>
8000278a:	d7 03       	nop
8000278c:	00 00       	add	r0,r0
8000278e:	06 88       	andn	r8,r3
80002790:	00 00       	add	r0,r0
80002792:	06 8c       	andn	r12,r3
80002794:	00 00       	add	r0,r0
80002796:	06 90       	mov	r0,r3
80002798:	00 00       	add	r0,r0
	...

8000279c <usb_start_device>:
//! the appropriate USB event to the operating mode manager.
//! Start device function is executed once VBus connection has been detected
//! either by the VBus change interrupt or by the VBus high level.
//!
void usb_start_device(void)
{
8000279c:	eb cd 40 60 	pushm	r5-r6,lr
  Usb_enable_suspend_interrupt();
800027a0:	fe 66 00 00 	mov	r6,-131072
  Usb_enable_reset_interrupt();
800027a4:	30 88       	mov	r8,8
//! Start device function is executed once VBus connection has been detected
//! either by the VBus change interrupt or by the VBus high level.
//!
void usb_start_device(void)
{
  Usb_enable_suspend_interrupt();
800027a6:	30 15       	mov	r5,1
800027a8:	8d 65       	st.w	r6[0x18],r5
  Usb_enable_reset_interrupt();
800027aa:	8d 68       	st.w	r6[0x18],r8
  usb_init_device();  // Configure the USB controller EP0
800027ac:	c9 ce       	rcall	800024e4 <usb_init_device>
800027ae:	6c 08       	ld.w	r8,r6[0x0]
  Usb_attach();
800027b0:	a9 c8       	cbr	r8,0x8
800027b2:	8d 08       	st.w	r6[0x0],r8
800027b4:	48 29       	lddpc	r9,800027bc <usb_start_device+0x20>
  usb_connected = TRUE;
800027b6:	b2 85       	st.b	r9[0x0],r5
800027b8:	e3 cd 80 60 	ldm	sp++,r5-r6,pc
}
800027bc:	00 00       	add	r0,r0
800027be:	06 88       	andn	r8,r3

800027c0 <usb_device_task>:
#ifdef FREERTOS_USED
void usb_device_task(void *pvParameters)
#else
void usb_device_task(void)
#endif
{
800027c0:	eb cd 40 e0 	pushm	r5-r7,lr
  while (TRUE)
  {
    vTaskDelayUntil(&xLastWakeTime, configTSK_USB_DEV_PERIOD);

#endif  // FREERTOS_USED
    if (!usb_connected && Is_usb_vbus_high())
800027c4:	49 b5       	lddpc	r5,80002830 <usb_device_task+0x70>
800027c6:	0b 88       	ld.ub	r8,r5[0x0]
800027c8:	58 08       	cp.w	r8,0
800027ca:	c0 81       	brne	800027da <usb_device_task+0x1a>
800027cc:	fe 67 00 00 	mov	r7,-131072
800027d0:	ee f8 08 04 	ld.w	r8,r7[2052]
800027d4:	ed b8 00 0b 	bld	r8,0xb
800027d8:	c1 e0       	breq	80002814 <usb_device_task+0x54>
800027da:	49 79       	lddpc	r9,80002834 <usb_device_task+0x74>
      usb_start_device();
      Usb_send_event(EVT_USB_POWERED);
      Usb_vbus_on_action();
    }

    if (Is_usb_event(EVT_USB_RESET))
800027dc:	92 08       	ld.sh	r8,r9[0x0]
800027de:	49 69       	lddpc	r9,80002834 <usb_device_task+0x74>
800027e0:	e2 18 01 00 	andl	r8,0x100,COH
800027e4:	c0 f0       	breq	80002802 <usb_device_task+0x42>
    {
      Usb_ack_event(EVT_USB_RESET);
800027e6:	92 08       	ld.sh	r8,r9[0x0]
800027e8:	a9 c8       	cbr	r8,0x8
800027ea:	b2 08       	st.h	r9[0x0],r8
      Usb_reset_endpoint(EP_CONTROL);
800027ec:	fe 6a 00 00 	mov	r10,-131072
800027f0:	74 78       	ld.w	r8,r10[0x1c]
800027f2:	b1 a8       	sbr	r8,0x10
800027f4:	95 78       	st.w	r10[0x1c],r8
800027f6:	74 79       	ld.w	r9,r10[0x1c]
800027f8:	b1 c9       	cbr	r9,0x10
800027fa:	95 79       	st.w	r10[0x1c],r9
      usb_configuration_nb = 0;
800027fc:	30 0b       	mov	r11,0
800027fe:	48 f8       	lddpc	r8,80002838 <usb_device_task+0x78>
80002800:	b0 8b       	st.b	r8[0x0],r11
    }

    // Connection to the device enumeration process
    if (Is_usb_setup_received())
80002802:	fe 69 01 30 	mov	r9,-130768
80002806:	72 08       	ld.w	r8,r9[0x0]
80002808:	ed b8 00 02 	bld	r8,0x2
8000280c:	c0 21       	brne	80002810 <usb_device_task+0x50>
    {
      usb_process_request();
8000280e:	c1 7c       	rcall	8000283c <usb_process_request>
80002810:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
80002814:	30 88       	mov	r8,8
//! either by the VBus change interrupt or by the VBus high level.
//!
void usb_start_device(void)
{
  Usb_enable_suspend_interrupt();
  Usb_enable_reset_interrupt();
80002816:	30 16       	mov	r6,1
//! Start device function is executed once VBus connection has been detected
//! either by the VBus change interrupt or by the VBus high level.
//!
void usb_start_device(void)
{
  Usb_enable_suspend_interrupt();
80002818:	8f 66       	st.w	r7[0x18],r6
8000281a:	8f 68       	st.w	r7[0x18],r8
  Usb_enable_reset_interrupt();
8000281c:	c6 4e       	rcall	800024e4 <usb_init_device>
  usb_init_device();  // Configure the USB controller EP0
8000281e:	6e 08       	ld.w	r8,r7[0x0]
80002820:	a9 c8       	cbr	r8,0x8
  Usb_attach();
80002822:	8f 08       	st.w	r7[0x0],r8
80002824:	aa 86       	st.b	r5[0x0],r6
80002826:	48 49       	lddpc	r9,80002834 <usb_device_task+0x74>
  usb_connected = TRUE;
80002828:	92 08       	ld.sh	r8,r9[0x0]

#endif  // FREERTOS_USED
    if (!usb_connected && Is_usb_vbus_high())
    {
      usb_start_device();
      Usb_send_event(EVT_USB_POWERED);
8000282a:	a1 b8       	sbr	r8,0x1
8000282c:	b2 08       	st.h	r9[0x0],r8
8000282e:	cd 7b       	rjmp	800027dc <usb_device_task+0x1c>
80002830:	00 00       	add	r0,r0
80002832:	06 88       	andn	r8,r3
80002834:	00 00       	add	r0,r0
80002836:	05 38       	ld.ub	r8,r2++
80002838:	00 00       	add	r0,r0
8000283a:	06 90       	mov	r0,r3

8000283c <usb_process_request>:
//! CLEAR_FEATURE
//! SET_FEATURE
//! GET_STATUS
//!
void usb_process_request(void)
{
8000283c:	d4 31       	pushm	r0-r7,lr
  U8 bRequest;

  Usb_reset_endpoint_fifo_access(EP_CONTROL);
8000283e:	fe f7 05 ba 	ld.w	r7,pc[1466]
  bmRequestType = Usb_read_endpoint_data(EP_CONTROL, 8);
80002842:	30 18       	mov	r8,1
80002844:	ea 18 d0 00 	orh	r8,0xd000
80002848:	8f 08       	st.w	r7[0x0],r8
//!
void usb_process_request(void)
{
  U8 bRequest;

  Usb_reset_endpoint_fifo_access(EP_CONTROL);
8000284a:	30 0a       	mov	r10,0
8000284c:	ea 1a d0 00 	orh	r10,0xd000
  bmRequestType = Usb_read_endpoint_data(EP_CONTROL, 8);
80002850:	fe fe 05 ac 	ld.w	lr,pc[1452]
80002854:	15 89       	ld.ub	r9,r10[0x0]
  bRequest      = Usb_read_endpoint_data(EP_CONTROL, 8);
80002856:	11 8b       	ld.ub	r11,r8[0x0]
void usb_process_request(void)
{
  U8 bRequest;

  Usb_reset_endpoint_fifo_access(EP_CONTROL);
  bmRequestType = Usb_read_endpoint_data(EP_CONTROL, 8);
80002858:	bc 89       	st.b	lr[0x0],r9
  bRequest      = Usb_read_endpoint_data(EP_CONTROL, 8);
8000285a:	30 2a       	mov	r10,2
8000285c:	ea 1a d0 00 	orh	r10,0xd000
80002860:	8f 0a       	st.w	r7[0x0],r10
void usb_process_request(void)
{
  U8 bRequest;

  Usb_reset_endpoint_fifo_access(EP_CONTROL);
  bmRequestType = Usb_read_endpoint_data(EP_CONTROL, 8);
80002862:	12 9c       	mov	r12,r9
  bRequest      = Usb_read_endpoint_data(EP_CONTROL, 8);

  switch (bRequest)
80002864:	58 bb       	cp.w	r11,11
80002866:	e0 8b 00 0b 	brhi	8000287c <usb_process_request+0x40>
8000286a:	fe f8 05 96 	ld.w	r8,pc[1430]
8000286e:	f0 0b 03 2f 	ld.w	pc,r8[r11<<0x2]
    if (bmRequestType <= 0x02) usb_clear_feature();
    else goto unsupported_request;
    break;

  case SET_FEATURE:
    if (bmRequestType <= 0x02) usb_set_feature();
80002872:	30 26       	mov	r6,2
80002874:	ec 09 18 00 	cp.b	r9,r6
80002878:	e0 88 01 93 	brls	80002b9e <usb_process_request+0x362>

  case SET_DESCRIPTOR:
  case SYNCH_FRAME:
  default:  //!< unsupported request => call to user read request
unsupported_request:
    if (!usb_user_read_request(bmRequestType, bRequest))
8000287c:	e0 a0 03 32 	rcall	80002ee0 <usb_user_read_request>
80002880:	c0 a1       	brne	80002894 <usb_process_request+0x58>
    {
      Usb_enable_stall_handshake(EP_CONTROL);
80002882:	fe 68 01 f0 	mov	r8,-130576
80002886:	e8 69 00 00 	mov	r9,524288
8000288a:	91 09       	st.w	r8[0x0],r9
      Usb_ack_setup_received_free();
8000288c:	30 4a       	mov	r10,4
8000288e:	fe 68 01 60 	mov	r8,-130720
80002892:	91 0a       	st.w	r8[0x0],r10
80002894:	d8 32       	popm	r0-r7,pc
    if (bmRequestType == 0x81) usb_get_interface();
    else goto unsupported_request;
    break;

  case SET_INTERFACE:
    if (bmRequestType == 0x01) usb_set_interface();
80002896:	30 18       	mov	r8,1
80002898:	f0 09 18 00 	cp.b	r9,r8
8000289c:	cf 01       	brne	8000287c <usb_process_request+0x40>

//! This function manages the SET INTERFACE request.
//!
void usb_set_interface(void)
{
  Usb_ack_setup_received_free();
8000289e:	fe 68 01 60 	mov	r8,-130720
800028a2:	30 49       	mov	r9,4
800028a4:	91 09       	st.w	r8[0x0],r9
  Usb_ack_control_in_ready_send();  //!< send a ZLP for STATUS phase
800028a6:	30 1a       	mov	r10,1
  while (!Is_usb_control_in_ready());
800028a8:	fe 69 01 30 	mov	r9,-130768
//! This function manages the SET INTERFACE request.
//!
void usb_set_interface(void)
{
  Usb_ack_setup_received_free();
  Usb_ack_control_in_ready_send();  //!< send a ZLP for STATUS phase
800028ac:	91 0a       	st.w	r8[0x0],r10
  while (!Is_usb_control_in_ready());
800028ae:	72 08       	ld.w	r8,r9[0x0]
800028b0:	ed b8 00 00 	bld	r8,0x0
800028b4:	cf d1       	brne	800028ae <usb_process_request+0x72>
800028b6:	d8 32       	popm	r0-r7,pc
    if (bmRequestType <= 0x02) usb_set_feature();
    else goto unsupported_request;
    break;

  case GET_STATUS:
    if (0x7F < bmRequestType && bmRequestType <= 0x82) usb_get_status();
800028b8:	f2 c9 00 80 	sub	r9,r9,128
800028bc:	30 28       	mov	r8,2
800028be:	f0 09 18 00 	cp.b	r9,r8
800028c2:	fe 9b ff dd 	brhi	8000287c <usb_process_request+0x40>
//!
void usb_get_status(void)
{
  U8 wIndex;

  switch (bmRequestType)
800028c6:	38 18       	mov	r8,-127
800028c8:	f0 0c 18 00 	cp.b	r12,r8
800028cc:	e0 80 01 a9 	breq	80002c1e <usb_process_request+0x3e2>
800028d0:	38 28       	mov	r8,-126
800028d2:	f0 0c 18 00 	cp.b	r12,r8
800028d6:	e0 80 01 be 	breq	80002c52 <usb_process_request+0x416>
800028da:	38 08       	mov	r8,-128
800028dc:	f0 0c 18 00 	cp.b	r12,r8
800028e0:	e0 81 01 1c 	brne	80002b18 <usb_process_request+0x2dc>
  {
  case REQUEST_DEVICE_STATUS:
    Usb_ack_setup_received_free();
800028e4:	30 49       	mov	r9,4
800028e6:	fe 68 01 60 	mov	r8,-130720
    Usb_reset_endpoint_fifo_access(EP_CONTROL);
    Usb_write_endpoint_data(EP_CONTROL, 8, DEVICE_STATUS);
800028ea:	30 1a       	mov	r10,1
  U8 wIndex;

  switch (bmRequestType)
  {
  case REQUEST_DEVICE_STATUS:
    Usb_ack_setup_received_free();
800028ec:	91 09       	st.w	r8[0x0],r9
    break;

  case REQUEST_INTERFACE_STATUS:
    Usb_ack_setup_received_free();
    Usb_reset_endpoint_fifo_access(EP_CONTROL);
    Usb_write_endpoint_data(EP_CONTROL, 8, INTERFACE_STATUS);
800028ee:	30 08       	mov	r8,0
800028f0:	ea 18 d0 00 	orh	r8,0xd000
800028f4:	b0 8a       	st.b	r8[0x0],r10
800028f6:	30 19       	mov	r9,1
800028f8:	ea 19 d0 00 	orh	r9,0xd000
800028fc:	8f 09       	st.w	r7[0x0],r9
800028fe:	12 98       	mov	r8,r9
    Usb_enable_stall_handshake(EP_CONTROL);
    Usb_ack_setup_received_free();
    return;
  }

  Usb_write_endpoint_data(EP_CONTROL, 8, 0x00);
80002900:	30 09       	mov	r9,0
80002902:	10 c9       	st.b	r8++,r9
  Usb_ack_control_in_ready_send();
80002904:	30 19       	mov	r9,1
    Usb_enable_stall_handshake(EP_CONTROL);
    Usb_ack_setup_received_free();
    return;
  }

  Usb_write_endpoint_data(EP_CONTROL, 8, 0x00);
80002906:	8f 08       	st.w	r7[0x0],r8
  Usb_ack_control_in_ready_send();
80002908:	fe 68 01 60 	mov	r8,-130720
8000290c:	91 09       	st.w	r8[0x0],r9

  while (!Is_usb_control_out_received());
8000290e:	fe 69 01 30 	mov	r9,-130768
80002912:	72 08       	ld.w	r8,r9[0x0]
80002914:	ed b8 00 01 	bld	r8,0x1
80002918:	cf d1       	brne	80002912 <usb_process_request+0xd6>
{
  Usb_ack_setup_received_free();
  Usb_ack_control_in_ready_send();  //!< send a ZLP for STATUS phase

  while (!Is_usb_control_out_received());
  Usb_ack_control_out_received_free();
8000291a:	30 29       	mov	r9,2
8000291c:	fe 68 01 60 	mov	r8,-130720
80002920:	91 09       	st.w	r8[0x0],r9
80002922:	d8 32       	popm	r0-r7,pc
    if (bmRequestType == 0x00) usb_set_configuration();
    else goto unsupported_request;
    break;

  case CLEAR_FEATURE:
    if (bmRequestType <= 0x02) usb_clear_feature();
80002924:	30 28       	mov	r8,2
80002926:	f0 09 18 00 	cp.b	r9,r8
8000292a:	fe 9b ff a9 	brhi	8000287c <usb_process_request+0x40>
void usb_clear_feature(void)
{
  U8 wValue;
  U8 wIndex;

  if (bmRequestType == DEVICE_TYPE || bmRequestType == INTERFACE_TYPE)
8000292e:	e0 81 00 f5 	brne	80002b18 <usb_process_request+0x2dc>
    Usb_enable_stall_handshake(EP_CONTROL);
    Usb_ack_setup_received_free();
  }
  else if (bmRequestType == ENDPOINT_TYPE)
  {
    wValue = Usb_read_endpoint_data(EP_CONTROL, 8);
80002932:	30 3b       	mov	r11,3
80002934:	ea 1b d0 00 	orh	r11,0xd000
80002938:	8f 0b       	st.w	r7[0x0],r11
8000293a:	fe fc 04 be 	ld.w	r12,pc[1214]
8000293e:	15 88       	ld.ub	r8,r10[0x0]

    if (wValue == FEATURE_ENDPOINT_HALT)
80002940:	58 08       	cp.w	r8,0
80002942:	e0 81 00 eb 	brne	80002b18 <usb_process_request+0x2dc>
    {
      Usb_read_endpoint_data(EP_CONTROL, 8);  //!< dummy read (MSB of wValue)
80002946:	30 49       	mov	r9,4
80002948:	ea 19 d0 00 	orh	r9,0xd000
8000294c:	99 09       	st.w	r12[0x0],r9
8000294e:	17 88       	ld.ub	r8,r11[0x0]
      wIndex = Usb_read_endpoint_data(EP_CONTROL, 8);
80002950:	30 58       	mov	r8,5
80002952:	ea 18 d0 00 	orh	r8,0xd000
80002956:	13 8a       	ld.ub	r10,r9[0x0]
80002958:	99 08       	st.w	r12[0x0],r8
      wIndex = Get_desc_ep_nbr(wIndex);

      if (Is_usb_endpoint_enabled(wIndex))
8000295a:	fe 6c 00 00 	mov	r12,-131072
8000295e:	78 79       	ld.w	r9,r12[0x1c]

    if (wValue == FEATURE_ENDPOINT_HALT)
    {
      Usb_read_endpoint_data(EP_CONTROL, 8);  //!< dummy read (MSB of wValue)
      wIndex = Usb_read_endpoint_data(EP_CONTROL, 8);
      wIndex = Get_desc_ep_nbr(wIndex);
80002960:	f7 da c0 04 	bfextu	r11,r10,0x0,0x4

      if (Is_usb_endpoint_enabled(wIndex))
80002964:	30 18       	mov	r8,1
80002966:	f0 0b 09 48 	lsl	r8,r8,r11
8000296a:	12 68       	and	r8,r9
8000296c:	e0 80 00 d6 	breq	80002b18 <usb_process_request+0x2dc>
      {
        if (wIndex != EP_CONTROL)
80002970:	58 0b       	cp.w	r11,0
80002972:	c1 80       	breq	800029a2 <usb_process_request+0x166>
        {
          Usb_disable_stall_handshake(wIndex);
80002974:	e8 68 00 00 	mov	r8,524288
80002978:	f6 0a 15 02 	lsl	r10,r11,0x2
8000297c:	e0 3a fd e0 	sub	r10,130528
80002980:	95 08       	st.w	r10[0x0],r8
          Usb_reset_endpoint(wIndex);
80002982:	e0 79 00 00 	mov	r9,65536
80002986:	78 78       	ld.w	r8,r12[0x1c]
80002988:	f2 0b 09 49 	lsl	r9,r9,r11
8000298c:	f3 e8 10 08 	or	r8,r9,r8
80002990:	99 78       	st.w	r12[0x1c],r8
80002992:	5c d9       	com	r9
80002994:	78 78       	ld.w	r8,r12[0x1c]
80002996:	10 69       	and	r9,r8
80002998:	99 79       	st.w	r12[0x1c],r9
          Usb_reset_data_toggle(wIndex);
8000299a:	23 0a       	sub	r10,48
8000299c:	e4 68 00 00 	mov	r8,262144
800029a0:	95 08       	st.w	r10[0x0],r8
        }
        endpoint_status[wIndex] = 0;  // Halt feature flag
800029a2:	30 09       	mov	r9,0
800029a4:	fe f8 04 60 	ld.w	r8,pc[1120]
800029a8:	f0 0b 0b 09 	st.b	r8[r11],r9
        Usb_ack_setup_received_free();
800029ac:	fe 6a 01 60 	mov	r10,-130720
800029b0:	30 48       	mov	r8,4
800029b2:	95 08       	st.w	r10[0x0],r8
        Usb_ack_control_in_ready_send();
800029b4:	30 19       	mov	r9,1
800029b6:	95 09       	st.w	r10[0x0],r9
800029b8:	d8 32       	popm	r0-r7,pc
    if (bmRequestType == 0x80) usb_get_configuration();
    else goto unsupported_request;
    break;

  case SET_ADDRESS:
    if (bmRequestType == 0x00) usb_set_address();
800029ba:	58 09       	cp.w	r9,0
800029bc:	fe 91 ff 60 	brne	8000287c <usb_process_request+0x40>
//! This function manages the SET ADDRESS request. When complete, the device
//! will filter the requests using the new address.
//!
void usb_set_address(void)
{
  U8 addr = Usb_read_endpoint_data(EP_CONTROL, 8);
800029c0:	15 89       	ld.ub	r9,r10[0x0]
  Usb_configure_address(addr);
800029c2:	fe 6a 00 00 	mov	r10,-131072
800029c6:	f3 d9 c0 07 	bfextu	r9,r9,0x0,0x7
800029ca:	74 08       	ld.w	r8,r10[0x0]
800029cc:	e0 18 ff 80 	andl	r8,0xff80
800029d0:	10 49       	or	r9,r8
800029d2:	95 09       	st.w	r10[0x0],r9

  Usb_ack_setup_received_free();
800029d4:	fe 6b 01 60 	mov	r11,-130720
800029d8:	30 48       	mov	r8,4
800029da:	97 08       	st.w	r11[0x0],r8
//! This function manages the SET ADDRESS request. When complete, the device
//! will filter the requests using the new address.
//!
void usb_set_address(void)
{
  U8 addr = Usb_read_endpoint_data(EP_CONTROL, 8);
800029dc:	30 39       	mov	r9,3
800029de:	ea 19 d0 00 	orh	r9,0xd000
800029e2:	8f 09       	st.w	r7[0x0],r9
  Usb_configure_address(addr);

  Usb_ack_setup_received_free();

  Usb_ack_control_in_ready_send();    //!< send a ZLP for STATUS phase
800029e4:	30 18       	mov	r8,1
  while (!Is_usb_control_in_ready()); //!< waits for status phase done
800029e6:	fe 69 01 30 	mov	r9,-130768
  U8 addr = Usb_read_endpoint_data(EP_CONTROL, 8);
  Usb_configure_address(addr);

  Usb_ack_setup_received_free();

  Usb_ack_control_in_ready_send();    //!< send a ZLP for STATUS phase
800029ea:	97 08       	st.w	r11[0x0],r8
  while (!Is_usb_control_in_ready()); //!< waits for status phase done
800029ec:	72 08       	ld.w	r8,r9[0x0]
800029ee:	ed b8 00 00 	bld	r8,0x0
800029f2:	cf d1       	brne	800029ec <usb_process_request+0x1b0>
                                      //!< before using the new address
  Usb_enable_address();
800029f4:	fe 69 00 00 	mov	r9,-131072
800029f8:	72 08       	ld.w	r8,r9[0x0]
800029fa:	a7 b8       	sbr	r8,0x7
800029fc:	93 08       	st.w	r9[0x0],r8
800029fe:	d8 32       	popm	r0-r7,pc
  bRequest      = Usb_read_endpoint_data(EP_CONTROL, 8);

  switch (bRequest)
  {
  case GET_DESCRIPTOR:
    if (bmRequestType == 0x80) usb_get_descriptor();
80002a00:	38 08       	mov	r8,-128
80002a02:	f0 09 18 00 	cp.b	r9,r8
80002a06:	fe 91 ff 3b 	brne	8000287c <usb_process_request+0x40>
  U8      descriptor_type;
  U8      string_type;
  Union32 temp;

  zlp             = FALSE;                                  /* no zero length packet */
  string_type     = Usb_read_endpoint_data(EP_CONTROL, 8);  /* read LSB of wValue    */
80002a0a:	30 39       	mov	r9,3
80002a0c:	ea 19 d0 00 	orh	r9,0xd000
80002a10:	8f 09       	st.w	r7[0x0],r9
  descriptor_type = Usb_read_endpoint_data(EP_CONTROL, 8);  /* read MSB of wValue    */
80002a12:	30 48       	mov	r8,4
80002a14:	ea 18 d0 00 	orh	r8,0xd000
  U8      descriptor_type;
  U8      string_type;
  Union32 temp;

  zlp             = FALSE;                                  /* no zero length packet */
  string_type     = Usb_read_endpoint_data(EP_CONTROL, 8);  /* read LSB of wValue    */
80002a18:	15 8a       	ld.ub	r10,r10[0x0]
  descriptor_type = Usb_read_endpoint_data(EP_CONTROL, 8);  /* read MSB of wValue    */
80002a1a:	13 8b       	ld.ub	r11,r9[0x0]
80002a1c:	8f 08       	st.w	r7[0x0],r8
80002a1e:	16 9c       	mov	r12,r11

  switch (descriptor_type)
80002a20:	30 18       	mov	r8,1
80002a22:	f0 0b 18 00 	cp.b	r11,r8
80002a26:	e0 80 01 34 	breq	80002c8e <usb_process_request+0x452>
80002a2a:	30 28       	mov	r8,2
80002a2c:	f0 0b 18 00 	cp.b	r11,r8
80002a30:	e0 80 01 28 	breq	80002c80 <usb_process_request+0x444>
    data_to_transfer = Usb_get_conf_desc_length();  //!< sizeof(usb_conf_desc);
    pbuffer          = Usb_get_conf_desc_pointer();
    break;

  default:
    if (!usb_user_get_descriptor(descriptor_type, string_type))
80002a34:	14 9b       	mov	r11,r10
80002a36:	cf 5d       	rcall	80002e20 <usb_user_get_descriptor>
80002a38:	c7 00       	breq	80002b18 <usb_process_request+0x2dc>
80002a3a:	fe f5 03 ce 	ld.w	r5,pc[974]
80002a3e:	6e 09       	ld.w	r9,r7[0x0]
      return;
    }
    break;
  }

  temp.u32 = Usb_read_endpoint_data(EP_CONTROL, 32);      //!< read wIndex and wLength with a 32-bit access
80002a40:	30 4a       	mov	r10,4
                                                          //!< since this access is aligned with a 32-bit
                                                          //!< boundary from the beginning of the endpoint
  wLength = usb_format_usb_to_mcu_data(16, temp.u16[1]);  //!< ignore wIndex, keep and format wLength
  Usb_ack_setup_received_free();                          //!< clear the setup received flag
80002a42:	72 08       	ld.w	r8,r9[0x0]
      return;
    }
    break;
  }

  temp.u32 = Usb_read_endpoint_data(EP_CONTROL, 32);      //!< read wIndex and wLength with a 32-bit access
80002a44:	fe 69 01 60 	mov	r9,-130720
                                                          //!< since this access is aligned with a 32-bit
                                                          //!< boundary from the beginning of the endpoint
  wLength = usb_format_usb_to_mcu_data(16, temp.u16[1]);  //!< ignore wIndex, keep and format wLength
  Usb_ack_setup_received_free();                          //!< clear the setup received flag
80002a48:	93 0a       	st.w	r9[0x0],r10
80002a4a:	5c c8       	swap.bh	r8
  }

  temp.u32 = Usb_read_endpoint_data(EP_CONTROL, 32);      //!< read wIndex and wLength with a 32-bit access
                                                          //!< since this access is aligned with a 32-bit
                                                          //!< boundary from the beginning of the endpoint
  wLength = usb_format_usb_to_mcu_data(16, temp.u16[1]);  //!< ignore wIndex, keep and format wLength
80002a4c:	f3 d8 b0 10 	bfexts	r9,r8,0x0,0x10
80002a50:	0b 88       	ld.ub	r8,r5[0x0]
  Usb_ack_setup_received_free();                          //!< clear the setup received flag

  if (wLength > data_to_transfer)
80002a52:	f0 09 19 00 	cp.h	r9,r8
80002a56:	e0 88 00 fa 	brls	80002c4a <usb_process_request+0x40e>
80002a5a:	f1 d8 c0 06 	bfextu	r8,r8,0x0,0x6
  {
    zlp = !(data_to_transfer % EP_CONTROL_LENGTH);  //!< zero length packet condition
80002a5e:	5f 00       	sreq	r0
80002a60:	fe 6b 01 60 	mov	r11,-130720
    // No need to test ZLP sending since we send the exact number of bytes as
    // expected by the host.
    data_to_transfer = (U8)wLength; //!< send only requested number of data bytes
  }

  Usb_ack_nak_out(EP_CONTROL);
80002a64:	30 88       	mov	r8,8
80002a66:	97 08       	st.w	r11[0x0],r8
80002a68:	0b 8a       	ld.ub	r10,r5[0x0]

  while (data_to_transfer && !Is_usb_nak_out(EP_CONTROL))
80002a6a:	58 0a       	cp.w	r10,0
80002a6c:	c3 00       	breq	80002acc <usb_process_request+0x290>
80002a6e:	fe 69 01 30 	mov	r9,-130768
80002a72:	72 08       	ld.w	r8,r9[0x0]
80002a74:	ed b8 00 03 	bld	r8,0x3
80002a78:	c2 a0       	breq	80002acc <usb_process_request+0x290>
80002a7a:	12 96       	mov	r6,r9
  {
    while (!Is_usb_control_in_ready() && !Is_usb_nak_out(EP_CONTROL));
80002a7c:	16 91       	mov	r1,r11
    data_to_transfer = usb_write_ep_txpacket(EP_CONTROL, pbuffer,
                                             data_to_transfer, &pbuffer);
    if (Is_usb_nak_out(EP_CONTROL))
      break;
    else
      Usb_ack_control_in_ready_send();  //!< Send data until necessary
80002a7e:	30 02       	mov	r2,0
    while (!Is_usb_control_in_ready() && !Is_usb_nak_out(EP_CONTROL));

    if (Is_usb_nak_out(EP_CONTROL))
      break;  // don't clear the flag now, it will be cleared after

    Usb_reset_endpoint_fifo_access(EP_CONTROL);
80002a80:	ea 12 d0 00 	orh	r2,0xd000
80002a84:	fe f4 03 88 	ld.w	r4,pc[904]
    data_to_transfer = usb_write_ep_txpacket(EP_CONTROL, pbuffer,
80002a88:	30 13       	mov	r3,1
                                             data_to_transfer, &pbuffer);
    if (Is_usb_nak_out(EP_CONTROL))
      break;
    else
      Usb_ack_control_in_ready_send();  //!< Send data until necessary
80002a8a:	6c 08       	ld.w	r8,r6[0x0]

  Usb_ack_nak_out(EP_CONTROL);

  while (data_to_transfer && !Is_usb_nak_out(EP_CONTROL))
  {
    while (!Is_usb_control_in_ready() && !Is_usb_nak_out(EP_CONTROL));
80002a8c:	ed b8 00 00 	bld	r8,0x0
80002a90:	c0 50       	breq	80002a9a <usb_process_request+0x25e>
80002a92:	6c 08       	ld.w	r8,r6[0x0]
80002a94:	ed b8 00 03 	bld	r8,0x3
80002a98:	cf 91       	brne	80002a8a <usb_process_request+0x24e>
80002a9a:	6c 08       	ld.w	r8,r6[0x0]

    if (Is_usb_nak_out(EP_CONTROL))
80002a9c:	fe f9 03 70 	ld.w	r9,pc[880]
      break;  // don't clear the flag now, it will be cleared after

    Usb_reset_endpoint_fifo_access(EP_CONTROL);
    data_to_transfer = usb_write_ep_txpacket(EP_CONTROL, pbuffer,
80002aa0:	e2 18 00 08 	andl	r8,0x8,COH

  while (data_to_transfer && !Is_usb_nak_out(EP_CONTROL))
  {
    while (!Is_usb_control_in_ready() && !Is_usb_nak_out(EP_CONTROL));

    if (Is_usb_nak_out(EP_CONTROL))
80002aa4:	10 9c       	mov	r12,r8
      break;  // don't clear the flag now, it will be cleared after

    Usb_reset_endpoint_fifo_access(EP_CONTROL);
    data_to_transfer = usb_write_ep_txpacket(EP_CONTROL, pbuffer,
80002aa6:	c1 31       	brne	80002acc <usb_process_request+0x290>

  while (data_to_transfer && !Is_usb_nak_out(EP_CONTROL))
  {
    while (!Is_usb_control_in_ready() && !Is_usb_nak_out(EP_CONTROL));

    if (Is_usb_nak_out(EP_CONTROL))
80002aa8:	8f 02       	st.w	r7[0x0],r2
      break;  // don't clear the flag now, it will be cleared after

    Usb_reset_endpoint_fifo_access(EP_CONTROL);
80002aaa:	68 0b       	ld.w	r11,r4[0x0]
    data_to_transfer = usb_write_ep_txpacket(EP_CONTROL, pbuffer,
80002aac:	fe b0 fb 22 	rcall	800020f0 <usb_write_ep_txpacket>
80002ab0:	f5 dc c0 08 	bfextu	r10,r12,0x0,0x8
80002ab4:	aa 8a       	st.b	r5[0x0],r10
80002ab6:	6c 08       	ld.w	r8,r6[0x0]
                                             data_to_transfer, &pbuffer);
    if (Is_usb_nak_out(EP_CONTROL))
80002ab8:	ed b8 00 03 	bld	r8,0x3
80002abc:	c0 80       	breq	80002acc <usb_process_request+0x290>
80002abe:	83 03       	st.w	r1[0x0],r3
      break;
    else
      Usb_ack_control_in_ready_send();  //!< Send data until necessary
80002ac0:	58 0a       	cp.w	r10,0
    data_to_transfer = (U8)wLength; //!< send only requested number of data bytes
  }

  Usb_ack_nak_out(EP_CONTROL);

  while (data_to_transfer && !Is_usb_nak_out(EP_CONTROL))
80002ac2:	c0 50       	breq	80002acc <usb_process_request+0x290>
80002ac4:	6c 08       	ld.w	r8,r6[0x0]
80002ac6:	ed b8 00 03 	bld	r8,0x3
80002aca:	ce 01       	brne	80002a8a <usb_process_request+0x24e>
80002acc:	58 00       	cp.w	r0,0
      break;
    else
      Usb_ack_control_in_ready_send();  //!< Send data until necessary
  }

  if (zlp && !Is_usb_nak_out(EP_CONTROL))
80002ace:	c0 70       	breq	80002adc <usb_process_request+0x2a0>
80002ad0:	fe 69 01 30 	mov	r9,-130768
80002ad4:	72 08       	ld.w	r8,r9[0x0]
80002ad6:	ed b8 00 03 	bld	r8,0x3
80002ada:	c5 91       	brne	80002b8c <usb_process_request+0x350>
80002adc:	fe 69 01 30 	mov	r9,-130768
  {
    while (!Is_usb_control_in_ready());
    Usb_ack_control_in_ready_send();
  }

  while (!Is_usb_nak_out(EP_CONTROL));
80002ae0:	72 08       	ld.w	r8,r9[0x0]
80002ae2:	ed b8 00 03 	bld	r8,0x3
80002ae6:	cf d1       	brne	80002ae0 <usb_process_request+0x2a4>
80002ae8:	30 89       	mov	r9,8
  Usb_ack_nak_out(EP_CONTROL);
80002aea:	fe 68 01 60 	mov	r8,-130720
80002aee:	91 09       	st.w	r8[0x0],r9
80002af0:	fe 69 01 30 	mov	r9,-130768
  while (!Is_usb_control_out_received());
80002af4:	72 08       	ld.w	r8,r9[0x0]
80002af6:	ed b8 00 01 	bld	r8,0x1
80002afa:	cf d1       	brne	80002af4 <usb_process_request+0x2b8>
80002afc:	c0 fb       	rjmp	8000291a <usb_process_request+0xde>
80002afe:	58 09       	cp.w	r9,0
    if (bmRequestType == 0x00) usb_set_address();
    else goto unsupported_request;
    break;

  case SET_CONFIGURATION:
    if (bmRequestType == 0x00) usb_set_configuration();
80002b00:	fe 91 fe be 	brne	8000287c <usb_process_request+0x40>
80002b04:	30 39       	mov	r9,3
//! function that will configure the endpoints following the configuration
//! number.
//!
void usb_set_configuration(void)
{
  U8 configuration_number = Usb_read_endpoint_data(EP_CONTROL, 8);
80002b06:	ea 19 d0 00 	orh	r9,0xd000
80002b0a:	15 88       	ld.ub	r8,r10[0x0]
80002b0c:	8f 09       	st.w	r7[0x0],r9
80002b0e:	30 19       	mov	r9,1

  if (configuration_number <= NB_CONFIGURATION)
80002b10:	f2 08 18 00 	cp.b	r8,r9
80002b14:	e0 88 00 8c 	brls	80002c2c <usb_process_request+0x3f0>
80002b18:	fe 68 01 f0 	mov	r8,-130576
    Usb_reset_endpoint_fifo_access(EP_CONTROL);
    Usb_write_endpoint_data(EP_CONTROL, 8, endpoint_status[wIndex]);
    break;

  default:
    Usb_enable_stall_handshake(EP_CONTROL);
80002b1c:	e8 69 00 00 	mov	r9,524288
80002b20:	91 09       	st.w	r8[0x0],r9
80002b22:	30 4a       	mov	r10,4
    Usb_ack_setup_received_free();
80002b24:	fe 68 01 60 	mov	r8,-130720
80002b28:	91 0a       	st.w	r8[0x0],r10
80002b2a:	d8 32       	popm	r0-r7,pc
80002b2c:	38 18       	mov	r8,-127
    if (0x7F < bmRequestType && bmRequestType <= 0x82) usb_get_status();
    else goto unsupported_request;
    break;

  case GET_INTERFACE:
    if (bmRequestType == 0x81) usb_get_interface();
80002b2e:	f0 09 18 00 	cp.b	r9,r8
80002b32:	fe 91 fe a5 	brne	8000287c <usb_process_request+0x40>
80002b36:	fe 68 01 60 	mov	r8,-130720

//! This function manages the GET INTERFACE request.
//!
void usb_get_interface(void)
{
  Usb_ack_setup_received_free();
80002b3a:	30 49       	mov	r9,4
80002b3c:	91 09       	st.w	r8[0x0],r9
80002b3e:	30 1a       	mov	r10,1
  Usb_ack_control_in_ready_send();  //!< send a ZLP for STATUS phase
80002b40:	fe 69 01 30 	mov	r9,-130768

  while (!Is_usb_control_out_received());
80002b44:	91 0a       	st.w	r8[0x0],r10
//! This function manages the GET INTERFACE request.
//!
void usb_get_interface(void)
{
  Usb_ack_setup_received_free();
  Usb_ack_control_in_ready_send();  //!< send a ZLP for STATUS phase
80002b46:	72 08       	ld.w	r8,r9[0x0]

  while (!Is_usb_control_out_received());
80002b48:	ed b8 00 01 	bld	r8,0x1
80002b4c:	cf d1       	brne	80002b46 <usb_process_request+0x30a>
80002b4e:	ce 6a       	rjmp	8000291a <usb_process_request+0xde>
80002b50:	38 08       	mov	r8,-128
    if (bmRequestType == 0x80) usb_get_descriptor();
    else goto unsupported_request;
    break;

  case GET_CONFIGURATION:
    if (bmRequestType == 0x80) usb_get_configuration();
80002b52:	f0 09 18 00 	cp.b	r9,r8
80002b56:	fe 91 fe 93 	brne	8000287c <usb_process_request+0x40>
80002b5a:	fe 6b 01 60 	mov	r11,-130720
//! This function manages the GET CONFIGURATION request. The current
//! configuration number is returned.
//!
void usb_get_configuration(void)
{
  Usb_ack_setup_received_free();
80002b5e:	30 48       	mov	r8,4
80002b60:	97 08       	st.w	r11[0x0],r8
80002b62:	30 0a       	mov	r10,0

  Usb_reset_endpoint_fifo_access(EP_CONTROL);
80002b64:	ea 1a d0 00 	orh	r10,0xd000
80002b68:	8f 0a       	st.w	r7[0x0],r10
80002b6a:	fe f9 02 a6 	ld.w	r9,pc[678]
  Usb_write_endpoint_data(EP_CONTROL, 8, usb_configuration_nb);
80002b6e:	13 88       	ld.ub	r8,r9[0x0]
80002b70:	b4 88       	st.b	r10[0x0],r8
80002b72:	30 19       	mov	r9,1
80002b74:	ea 19 d0 00 	orh	r9,0xd000
80002b78:	8f 09       	st.w	r7[0x0],r9
80002b7a:	30 18       	mov	r8,1
  Usb_ack_control_in_ready_send();
80002b7c:	fe 69 01 30 	mov	r9,-130768

  while (!Is_usb_control_out_received());
80002b80:	97 08       	st.w	r11[0x0],r8
{
  Usb_ack_setup_received_free();

  Usb_reset_endpoint_fifo_access(EP_CONTROL);
  Usb_write_endpoint_data(EP_CONTROL, 8, usb_configuration_nb);
  Usb_ack_control_in_ready_send();
80002b82:	72 08       	ld.w	r8,r9[0x0]

  while (!Is_usb_control_out_received());
80002b84:	ed b8 00 01 	bld	r8,0x1
80002b88:	cf d1       	brne	80002b82 <usb_process_request+0x346>
80002b8a:	cc 8a       	rjmp	8000291a <usb_process_request+0xde>
80002b8c:	72 08       	ld.w	r8,r9[0x0]
      Usb_ack_control_in_ready_send();  //!< Send data until necessary
  }

  if (zlp && !Is_usb_nak_out(EP_CONTROL))
  {
    while (!Is_usb_control_in_ready());
80002b8e:	ed b8 00 00 	bld	r8,0x0
80002b92:	cf d1       	brne	80002b8c <usb_process_request+0x350>
80002b94:	30 19       	mov	r9,1
    Usb_ack_control_in_ready_send();
80002b96:	fe 68 01 60 	mov	r8,-130720
80002b9a:	91 09       	st.w	r8[0x0],r9
80002b9c:	ca 0b       	rjmp	80002adc <usb_process_request+0x2a0>
80002b9e:	6e 08       	ld.w	r8,r7[0x0]
//! This function manages the SET FEATURE request. The USB test modes are
//! supported by this function.
//!
void usb_set_feature(void)
{
  U16 wValue  = usb_format_usb_to_mcu_data(16, Usb_read_endpoint_data(EP_CONTROL, 16));
80002ba0:	11 1b       	ld.sh	r11,r8++
80002ba2:	8f 08       	st.w	r7[0x0],r8
80002ba4:	11 1a       	ld.sh	r10,r8++
  U16 wIndex  = usb_format_usb_to_mcu_data(16, Usb_read_endpoint_data(EP_CONTROL, 16));
80002ba6:	8f 08       	st.w	r7[0x0],r8
80002ba8:	11 19       	ld.sh	r9,r8++
  U16 wLength = usb_format_usb_to_mcu_data(16, Usb_read_endpoint_data(EP_CONTROL, 16));
80002baa:	8f 08       	st.w	r7[0x0],r8
80002bac:	5c cb       	swap.bh	r11
//! This function manages the SET FEATURE request. The USB test modes are
//! supported by this function.
//!
void usb_set_feature(void)
{
  U16 wValue  = usb_format_usb_to_mcu_data(16, Usb_read_endpoint_data(EP_CONTROL, 16));
80002bae:	5c ca       	swap.bh	r10
  U16 wIndex  = usb_format_usb_to_mcu_data(16, Usb_read_endpoint_data(EP_CONTROL, 16));
80002bb0:	5c c9       	swap.bh	r9
  U16 wLength = usb_format_usb_to_mcu_data(16, Usb_read_endpoint_data(EP_CONTROL, 16));
80002bb2:	5c 8b       	casts.h	r11
//! This function manages the SET FEATURE request. The USB test modes are
//! supported by this function.
//!
void usb_set_feature(void)
{
  U16 wValue  = usb_format_usb_to_mcu_data(16, Usb_read_endpoint_data(EP_CONTROL, 16));
80002bb4:	5c 8a       	casts.h	r10
  U16 wIndex  = usb_format_usb_to_mcu_data(16, Usb_read_endpoint_data(EP_CONTROL, 16));
80002bb6:	5c 89       	casts.h	r9
  U16 wLength = usb_format_usb_to_mcu_data(16, Usb_read_endpoint_data(EP_CONTROL, 16));
80002bb8:	cb 01       	brne	80002b18 <usb_process_request+0x2dc>

  if (wLength)
80002bba:	12 9c       	mov	r12,r9
    goto unsupported_request;

  switch (wValue)
80002bbc:	f2 0b 19 00 	cp.h	r11,r9
80002bc0:	c6 e0       	breq	80002c9c <usb_process_request+0x460>
80002bc2:	30 27       	mov	r7,2
80002bc4:	ee 0b 19 00 	cp.h	r11,r7
80002bc8:	ca 81       	brne	80002b18 <usb_process_request+0x2dc>
80002bca:	1d 89       	ld.ub	r9,lr[0x0]
    Usb_ack_control_in_ready_send();
    break;

#warning Add a #if HIGH_SPEED_CAPABLE or something.
  case FEATURE_TEST_MODE:
    if (bmRequestType != DEVICE_TYPE ||
80002bcc:	f8 09 18 00 	cp.b	r9,r12
80002bd0:	ca 41       	brne	80002b18 <usb_process_request+0x2dc>
80002bd2:	5c 7a       	castu.h	r10
80002bd4:	f1 da c0 08 	bfextu	r8,r10,0x0,0x8
80002bd8:	ca 01       	brne	80002b18 <usb_process_request+0x2dc>
80002bda:	a9 8a       	lsr	r10,0x8
        wIndex & 0x00FF)
      goto unsupported_request;

    switch (wIndex >> 8)
80002bdc:	ee 0a 19 00 	cp.h	r10,r7
80002be0:	e0 80 00 f4 	breq	80002dc8 <usb_process_request+0x58c>
80002be4:	e0 8b 00 84 	brhi	80002cec <usb_process_request+0x4b0>
80002be8:	30 18       	mov	r8,1
80002bea:	f0 0a 19 00 	cp.h	r10,r8
80002bee:	c9 51       	brne	80002b18 <usb_process_request+0x2dc>
80002bf0:	fe 68 01 60 	mov	r8,-130720
    {
    case TEST_J:
      Usb_ack_setup_received_free();
80002bf4:	30 49       	mov	r9,4
80002bf6:	91 09       	st.w	r8[0x0],r9
80002bf8:	30 1a       	mov	r10,1
      Usb_ack_control_in_ready_send();
80002bfa:	fe 69 01 30 	mov	r9,-130768
      while (!Is_usb_control_in_ready());
80002bfe:	91 0a       	st.w	r8[0x0],r10

    switch (wIndex >> 8)
    {
    case TEST_J:
      Usb_ack_setup_received_free();
      Usb_ack_control_in_ready_send();
80002c00:	72 08       	ld.w	r8,r9[0x0]
      while (!Is_usb_control_in_ready());
80002c02:	ed b8 00 00 	bld	r8,0x0
80002c06:	cf d1       	brne	80002c00 <usb_process_request+0x3c4>
80002c08:	fe 68 00 00 	mov	r8,-131072
      Wr_bitfield(AVR32_USBB_udcon, AVR32_USBB_UDCON_SPDCONF_MASK, 2);
80002c0c:	70 09       	ld.w	r9,r8[0x0]
80002c0e:	e0 19 f3 ff 	andl	r9,0xf3ff
80002c12:	ab b9       	sbr	r9,0xb
80002c14:	91 09       	st.w	r8[0x0],r9
80002c16:	70 0a       	ld.w	r10,r8[0x0]
      Set_bits(AVR32_USBB_udcon, AVR32_USBB_UDCON_TSTJ_MASK);
80002c18:	ad ba       	sbr	r10,0xd
80002c1a:	91 0a       	st.w	r8[0x0],r10
80002c1c:	d8 32       	popm	r0-r7,pc
80002c1e:	30 49       	mov	r9,4
    Usb_reset_endpoint_fifo_access(EP_CONTROL);
    Usb_write_endpoint_data(EP_CONTROL, 8, DEVICE_STATUS);
    break;

  case REQUEST_INTERFACE_STATUS:
    Usb_ack_setup_received_free();
80002c20:	fe 68 01 60 	mov	r8,-130720
80002c24:	30 0a       	mov	r10,0
    Usb_reset_endpoint_fifo_access(EP_CONTROL);
    Usb_write_endpoint_data(EP_CONTROL, 8, INTERFACE_STATUS);
80002c26:	91 09       	st.w	r8[0x0],r9
    Usb_reset_endpoint_fifo_access(EP_CONTROL);
    Usb_write_endpoint_data(EP_CONTROL, 8, DEVICE_STATUS);
    break;

  case REQUEST_INTERFACE_STATUS:
    Usb_ack_setup_received_free();
80002c28:	fe 9f fe 63 	bral	800028ee <usb_process_request+0xb2>
80002c2c:	fe 6a 01 60 	mov	r10,-130720
{
  U8 configuration_number = Usb_read_endpoint_data(EP_CONTROL, 8);

  if (configuration_number <= NB_CONFIGURATION)
  {
    Usb_ack_setup_received_free();
80002c30:	30 46       	mov	r6,4
80002c32:	95 06       	st.w	r10[0x0],r6
80002c34:	fe f9 01 dc 	ld.w	r9,pc[476]
    usb_configuration_nb = configuration_number;
80002c38:	b2 88       	st.b	r9[0x0],r8

    Usb_ack_control_in_ready_send();              //!< send a ZLP for STATUS phase
80002c3a:	30 18       	mov	r8,1
80002c3c:	95 08       	st.w	r10[0x0],r8

    usb_user_endpoint_init(usb_configuration_nb); //!< endpoint configuration
80002c3e:	13 8c       	ld.ub	r12,r9[0x0]
80002c40:	cf 1c       	rcall	80002e22 <usb_user_endpoint_init>
80002c42:	fe 68 00 00 	mov	r8,-131072
    Usb_set_configuration_action();
80002c46:	91 66       	st.w	r8[0x18],r6
80002c48:	d8 32       	popm	r0-r7,pc
80002c4a:	4f 08       	lddpc	r8,80002e08 <usb_process_request+0x5cc>
  }
  else
  {
    // No need to test ZLP sending since we send the exact number of bytes as
    // expected by the host.
    data_to_transfer = (U8)wLength; //!< send only requested number of data bytes
80002c4c:	30 00       	mov	r0,0
80002c4e:	b0 89       	st.b	r8[0x0],r9
80002c50:	c0 8b       	rjmp	80002a60 <usb_process_request+0x224>
80002c52:	6e 08       	ld.w	r8,r7[0x0]
    Usb_reset_endpoint_fifo_access(EP_CONTROL);
    Usb_write_endpoint_data(EP_CONTROL, 8, INTERFACE_STATUS);
    break;

  case REQUEST_ENDPOINT_STATUS:
    Usb_read_endpoint_data(EP_CONTROL, 16); //!< dummy read (wValue)
80002c54:	11 19       	ld.sh	r9,r8++
80002c56:	8f 08       	st.w	r7[0x0],r8
80002c58:	30 49       	mov	r9,4
    wIndex = Usb_read_endpoint_data(EP_CONTROL, 8);
    wIndex = Get_desc_ep_nbr(wIndex);
    Usb_ack_setup_received_free();
80002c5a:	11 8a       	ld.ub	r10,r8[0x0]
    Usb_write_endpoint_data(EP_CONTROL, 8, INTERFACE_STATUS);
    break;

  case REQUEST_ENDPOINT_STATUS:
    Usb_read_endpoint_data(EP_CONTROL, 16); //!< dummy read (wValue)
    wIndex = Usb_read_endpoint_data(EP_CONTROL, 8);
80002c5c:	fe 68 01 60 	mov	r8,-130720
    wIndex = Get_desc_ep_nbr(wIndex);
    Usb_ack_setup_received_free();
80002c60:	91 09       	st.w	r8[0x0],r9
80002c62:	f5 da c0 04 	bfextu	r10,r10,0x0,0x4
    Usb_reset_endpoint_fifo_access(EP_CONTROL);
    Usb_write_endpoint_data(EP_CONTROL, 8, endpoint_status[wIndex]);
80002c66:	4e 88       	lddpc	r8,80002e04 <usb_process_request+0x5c8>
80002c68:	30 09       	mov	r9,0
80002c6a:	ea 19 d0 00 	orh	r9,0xd000
80002c6e:	f0 0a 07 0b 	ld.ub	r11,r8[r10]
80002c72:	b2 8b       	st.b	r9[0x0],r11
80002c74:	30 18       	mov	r8,1
80002c76:	ea 18 d0 00 	orh	r8,0xd000
80002c7a:	8f 08       	st.w	r7[0x0],r8
80002c7c:	fe 9f fe 42 	bral	80002900 <usb_process_request+0xc4>
80002c80:	34 38       	mov	r8,67
    data_to_transfer = Usb_get_dev_desc_length();   //!< sizeof(usb_dev_desc);
    pbuffer          = Usb_get_dev_desc_pointer();
    break;

  case CONFIGURATION_DESCRIPTOR:
    data_to_transfer = Usb_get_conf_desc_length();  //!< sizeof(usb_conf_desc);
80002c82:	4e 25       	lddpc	r5,80002e08 <usb_process_request+0x5cc>
80002c84:	4e 49       	lddpc	r9,80002e14 <usb_process_request+0x5d8>
    pbuffer          = Usb_get_conf_desc_pointer();
80002c86:	aa 88       	st.b	r5[0x0],r8
    data_to_transfer = Usb_get_dev_desc_length();   //!< sizeof(usb_dev_desc);
    pbuffer          = Usb_get_dev_desc_pointer();
    break;

  case CONFIGURATION_DESCRIPTOR:
    data_to_transfer = Usb_get_conf_desc_length();  //!< sizeof(usb_conf_desc);
80002c88:	4e 18       	lddpc	r8,80002e0c <usb_process_request+0x5d0>
    pbuffer          = Usb_get_conf_desc_pointer();
80002c8a:	91 09       	st.w	r8[0x0],r9
80002c8c:	cd 9a       	rjmp	80002a3e <usb_process_request+0x202>
80002c8e:	31 28       	mov	r8,18
  descriptor_type = Usb_read_endpoint_data(EP_CONTROL, 8);  /* read MSB of wValue    */

  switch (descriptor_type)
  {
  case DEVICE_DESCRIPTOR:
    data_to_transfer = Usb_get_dev_desc_length();   //!< sizeof(usb_dev_desc);
80002c90:	4d e5       	lddpc	r5,80002e08 <usb_process_request+0x5cc>
80002c92:	4e 29       	lddpc	r9,80002e18 <usb_process_request+0x5dc>
    pbuffer          = Usb_get_dev_desc_pointer();
80002c94:	aa 88       	st.b	r5[0x0],r8
  descriptor_type = Usb_read_endpoint_data(EP_CONTROL, 8);  /* read MSB of wValue    */

  switch (descriptor_type)
  {
  case DEVICE_DESCRIPTOR:
    data_to_transfer = Usb_get_dev_desc_length();   //!< sizeof(usb_dev_desc);
80002c96:	4d e8       	lddpc	r8,80002e0c <usb_process_request+0x5d0>
    pbuffer          = Usb_get_dev_desc_pointer();
80002c98:	91 09       	st.w	r8[0x0],r9
80002c9a:	cd 2a       	rjmp	80002a3e <usb_process_request+0x202>
80002c9c:	1d 88       	ld.ub	r8,lr[0x0]

  switch (wValue)
  {
  case FEATURE_ENDPOINT_HALT:
    wIndex = Get_desc_ep_nbr(wIndex);  // clear direction flag
    if (bmRequestType != ENDPOINT_TYPE ||
80002c9e:	f7 da c0 04 	bfextu	r11,r10,0x0,0x4
    goto unsupported_request;

  switch (wValue)
  {
  case FEATURE_ENDPOINT_HALT:
    wIndex = Get_desc_ep_nbr(wIndex);  // clear direction flag
80002ca2:	ec 08 18 00 	cp.b	r8,r6
    if (bmRequestType != ENDPOINT_TYPE ||
80002ca6:	5f 1a       	srne	r10
80002ca8:	f2 0b 19 00 	cp.h	r11,r9
80002cac:	5f 08       	sreq	r8
80002cae:	10 4a       	or	r10,r8
80002cb0:	f2 0a 18 00 	cp.b	r10,r9
80002cb4:	fe 91 ff 32 	brne	80002b18 <usb_process_request+0x2dc>
80002cb8:	fe 68 00 00 	mov	r8,-131072
80002cbc:	70 79       	ld.w	r9,r8[0x1c]
80002cbe:	5c 7b       	castu.h	r11
80002cc0:	30 1c       	mov	r12,1
80002cc2:	f8 0b 09 48 	lsl	r8,r12,r11
80002cc6:	12 68       	and	r8,r9
80002cc8:	fe 90 ff 28 	breq	80002b18 <usb_process_request+0x2dc>
80002ccc:	e8 69 00 00 	mov	r9,524288
        wIndex == EP_CONTROL ||
        !Is_usb_endpoint_enabled(wIndex))
      goto unsupported_request;

    Usb_enable_stall_handshake(wIndex);
80002cd0:	f6 08 15 02 	lsl	r8,r11,0x2
80002cd4:	e0 38 fe 10 	sub	r8,130576
80002cd8:	91 09       	st.w	r8[0x0],r9
80002cda:	4c ba       	lddpc	r10,80002e04 <usb_process_request+0x5c8>
    endpoint_status[wIndex] = 1;  // Halt feature flag
80002cdc:	f4 0b 0b 0c 	st.b	r10[r11],r12
80002ce0:	fe 69 01 60 	mov	r9,-130720
    Usb_ack_setup_received_free();
80002ce4:	30 48       	mov	r8,4
80002ce6:	93 08       	st.w	r9[0x0],r8
80002ce8:	93 0c       	st.w	r9[0x0],r12
    Usb_ack_control_in_ready_send();
80002cea:	d8 32       	popm	r0-r7,pc
80002cec:	30 38       	mov	r8,3
  case FEATURE_TEST_MODE:
    if (bmRequestType != DEVICE_TYPE ||
        wIndex & 0x00FF)
      goto unsupported_request;

    switch (wIndex >> 8)
80002cee:	f0 0a 19 00 	cp.h	r10,r8
80002cf2:	c5 70       	breq	80002da0 <usb_process_request+0x564>
80002cf4:	30 48       	mov	r8,4
80002cf6:	f0 0a 19 00 	cp.h	r10,r8
80002cfa:	fe 91 ff 0f 	brne	80002b18 <usb_process_request+0x2dc>
80002cfe:	fe 68 01 60 	mov	r8,-130720
          0x7F, 0xBF, 0xDF, 0xEF, 0xF7, 0xFB, 0xFD,
          // 00111111, {S0111111 * 9}, S0
          0xFC, 0x7E, 0xBF, 0xDF, 0xEF, 0xF7, 0xFB, 0xFD, 0x7E
        };

        Usb_ack_setup_received_free();
80002d02:	30 49       	mov	r9,4
80002d04:	91 09       	st.w	r8[0x0],r9
80002d06:	30 1a       	mov	r10,1
        Usb_ack_control_in_ready_send();
80002d08:	fe 69 01 30 	mov	r9,-130768
        while (!Is_usb_control_in_ready());
80002d0c:	91 0a       	st.w	r8[0x0],r10
          // 00111111, {S0111111 * 9}, S0
          0xFC, 0x7E, 0xBF, 0xDF, 0xEF, 0xF7, 0xFB, 0xFD, 0x7E
        };

        Usb_ack_setup_received_free();
        Usb_ack_control_in_ready_send();
80002d0e:	72 08       	ld.w	r8,r9[0x0]
        while (!Is_usb_control_in_ready());
80002d10:	ed b8 00 00 	bld	r8,0x0
80002d14:	cf d1       	brne	80002d0e <usb_process_request+0x4d2>
80002d16:	fe 6c 00 00 	mov	r12,-131072
        Wr_bitfield(AVR32_USBB_udcon, AVR32_USBB_UDCON_SPDCONF_MASK, 2);
80002d1a:	78 08       	ld.w	r8,r12[0x0]
80002d1c:	e0 18 f3 ff 	andl	r8,0xf3ff
80002d20:	ab b8       	sbr	r8,0xb
80002d22:	99 08       	st.w	r12[0x0],r8
80002d24:	78 79       	ld.w	r9,r12[0x1c]
        Usb_disable_endpoint(EP_CONTROL);
80002d26:	a1 c9       	cbr	r9,0x0
80002d28:	99 79       	st.w	r12[0x1c],r9
80002d2a:	fe 6e 01 00 	mov	lr,-130816
        Usb_unallocate_memory(EP_CONTROL);
80002d2e:	7c 08       	ld.w	r8,lr[0x0]
80002d30:	a1 d8       	cbr	r8,0x1
80002d32:	9d 08       	st.w	lr[0x0],r8
80002d34:	78 79       	ld.w	r9,r12[0x1c]
        (void)Usb_configure_endpoint(EP_CONTROL,
80002d36:	a1 a9       	sbr	r9,0x0
80002d38:	99 79       	st.w	r12[0x1c],r9
80002d3a:	30 8b       	mov	r11,8
80002d3c:	7c 0a       	ld.w	r10,lr[0x0]
80002d3e:	e0 69 04 00 	mov	r9,1024
80002d42:	e0 1a e6 83 	andl	r10,0xe683
80002d46:	34 08       	mov	r8,64
80002d48:	e8 1a 11 00 	orl	r10,0x1100
80002d4c:	f0 0b 0c 48 	max	r8,r8,r11
80002d50:	f0 09 0d 48 	min	r8,r8,r9
80002d54:	a1 78       	lsl	r8,0x1
80002d56:	20 18       	sub	r8,1
80002d58:	f0 08 12 00 	clz	r8,r8
80002d5c:	f0 08 11 1c 	rsub	r8,r8,28
80002d60:	a5 68       	lsl	r8,0x4
80002d62:	e2 18 08 7c 	andl	r8,0x87c,COH
80002d66:	10 4a       	or	r10,r8
80002d68:	9d 0a       	st.w	lr[0x0],r10
80002d6a:	7c 08       	ld.w	r8,lr[0x0]
80002d6c:	a1 b8       	sbr	r8,0x1
80002d6e:	9d 08       	st.w	lr[0x0],r8
80002d70:	fe 69 01 30 	mov	r9,-130768
80002d74:	72 09       	ld.w	r9,r9[0x0]
80002d76:	78 78       	ld.w	r8,r12[0x1c]
                                     TYPE_BULK,
                                     DIRECTION_IN,
                                     64,
                                     SINGLE_BANK);
        Usb_reset_endpoint(EP_CONTROL);
80002d78:	b1 a8       	sbr	r8,0x10
80002d7a:	99 78       	st.w	r12[0x1c],r8
80002d7c:	78 79       	ld.w	r9,r12[0x1c]
80002d7e:	b1 c9       	cbr	r9,0x10
80002d80:	99 79       	st.w	r12[0x1c],r9
80002d82:	78 08       	ld.w	r8,r12[0x0]
        Set_bits(AVR32_USBB_udcon, AVR32_USBB_UDCON_TSTPCKT_MASK);
80002d84:	af b8       	sbr	r8,0xf
80002d86:	30 09       	mov	r9,0
        usb_write_ep_txpacket(EP_CONTROL, &test_packet, sizeof(test_packet), NULL);
80002d88:	99 08       	st.w	r12[0x0],r8
                                     TYPE_BULK,
                                     DIRECTION_IN,
                                     64,
                                     SINGLE_BANK);
        Usb_reset_endpoint(EP_CONTROL);
        Set_bits(AVR32_USBB_udcon, AVR32_USBB_UDCON_TSTPCKT_MASK);
80002d8a:	33 5a       	mov	r10,53
        usb_write_ep_txpacket(EP_CONTROL, &test_packet, sizeof(test_packet), NULL);
80002d8c:	12 9c       	mov	r12,r9
80002d8e:	4a 4b       	lddpc	r11,80002e1c <usb_process_request+0x5e0>
80002d90:	fe b0 f9 b0 	rcall	800020f0 <usb_write_ep_txpacket>
80002d94:	e0 69 40 00 	mov	r9,16384
        Usb_send_in(EP_CONTROL);
80002d98:	fe 68 02 20 	mov	r8,-130528
80002d9c:	91 09       	st.w	r8[0x0],r9
80002d9e:	d8 32       	popm	r0-r7,pc
80002da0:	fe 68 01 60 	mov	r8,-130720
      Wr_bitfield(AVR32_USBB_udcon, AVR32_USBB_UDCON_SPDCONF_MASK, 2);
      Set_bits(AVR32_USBB_udcon, AVR32_USBB_UDCON_TSTK_MASK);
      break;

    case TEST_SE0_NAK:
      Usb_ack_setup_received_free();
80002da4:	30 49       	mov	r9,4
80002da6:	91 09       	st.w	r8[0x0],r9
80002da8:	30 1a       	mov	r10,1
      Usb_ack_control_in_ready_send();
80002daa:	fe 69 01 30 	mov	r9,-130768
      while (!Is_usb_control_in_ready());
80002dae:	91 0a       	st.w	r8[0x0],r10
      Set_bits(AVR32_USBB_udcon, AVR32_USBB_UDCON_TSTK_MASK);
      break;

    case TEST_SE0_NAK:
      Usb_ack_setup_received_free();
      Usb_ack_control_in_ready_send();
80002db0:	72 08       	ld.w	r8,r9[0x0]
      while (!Is_usb_control_in_ready());
80002db2:	ed b8 00 00 	bld	r8,0x0
80002db6:	cf d1       	brne	80002db0 <usb_process_request+0x574>
80002db8:	fe 69 00 00 	mov	r9,-131072
      Wr_bitfield(AVR32_USBB_udcon, AVR32_USBB_UDCON_SPDCONF_MASK, 2);
80002dbc:	72 08       	ld.w	r8,r9[0x0]
80002dbe:	e0 18 f3 ff 	andl	r8,0xf3ff
80002dc2:	ab b8       	sbr	r8,0xb
80002dc4:	93 08       	st.w	r9[0x0],r8
80002dc6:	d8 32       	popm	r0-r7,pc
80002dc8:	fe 68 01 60 	mov	r8,-130720
      Wr_bitfield(AVR32_USBB_udcon, AVR32_USBB_UDCON_SPDCONF_MASK, 2);
      Set_bits(AVR32_USBB_udcon, AVR32_USBB_UDCON_TSTJ_MASK);
      break;

    case TEST_K:
      Usb_ack_setup_received_free();
80002dcc:	30 49       	mov	r9,4
80002dce:	91 09       	st.w	r8[0x0],r9
80002dd0:	30 1a       	mov	r10,1
      Usb_ack_control_in_ready_send();
80002dd2:	fe 69 01 30 	mov	r9,-130768
      while (!Is_usb_control_in_ready());
80002dd6:	91 0a       	st.w	r8[0x0],r10
      Set_bits(AVR32_USBB_udcon, AVR32_USBB_UDCON_TSTJ_MASK);
      break;

    case TEST_K:
      Usb_ack_setup_received_free();
      Usb_ack_control_in_ready_send();
80002dd8:	72 08       	ld.w	r8,r9[0x0]
      while (!Is_usb_control_in_ready());
80002dda:	ed b8 00 00 	bld	r8,0x0
80002dde:	cf d1       	brne	80002dd8 <usb_process_request+0x59c>
80002de0:	fe 68 00 00 	mov	r8,-131072
      Wr_bitfield(AVR32_USBB_udcon, AVR32_USBB_UDCON_SPDCONF_MASK, 2);
80002de4:	70 09       	ld.w	r9,r8[0x0]
80002de6:	e0 19 f3 ff 	andl	r9,0xf3ff
80002dea:	ab b9       	sbr	r9,0xb
80002dec:	91 09       	st.w	r8[0x0],r9
80002dee:	70 0a       	ld.w	r10,r8[0x0]
      Set_bits(AVR32_USBB_udcon, AVR32_USBB_UDCON_TSTK_MASK);
80002df0:	af aa       	sbr	r10,0xe
80002df2:	91 0a       	st.w	r8[0x0],r10
80002df4:	d8 32       	popm	r0-r7,pc
80002df6:	d7 03       	nop
80002df8:	00 00       	add	r0,r0
80002dfa:	06 6c       	and	r12,r3
80002dfc:	00 00       	add	r0,r0
80002dfe:	05 3a       	ld.ub	r10,r2++
80002e00:	80 00       	ld.sh	r0,r0[0x0]
80002e02:	b0 18       	st.h	r8[0x2],r8
80002e04:	00 00       	add	r0,r0
80002e06:	06 8c       	andn	r12,r3
80002e08:	00 00       	add	r0,r0
80002e0a:	06 91       	mov	r1,r3
80002e0c:	00 00       	add	r0,r0
80002e0e:	06 94       	mov	r4,r3
80002e10:	00 00       	add	r0,r0
80002e12:	06 90       	mov	r0,r3
80002e14:	80 00       	ld.sh	r0,r0[0x0]
80002e16:	b0 92       	st.b	r8[0x1],r2
80002e18:	80 00       	ld.sh	r0,r0[0x0]
80002e1a:	b0 80       	st.b	r8[0x0],r0
80002e1c:	80 00       	ld.sh	r0,r0[0x0]
80002e1e:	b0 48       	st.h	r8[0x8],r8

80002e20 <usb_user_get_descriptor>:
  }

  return pbuffer != NULL;
  */
  return FALSE;
}
80002e20:	5e fd       	retal	0

80002e22 <usb_user_endpoint_init>:

//! @brief This function configures the endpoints of the device application.
//! This function is called when the set configuration request has been received.
//!
void usb_user_endpoint_init(U8 conf_nb)
{
80002e22:	eb cd 40 40 	pushm	r6,lr
  (void)Usb_configure_endpoint(INT_EP,
80002e26:	fe 6e 00 00 	mov	lr,-131072
80002e2a:	7c 78       	ld.w	r8,lr[0x1c]
80002e2c:	a3 b8       	sbr	r8,0x3
80002e2e:	9d 78       	st.w	lr[0x1c],r8
80002e30:	fe 6a 01 0c 	mov	r10,-130804
80002e34:	e0 6b 04 00 	mov	r11,1024
80002e38:	74 09       	ld.w	r9,r10[0x0]
80002e3a:	30 86       	mov	r6,8
80002e3c:	e0 19 e6 83 	andl	r9,0xe683
80002e40:	32 08       	mov	r8,32
80002e42:	e8 19 19 00 	orl	r9,0x1900
80002e46:	f0 06 0c 48 	max	r8,r8,r6
80002e4a:	f0 0b 0d 48 	min	r8,r8,r11
80002e4e:	a1 78       	lsl	r8,0x1
80002e50:	20 18       	sub	r8,1
80002e52:	f0 08 12 00 	clz	r8,r8
80002e56:	f0 08 11 1c 	rsub	r8,r8,28
80002e5a:	a5 68       	lsl	r8,0x4
80002e5c:	e2 18 00 7c 	andl	r8,0x7c,COH
80002e60:	10 49       	or	r9,r8
80002e62:	95 09       	st.w	r10[0x0],r9
80002e64:	74 08       	ld.w	r8,r10[0x0]
80002e66:	a1 b8       	sbr	r8,0x1
80002e68:	95 08       	st.w	r10[0x0],r8
80002e6a:	fe 69 01 3c 	mov	r9,-130756
80002e6e:	72 09       	ld.w	r9,r9[0x0]
                         EP_ATTRIBUTES_3,
                         DIRECTION_IN,
                         EP_SIZE_3,
                         SINGLE_BANK);

  (void)Usb_configure_endpoint(TX_EP,
80002e70:	7c 78       	ld.w	r8,lr[0x1c]
80002e72:	a1 b8       	sbr	r8,0x1
80002e74:	9d 78       	st.w	lr[0x1c],r8
80002e76:	fe 6c 01 04 	mov	r12,-130812
80002e7a:	34 0a       	mov	r10,64
80002e7c:	78 08       	ld.w	r8,r12[0x0]
80002e7e:	f4 06 0c 4a 	max	r10,r10,r6
80002e82:	e0 18 e6 83 	andl	r8,0xe683
80002e86:	f4 0b 0d 4a 	min	r10,r10,r11
80002e8a:	e8 18 11 04 	orl	r8,0x1104
80002e8e:	a1 7a       	lsl	r10,0x1
80002e90:	20 1a       	sub	r10,1
80002e92:	f4 0a 12 00 	clz	r10,r10
80002e96:	f4 0a 11 1c 	rsub	r10,r10,28
80002e9a:	a5 6a       	lsl	r10,0x4
80002e9c:	14 99       	mov	r9,r10
80002e9e:	e2 19 08 78 	andl	r9,0x878,COH
80002ea2:	12 48       	or	r8,r9
80002ea4:	99 08       	st.w	r12[0x0],r8
80002ea6:	78 09       	ld.w	r9,r12[0x0]
80002ea8:	a1 b9       	sbr	r9,0x1
80002eaa:	99 09       	st.w	r12[0x0],r9
80002eac:	fe 6b 01 34 	mov	r11,-130764
80002eb0:	76 0b       	ld.w	r11,r11[0x0]
                         EP_ATTRIBUTES_1,
                         DIRECTION_IN,
                         EP_SIZE_1,
                         DOUBLE_BANK);

  (void)Usb_configure_endpoint(RX_EP,
80002eb2:	7c 78       	ld.w	r8,lr[0x1c]
80002eb4:	a3 a8       	sbr	r8,0x2
80002eb6:	9d 78       	st.w	lr[0x1c],r8
80002eb8:	fe 6b 01 08 	mov	r11,-130808
80002ebc:	e2 1a 09 78 	andl	r10,0x978,COH
80002ec0:	76 08       	ld.w	r8,r11[0x0]
80002ec2:	e0 18 e6 83 	andl	r8,0xe683
80002ec6:	e8 18 10 04 	orl	r8,0x1004
80002eca:	14 48       	or	r8,r10
80002ecc:	97 08       	st.w	r11[0x0],r8
80002ece:	fe 68 01 38 	mov	r8,-130760
80002ed2:	76 09       	ld.w	r9,r11[0x0]
80002ed4:	a1 b9       	sbr	r9,0x1
80002ed6:	97 09       	st.w	r11[0x0],r9
80002ed8:	70 08       	ld.w	r8,r8[0x0]
                         EP_ATTRIBUTES_2,
                         DIRECTION_OUT,
                         EP_SIZE_2,
                         DOUBLE_BANK);
}
80002eda:	e3 cd 80 40 	ldm	sp++,r6,pc
80002ede:	d7 03       	nop

80002ee0 <usb_user_read_request>:
//! request is processed. This function returns FALSE if the request is not
//! supported. In this case, a STALL handshake will be automatically
//! sent by the standard USB read request function.
//!
Bool usb_user_read_request(U8 type, U8 request)
{
80002ee0:	eb cd 40 fc 	pushm	r2-r7,lr
  switch (request)
80002ee4:	32 18       	mov	r8,33
80002ee6:	f0 0b 18 00 	cp.b	r11,r8
80002eea:	c7 70       	breq	80002fd8 <usb_user_read_request+0xf8>
80002eec:	32 28       	mov	r8,34
80002eee:	f0 0b 18 00 	cp.b	r11,r8
80002ef2:	c6 50       	breq	80002fbc <usb_user_read_request+0xdc>
80002ef4:	32 08       	mov	r8,32
80002ef6:	f0 0b 18 00 	cp.b	r11,r8
80002efa:	c0 30       	breq	80002f00 <usb_user_read_request+0x20>
80002efc:	e3 cf 80 fc 	ldm	sp++,r2-r7,pc,r12=0
   Usb_ack_control_out_received_free();
}

void cdc_set_line_coding (void)
{
   Usb_ack_setup_received_free();
80002f00:	30 49       	mov	r9,4
80002f02:	fe 68 01 60 	mov	r8,-130720
80002f06:	91 09       	st.w	r8[0x0],r9

   while(!Is_usb_control_out_received());
80002f08:	fe 69 01 30 	mov	r9,-130768
80002f0c:	72 08       	ld.w	r8,r9[0x0]
80002f0e:	ed b8 00 01 	bld	r8,0x1
80002f12:	cf d1       	brne	80002f0c <usb_user_read_request+0x2c>
   Usb_reset_endpoint_fifo_access(EP_CONTROL);
80002f14:	30 06       	mov	r6,0
80002f16:	ea 16 d0 00 	orh	r6,0xd000

   LSB0(line_coding.dwDTERate) = Usb_read_endpoint_data(EP_CONTROL, 8);
   LSB1(line_coding.dwDTERate) = Usb_read_endpoint_data(EP_CONTROL, 8);
80002f1a:	30 2c       	mov	r12,2
80002f1c:	ea 1c d0 00 	orh	r12,0xd000
   LSB2(line_coding.dwDTERate) = Usb_read_endpoint_data(EP_CONTROL, 8);
   LSB3(line_coding.dwDTERate) = Usb_read_endpoint_data(EP_CONTROL, 8);
80002f20:	30 48       	mov	r8,4
80002f22:	ea 18 d0 00 	orh	r8,0xd000
   line_coding.bCharFormat = Usb_read_endpoint_data(EP_CONTROL, 8);
80002f26:	30 59       	mov	r9,5
80002f28:	ea 19 d0 00 	orh	r9,0xd000
void cdc_set_line_coding (void)
{
   Usb_ack_setup_received_free();

   while(!Is_usb_control_out_received());
   Usb_reset_endpoint_fifo_access(EP_CONTROL);
80002f2c:	4d 3a       	lddpc	r10,80003078 <usb_user_read_request+0x198>

   LSB0(line_coding.dwDTERate) = Usb_read_endpoint_data(EP_CONTROL, 8);
80002f2e:	30 1e       	mov	lr,1
80002f30:	ea 1e d0 00 	orh	lr,0xd000
   LSB1(line_coding.dwDTERate) = Usb_read_endpoint_data(EP_CONTROL, 8);
   LSB2(line_coding.dwDTERate) = Usb_read_endpoint_data(EP_CONTROL, 8);
   LSB3(line_coding.dwDTERate) = Usb_read_endpoint_data(EP_CONTROL, 8);
   line_coding.bCharFormat = Usb_read_endpoint_data(EP_CONTROL, 8);
80002f34:	95 09       	st.w	r10[0x0],r9
   while(!Is_usb_control_out_received());
   Usb_reset_endpoint_fifo_access(EP_CONTROL);

   LSB0(line_coding.dwDTERate) = Usb_read_endpoint_data(EP_CONTROL, 8);
   LSB1(line_coding.dwDTERate) = Usb_read_endpoint_data(EP_CONTROL, 8);
   LSB2(line_coding.dwDTERate) = Usb_read_endpoint_data(EP_CONTROL, 8);
80002f36:	30 3b       	mov	r11,3
80002f38:	ea 1b d0 00 	orh	r11,0xd000
   Usb_ack_setup_received_free();

   while(!Is_usb_control_out_received());
   Usb_reset_endpoint_fifo_access(EP_CONTROL);

   LSB0(line_coding.dwDTERate) = Usb_read_endpoint_data(EP_CONTROL, 8);
80002f3c:	0d 85       	ld.ub	r5,r6[0x0]
   LSB1(line_coding.dwDTERate) = Usb_read_endpoint_data(EP_CONTROL, 8);
80002f3e:	1d 83       	ld.ub	r3,lr[0x0]
   LSB2(line_coding.dwDTERate) = Usb_read_endpoint_data(EP_CONTROL, 8);
80002f40:	19 86       	ld.ub	r6,r12[0x0]
   LSB3(line_coding.dwDTERate) = Usb_read_endpoint_data(EP_CONTROL, 8);
80002f42:	17 82       	ld.ub	r2,r11[0x0]
   line_coding.bCharFormat = Usb_read_endpoint_data(EP_CONTROL, 8);
80002f44:	11 8c       	ld.ub	r12,r8[0x0]
   line_coding.bParityType = Usb_read_endpoint_data(EP_CONTROL, 8);
80002f46:	30 68       	mov	r8,6
80002f48:	ea 18 d0 00 	orh	r8,0xd000
80002f4c:	13 8b       	ld.ub	r11,r9[0x0]
   line_coding.bDataBits = Usb_read_endpoint_data(EP_CONTROL, 8);
   Usb_ack_control_out_received_free();
80002f4e:	fe 6e 01 60 	mov	lr,-130720
   LSB1(line_coding.dwDTERate) = Usb_read_endpoint_data(EP_CONTROL, 8);
   LSB2(line_coding.dwDTERate) = Usb_read_endpoint_data(EP_CONTROL, 8);
   LSB3(line_coding.dwDTERate) = Usb_read_endpoint_data(EP_CONTROL, 8);
   line_coding.bCharFormat = Usb_read_endpoint_data(EP_CONTROL, 8);
   line_coding.bParityType = Usb_read_endpoint_data(EP_CONTROL, 8);
   line_coding.bDataBits = Usb_read_endpoint_data(EP_CONTROL, 8);
80002f52:	11 89       	ld.ub	r9,r8[0x0]
   Usb_ack_control_out_received_free();
80002f54:	30 28       	mov	r8,2
80002f56:	9d 08       	st.w	lr[0x0],r8
   LSB0(line_coding.dwDTERate) = Usb_read_endpoint_data(EP_CONTROL, 8);
   LSB1(line_coding.dwDTERate) = Usb_read_endpoint_data(EP_CONTROL, 8);
   LSB2(line_coding.dwDTERate) = Usb_read_endpoint_data(EP_CONTROL, 8);
   LSB3(line_coding.dwDTERate) = Usb_read_endpoint_data(EP_CONTROL, 8);
   line_coding.bCharFormat = Usb_read_endpoint_data(EP_CONTROL, 8);
   line_coding.bParityType = Usb_read_endpoint_data(EP_CONTROL, 8);
80002f58:	16 97       	mov	r7,r11
   Usb_ack_setup_received_free();

   while(!Is_usb_control_out_received());
   Usb_reset_endpoint_fifo_access(EP_CONTROL);

   LSB0(line_coding.dwDTERate) = Usb_read_endpoint_data(EP_CONTROL, 8);
80002f5a:	4c 9b       	lddpc	r11,8000307c <usb_user_read_request+0x19c>
   LSB1(line_coding.dwDTERate) = Usb_read_endpoint_data(EP_CONTROL, 8);
   LSB2(line_coding.dwDTERate) = Usb_read_endpoint_data(EP_CONTROL, 8);
   LSB3(line_coding.dwDTERate) = Usb_read_endpoint_data(EP_CONTROL, 8);
   line_coding.bCharFormat = Usb_read_endpoint_data(EP_CONTROL, 8);
   line_coding.bParityType = Usb_read_endpoint_data(EP_CONTROL, 8);
   line_coding.bDataBits = Usb_read_endpoint_data(EP_CONTROL, 8);
80002f5c:	b6 e9       	st.b	r11[0x6],r9
   Usb_ack_setup_received_free();

   while(!Is_usb_control_out_received());
   Usb_reset_endpoint_fifo_access(EP_CONTROL);

   LSB0(line_coding.dwDTERate) = Usb_read_endpoint_data(EP_CONTROL, 8);
80002f5e:	b6 b5       	st.b	r11[0x3],r5
   LSB1(line_coding.dwDTERate) = Usb_read_endpoint_data(EP_CONTROL, 8);
80002f60:	b6 a3       	st.b	r11[0x2],r3
   LSB2(line_coding.dwDTERate) = Usb_read_endpoint_data(EP_CONTROL, 8);
80002f62:	b6 96       	st.b	r11[0x1],r6
   LSB3(line_coding.dwDTERate) = Usb_read_endpoint_data(EP_CONTROL, 8);
80002f64:	b6 82       	st.b	r11[0x0],r2
   line_coding.bCharFormat = Usb_read_endpoint_data(EP_CONTROL, 8);
80002f66:	b6 cc       	st.b	r11[0x4],r12
   line_coding.bParityType = Usb_read_endpoint_data(EP_CONTROL, 8);
80002f68:	b6 d7       	st.b	r11[0x5],r7
   line_coding.bDataBits = Usb_read_endpoint_data(EP_CONTROL, 8);
80002f6a:	12 94       	mov	r4,r9
80002f6c:	30 78       	mov	r8,7
80002f6e:	ea 18 d0 00 	orh	r8,0xd000
   Usb_ack_control_out_received_free();

   Usb_ack_control_in_ready_send();
80002f72:	30 19       	mov	r9,1
   LSB1(line_coding.dwDTERate) = Usb_read_endpoint_data(EP_CONTROL, 8);
   LSB2(line_coding.dwDTERate) = Usb_read_endpoint_data(EP_CONTROL, 8);
   LSB3(line_coding.dwDTERate) = Usb_read_endpoint_data(EP_CONTROL, 8);
   line_coding.bCharFormat = Usb_read_endpoint_data(EP_CONTROL, 8);
   line_coding.bParityType = Usb_read_endpoint_data(EP_CONTROL, 8);
   line_coding.bDataBits = Usb_read_endpoint_data(EP_CONTROL, 8);
80002f74:	95 08       	st.w	r10[0x0],r8
   Usb_ack_control_out_received_free();

   Usb_ack_control_in_ready_send();
80002f76:	9d 09       	st.w	lr[0x0],r9
   while (!Is_usb_control_in_ready());
80002f78:	fe 69 01 30 	mov	r9,-130768
80002f7c:	72 08       	ld.w	r8,r9[0x0]
80002f7e:	ed b8 00 00 	bld	r8,0x0
80002f82:	cf d1       	brne	80002f7c <usb_user_read_request+0x9c>
   // Set the baudrate of the USART
   {
      static usart_options_t dbg_usart_options;
      U32 stopbits, parity;

      if     ( line_coding.bCharFormat==0 )   stopbits = USART_1_STOPBIT;
80002f84:	58 0c       	cp.w	r12,0
80002f86:	c6 b1       	brne	8000305c <usb_user_read_request+0x17c>
      else if( line_coding.bCharFormat==1 )   stopbits = USART_1_5_STOPBITS;
      else                                    stopbits = USART_2_STOPBITS;

      if     ( line_coding.bParityType==0 )   parity = USART_NO_PARITY;
80002f88:	58 07       	cp.w	r7,0
80002f8a:	c7 00       	breq	8000306a <usb_user_read_request+0x18a>
      else if( line_coding.bParityType==1 )   parity = USART_ODD_PARITY;
80002f8c:	30 18       	mov	r8,1
80002f8e:	f0 07 18 00 	cp.b	r7,r8
80002f92:	c6 e0       	breq	8000306e <usb_user_read_request+0x18e>
      else if( line_coding.bParityType==2 )   parity = USART_EVEN_PARITY;
80002f94:	30 28       	mov	r8,2
80002f96:	f0 07 18 00 	cp.b	r7,r8
80002f9a:	c6 c0       	breq	80003072 <usb_user_read_request+0x192>
      else if( line_coding.bParityType==3 )   parity = USART_MARK_PARITY;
80002f9c:	58 37       	cp.w	r7,3
80002f9e:	f9 ba 00 03 	moveq	r10,3
80002fa2:	f9 ba 01 02 	movne	r10,2
      else                                    parity = USART_SPACE_PARITY;

      // Options for debug USART.
      dbg_usart_options.baudrate    = line_coding.dwDTERate;
80002fa6:	76 08       	ld.w	r8,r11[0x0]
80002fa8:	4b 69       	lddpc	r9,80003080 <usb_user_read_request+0x1a0>
80002faa:	93 08       	st.w	r9[0x0],r8
      dbg_usart_options.charlength  = line_coding.bDataBits;
      dbg_usart_options.paritytype  = parity;
      dbg_usart_options.stopbits    = stopbits;
80002fac:	b2 3c       	st.h	r9[0x6],r12
      dbg_usart_options.channelmode = USART_NORMAL_CHMODE;
80002fae:	30 08       	mov	r8,0
      else if( line_coding.bParityType==3 )   parity = USART_MARK_PARITY;
      else                                    parity = USART_SPACE_PARITY;

      // Options for debug USART.
      dbg_usart_options.baudrate    = line_coding.dwDTERate;
      dbg_usart_options.charlength  = line_coding.bDataBits;
80002fb0:	b2 c4       	st.b	r9[0x4],r4
      dbg_usart_options.paritytype  = parity;
80002fb2:	b2 da       	st.b	r9[0x5],r10
      dbg_usart_options.stopbits    = stopbits;
      dbg_usart_options.channelmode = USART_NORMAL_CHMODE;
80002fb4:	f3 68 00 08 	st.b	r9[8],r8
80002fb8:	e3 cf 90 fc 	ldm	sp++,r2-r7,pc,r12=1
   }
}

void cdc_set_control_line_state (void)
{
   Usb_ack_setup_received_free();
80002fbc:	fe 68 01 60 	mov	r8,-130720
80002fc0:	30 49       	mov	r9,4
80002fc2:	91 09       	st.w	r8[0x0],r9
   Usb_ack_control_in_ready_send();
80002fc4:	30 1a       	mov	r10,1
   while (!Is_usb_control_in_ready());
80002fc6:	fe 69 01 30 	mov	r9,-130768
}

void cdc_set_control_line_state (void)
{
   Usb_ack_setup_received_free();
   Usb_ack_control_in_ready_send();
80002fca:	91 0a       	st.w	r8[0x0],r10
   while (!Is_usb_control_in_ready());
80002fcc:	72 08       	ld.w	r8,r9[0x0]
80002fce:	ed b8 00 00 	bld	r8,0x0
80002fd2:	cf d1       	brne	80002fcc <usb_user_read_request+0xec>
80002fd4:	e3 cf 90 fc 	ldm	sp++,r2-r7,pc,r12=1
  return FALSE;
}

void cdc_get_line_coding(void)
{
   Usb_ack_setup_received_free();
80002fd8:	fe 6c 01 60 	mov	r12,-130720
80002fdc:	30 48       	mov	r8,4
80002fde:	99 08       	st.w	r12[0x0],r8

   Usb_reset_endpoint_fifo_access(EP_CONTROL);
   Usb_write_endpoint_data(EP_CONTROL, 8, LSB0(line_coding.dwDTERate));
80002fe0:	4a 79       	lddpc	r9,8000307c <usb_user_read_request+0x19c>
80002fe2:	30 08       	mov	r8,0
80002fe4:	ea 18 d0 00 	orh	r8,0xd000
80002fe8:	13 ba       	ld.ub	r10,r9[0x3]
80002fea:	b0 8a       	st.b	r8[0x0],r10
   Usb_write_endpoint_data(EP_CONTROL, 8, LSB1(line_coding.dwDTERate));
80002fec:	30 18       	mov	r8,1
80002fee:	ea 18 d0 00 	orh	r8,0xd000
80002ff2:	13 ab       	ld.ub	r11,r9[0x2]
80002ff4:	b0 8b       	st.b	r8[0x0],r11
   Usb_write_endpoint_data(EP_CONTROL, 8, LSB2(line_coding.dwDTERate));
80002ff6:	30 28       	mov	r8,2
80002ff8:	ea 18 d0 00 	orh	r8,0xd000
80002ffc:	13 9a       	ld.ub	r10,r9[0x1]
80002ffe:	b0 8a       	st.b	r8[0x0],r10
   Usb_write_endpoint_data(EP_CONTROL, 8, LSB3(line_coding.dwDTERate));
80003000:	30 38       	mov	r8,3
80003002:	ea 18 d0 00 	orh	r8,0xd000
80003006:	13 8b       	ld.ub	r11,r9[0x0]
80003008:	b0 8b       	st.b	r8[0x0],r11
   Usb_write_endpoint_data(EP_CONTROL, 8, line_coding.bCharFormat);
8000300a:	30 48       	mov	r8,4
8000300c:	ea 18 d0 00 	orh	r8,0xd000
80003010:	13 ca       	ld.ub	r10,r9[0x4]
80003012:	b0 8a       	st.b	r8[0x0],r10
   Usb_write_endpoint_data(EP_CONTROL, 8, line_coding.bParityType);
80003014:	30 58       	mov	r8,5
80003016:	ea 18 d0 00 	orh	r8,0xd000
8000301a:	13 db       	ld.ub	r11,r9[0x5]
8000301c:	b0 8b       	st.b	r8[0x0],r11
8000301e:	30 68       	mov	r8,6
80003020:	ea 18 d0 00 	orh	r8,0xd000
   Usb_write_endpoint_data(EP_CONTROL, 8, line_coding.bDataBits  );
80003024:	13 ea       	ld.ub	r10,r9[0x6]
80003026:	b0 8a       	st.b	r8[0x0],r10

   Usb_ack_control_in_ready_send();
80003028:	30 19       	mov	r9,1
   Usb_write_endpoint_data(EP_CONTROL, 8, LSB1(line_coding.dwDTERate));
   Usb_write_endpoint_data(EP_CONTROL, 8, LSB2(line_coding.dwDTERate));
   Usb_write_endpoint_data(EP_CONTROL, 8, LSB3(line_coding.dwDTERate));
   Usb_write_endpoint_data(EP_CONTROL, 8, line_coding.bCharFormat);
   Usb_write_endpoint_data(EP_CONTROL, 8, line_coding.bParityType);
   Usb_write_endpoint_data(EP_CONTROL, 8, line_coding.bDataBits  );
8000302a:	30 7b       	mov	r11,7
8000302c:	ea 1b d0 00 	orh	r11,0xd000
80003030:	49 28       	lddpc	r8,80003078 <usb_user_read_request+0x198>
80003032:	91 0b       	st.w	r8[0x0],r11

   Usb_ack_control_in_ready_send();
80003034:	99 09       	st.w	r12[0x0],r9
   while (!Is_usb_control_in_ready());
80003036:	fe 69 01 30 	mov	r9,-130768
8000303a:	72 08       	ld.w	r8,r9[0x0]
8000303c:	ed b8 00 00 	bld	r8,0x0
80003040:	cf d1       	brne	8000303a <usb_user_read_request+0x15a>

   while(!Is_usb_control_out_received());
80003042:	fe 69 01 30 	mov	r9,-130768
80003046:	72 08       	ld.w	r8,r9[0x0]
80003048:	ed b8 00 01 	bld	r8,0x1
8000304c:	cf d1       	brne	80003046 <usb_user_read_request+0x166>
   Usb_ack_control_out_received_free();
8000304e:	30 29       	mov	r9,2
80003050:	fe 68 01 60 	mov	r8,-130720
80003054:	30 1c       	mov	r12,1
80003056:	91 09       	st.w	r8[0x0],r9
80003058:	e3 cd 80 fc 	ldm	sp++,r2-r7,pc
   {
      static usart_options_t dbg_usart_options;
      U32 stopbits, parity;

      if     ( line_coding.bCharFormat==0 )   stopbits = USART_1_STOPBIT;
      else if( line_coding.bCharFormat==1 )   stopbits = USART_1_5_STOPBITS;
8000305c:	58 1c       	cp.w	r12,1
8000305e:	f9 bc 00 01 	moveq	r12,1
80003062:	f9 bc 01 02 	movne	r12,2
      else                                    stopbits = USART_2_STOPBITS;

      if     ( line_coding.bParityType==0 )   parity = USART_NO_PARITY;
80003066:	58 07       	cp.w	r7,0
80003068:	c9 21       	brne	80002f8c <usb_user_read_request+0xac>
8000306a:	30 4a       	mov	r10,4
8000306c:	c9 db       	rjmp	80002fa6 <usb_user_read_request+0xc6>
      else if( line_coding.bParityType==1 )   parity = USART_ODD_PARITY;
8000306e:	30 1a       	mov	r10,1
80003070:	c9 bb       	rjmp	80002fa6 <usb_user_read_request+0xc6>
      else if( line_coding.bParityType==2 )   parity = USART_EVEN_PARITY;
80003072:	30 0a       	mov	r10,0
80003074:	c9 9b       	rjmp	80002fa6 <usb_user_read_request+0xc6>
80003076:	d7 03       	nop
80003078:	00 00       	add	r0,r0
8000307a:	06 6c       	and	r12,r3
8000307c:	00 00       	add	r0,r0
8000307e:	06 98       	mov	r8,r3
80003080:	00 00       	add	r0,r0
80003082:	05 3c       	ld.ub	r12,r2++

80003084 <concordia>:

#include <avr32/io.h>
#include "compiler.h"

void concordia(int ia, int ib, int ic, int *ialpha ,int *ibeta)
{
80003084:	eb cd 40 60 	pushm	r5-r6,lr
  int ibc;
  
  
  // ialpha=sqrt(2/3)(ia-0.5ib-0.5ic)
  //ibeta=1/sqrt(2) (ib-ic)
  ibc=ib-ic;
80003088:	f6 0a 01 0e 	sub	lr,r11,r10
  *ibeta=(ibc>>1)-(ibc>>5)+(ibc>>2);
  ibc=ia-(ib>>1)-(ic>>1);
8000308c:	a1 5a       	asr	r10,0x1
  
  
  // ialpha=sqrt(2/3)(ia-0.5ib-0.5ic)
  //ibeta=1/sqrt(2) (ib-ic)
  ibc=ib-ic;
  *ibeta=(ibc>>1)-(ibc>>5)+(ibc>>2);
8000308e:	fc 05 14 05 	asr	r5,lr,0x5
80003092:	fc 06 14 02 	asr	r6,lr,0x2
80003096:	a1 5e       	asr	lr,0x1
80003098:	1c 06       	add	r6,lr
8000309a:	ec 05 01 05 	sub	r5,r6,r5
8000309e:	91 05       	st.w	r8[0x0],r5
  ibc=ia-(ib>>1)-(ic>>1);
800030a0:	a1 5b       	asr	r11,0x1
800030a2:	16 1c       	sub	r12,r11
800030a4:	14 1c       	sub	r12,r10
  *ialpha=(ibc>>1)+(ibc>>2)+(ibc>>4);
800030a6:	f8 0a 14 04 	asr	r10,r12,0x4
800030aa:	f8 08 14 02 	asr	r8,r12,0x2
800030ae:	a1 5c       	asr	r12,0x1
800030b0:	18 08       	add	r8,r12
800030b2:	14 08       	add	r8,r10
800030b4:	93 08       	st.w	r9[0x0],r8
}
800030b6:	e3 cd 80 60 	ldm	sp++,r5-r6,pc
800030ba:	d7 03       	nop

800030bc <hall_estimator_update_teta_and_speed>:
volatile unsigned short teta0=0;
volatile U32 hall_tj;
volatile U32 hall_ti;                //!<  last hall period value

void hall_estimator_update_teta_and_speed(volatile unsigned short *teta_elec, volatile unsigned short *vitesse_elec)
{
800030bc:	eb cd 40 c0 	pushm	r6-r7,lr
   nieme++;
800030c0:	49 47       	lddpc	r7,80003110 <hall_estimator_update_teta_and_speed+0x54>
   // 180*Fcpu*100e-6
  *teta_elec=(unsigned short)((U32)(vitesse_inst*1*nieme)/(U32)hall_demi_period);
800030c2:	ec 7a 2f 00 	mov	r10,864000
volatile U32 hall_tj;
volatile U32 hall_ti;                //!<  last hall period value

void hall_estimator_update_teta_and_speed(volatile unsigned short *teta_elec, volatile unsigned short *vitesse_elec)
{
   nieme++;
800030c6:	8e 08       	ld.sh	r8,r7[0x0]
800030c8:	f0 ca ff ff 	sub	r10,r8,-1
800030cc:	ae 08       	st.h	r7[0x0],r8
volatile unsigned short teta0=0;
volatile U32 hall_tj;
volatile U32 hall_ti;                //!<  last hall period value

void hall_estimator_update_teta_and_speed(volatile unsigned short *teta_elec, volatile unsigned short *vitesse_elec)
{
800030ce:	18 9e       	mov	lr,r12
   nieme++;
   // 180*Fcpu*100e-6
  *teta_elec=(unsigned short)((U32)(vitesse_inst*1*nieme)/(U32)hall_demi_period);
800030d0:	8e 09       	ld.sh	r9,r7[0x0]
800030d2:	49 16       	lddpc	r6,80003114 <hall_estimator_update_teta_and_speed+0x58>
800030d4:	5c 79       	castu.h	r9
800030d6:	6c 0c       	ld.w	r12,r6[0x0]
800030d8:	b5 39       	mul	r9,r10
800030da:	f2 0c 0d 08 	divu	r8,r9,r12
800030de:	bc 0a       	st.h	lr[0x0],r10
volatile unsigned short teta0=0;
volatile U32 hall_tj;
volatile U32 hall_ti;                //!<  last hall period value

void hall_estimator_update_teta_and_speed(volatile unsigned short *teta_elec, volatile unsigned short *vitesse_elec)
{
800030e0:	16 9c       	mov	r12,r11
   nieme++;
   // 180*Fcpu*100e-6
  *teta_elec=(unsigned short)((U32)(vitesse_inst*1*nieme)/(U32)hall_demi_period);
  if(*teta_elec>360)
800030e2:	9c 08       	ld.sh	r8,lr[0x0]
800030e4:	e0 69 01 68 	mov	r9,360
800030e8:	f2 08 19 00 	cp.h	r8,r9
800030ec:	e0 88 00 05 	brls	800030f6 <hall_estimator_update_teta_and_speed+0x3a>
  {
    *teta_elec=360;
800030f0:	bc 09       	st.h	lr[0x0],r9
    nieme=0; 
800030f2:	30 08       	mov	r8,0
800030f4:	ae 08       	st.h	r7[0x0],r8
  }
  *vitesse_elec=pi_Fcpu/hall_demi_period;  //pi*Fcpu  (Fcpu=48Mhz)      
800030f6:	6c 08       	ld.w	r8,r6[0x0]
800030f8:	e0 6b f8 9f 	mov	r11,63647
800030fc:	ea 1b 08 fc 	orh	r11,0x8fc
80003100:	f6 08 0d 0a 	divu	r10,r11,r8
80003104:	f3 da b0 10 	bfexts	r9,r10,0x0,0x10
80003108:	b8 09       	st.h	r12[0x0],r9
}
8000310a:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000310e:	d7 03       	nop
80003110:	00 00       	add	r0,r0
80003112:	05 4a       	ld.w	r10,--r2
80003114:	00 00       	add	r0,r0
80003116:	00 1c       	sub	r12,r0

80003118 <hall_estimator_init_teta>:
        first_interrupt=1;
      }
   }
}
void hall_estimator_init_teta(volatile unsigned short teta)
{
80003118:	20 1d       	sub	sp,4
    nieme = (int)(((teta*hall_demi_period)/vitesse_inst)+2);
8000311a:	48 aa       	lddpc	r10,80003140 <hall_estimator_init_teta+0x28>
        first_interrupt=1;
      }
   }
}
void hall_estimator_init_teta(volatile unsigned short teta)
{
8000311c:	ba 0c       	st.h	sp[0x0],r12
    nieme = (int)(((teta*hall_demi_period)/vitesse_inst)+2);
8000311e:	9a 09       	ld.sh	r9,sp[0x0]
80003120:	74 0b       	ld.w	r11,r10[0x0]
80003122:	e0 6a b0 6f 	mov	r10,45167
80003126:	ea 1a 01 36 	orh	r10,0x136
8000312a:	5c 79       	castu.h	r9
8000312c:	b7 39       	mul	r9,r11
8000312e:	a9 89       	lsr	r9,0x8
80003130:	f2 0a 06 48 	mulu.d	r8,r9,r10
80003134:	48 4a       	lddpc	r10,80003144 <hall_estimator_init_teta+0x2c>
80003136:	a5 89       	lsr	r9,0x4
80003138:	2f e9       	sub	r9,-2
8000313a:	b4 09       	st.h	r10[0x0],r9
}
8000313c:	2f fd       	sub	sp,-4
8000313e:	5e fc       	retal	r12
80003140:	00 00       	add	r0,r0
80003142:	00 1c       	sub	r12,r0
80003144:	00 00       	add	r0,r0
80003146:	05 4a       	ld.w	r10,--r2

80003148 <hall_estimator_init>:
/*! \name Initialization function
 */
//! @{
void hall_estimator_init(void)
{
    nieme = 0;
80003148:	30 09       	mov	r9,0
8000314a:	48 28       	lddpc	r8,80003150 <hall_estimator_init+0x8>
8000314c:	b0 09       	st.h	r8[0x0],r9
}
8000314e:	5e fc       	retal	r12
80003150:	00 00       	add	r0,r0
80003152:	05 4a       	ld.w	r10,--r2

80003154 <hall_estimator_stop>:
//------------------------------------------------------------------------------
/*! \name Stop function
 */
//! @{
void hall_estimator_stop(void)
{
80003154:	d4 01       	pushm	lr
    gpio_disable_pin_interrupt(HALL_1_PIN);	// HALL_1_PIN
80003156:	32 0c       	mov	r12,32
80003158:	e0 a0 0d 24 	rcall	80004ba0 <gpio_disable_pin_interrupt>
}
8000315c:	d8 02       	popm	pc
8000315e:	d7 03       	nop

80003160 <hall_estimator_start>:
//------------------------------------------------------------------------------
/*! \name Start function
 */
//! @{
void hall_estimator_start(void)
{
80003160:	d4 01       	pushm	lr
    gpio_enable_pin_pull_up(HALL_1_PIN );	// HALL_1_PIN 
80003162:	32 0c       	mov	r12,32
80003164:	e0 a0 0c f0 	rcall	80004b44 <gpio_enable_pin_pull_up>
    gpio_enable_pin_interrupt(HALL_1_PIN , GPIO_PIN_CHANGE);	// HALL_1_PIN
80003168:	30 0b       	mov	r11,0
8000316a:	32 0c       	mov	r12,32
8000316c:	e0 a0 0c f6 	rcall	80004b58 <gpio_enable_pin_interrupt>
    hall_ti = Get_sys_count();
80003170:	e1 b9 00 42 	mfsr	r9,0x108
80003174:	48 38       	lddpc	r8,80003180 <hall_estimator_start+0x20>
80003176:	91 09       	st.w	r8[0x0],r9
    nieme = 0;
80003178:	30 0a       	mov	r10,0
8000317a:	48 38       	lddpc	r8,80003184 <hall_estimator_start+0x24>
8000317c:	b0 0a       	st.h	r8[0x0],r10
}
8000317e:	d8 02       	popm	pc
80003180:	00 00       	add	r0,r0
80003182:	06 a0       	st.w	r3++,r0
80003184:	00 00       	add	r0,r0
80003186:	05 4a       	ld.w	r10,--r2

80003188 <hall_estimator_init_interrupt>:
//------------------------------------------------------------------------------
/*! \name Interrupt intitialization function
 */
//! @{
void hall_estimator_init_interrupt(void)
{
80003188:	d4 01       	pushm	lr
    INTC_register_interrupt(&hall_int_handler, HALL_GPIO_IRQ+HALL_1_PIN/8, AVR32_INTC_INT0);
8000318a:	30 0a       	mov	r10,0
8000318c:	34 4b       	mov	r11,68
8000318e:	fe cc ff f6 	sub	r12,pc,-10
80003192:	e0 a0 0d df 	rcall	80004d50 <INTC_register_interrupt>
}
80003196:	d8 02       	popm	pc

80003198 <hall_int_handler>:
__attribute__((__interrupt__)) void hall_int_handler( void )
#elif __ICCAVR32__
/* TC Interrupt  */
__interrupt void hall_int_handler( void )
#endif
{	
80003198:	d4 01       	pushm	lr
   // determine hall period
  if(gpio_get_pin_interrupt_flag(HALL_1_PIN))
8000319a:	32 0c       	mov	r12,32
8000319c:	e0 a0 0d 0c 	rcall	80004bb4 <gpio_get_pin_interrupt_flag>
800031a0:	c0 31       	brne	800031a6 <hall_int_handler+0xe>
      else
      {
        first_interrupt=1;
      }
   }
}
800031a2:	d4 02       	popm	lr
800031a4:	d6 03       	rete
#endif
{	
   // determine hall period
  if(gpio_get_pin_interrupt_flag(HALL_1_PIN))
  {
     hall_tj= Get_sys_count();
800031a6:	e1 b8 00 42 	mfsr	r8,0x108
800031aa:	48 eb       	lddpc	r11,800031e0 <hall_int_handler+0x48>
     hall_demi_period = hall_tj - hall_ti;
800031ac:	48 ec       	lddpc	r12,800031e4 <hall_int_handler+0x4c>
#endif
{	
   // determine hall period
  if(gpio_get_pin_interrupt_flag(HALL_1_PIN))
  {
     hall_tj= Get_sys_count();
800031ae:	97 08       	st.w	r11[0x0],r8
     hall_demi_period = hall_tj - hall_ti;
800031b0:	76 08       	ld.w	r8,r11[0x0]
800031b2:	78 09       	ld.w	r9,r12[0x0]
800031b4:	48 da       	lddpc	r10,800031e8 <hall_int_handler+0x50>
800031b6:	12 18       	sub	r8,r9
800031b8:	95 08       	st.w	r10[0x0],r8
     hall_ti = hall_tj; // arm for next period     
800031ba:	76 09       	ld.w	r9,r11[0x0]
800031bc:	99 09       	st.w	r12[0x0],r9
     gpio_clear_pin_interrupt_flag(HALL_1_PIN);   //PB0
800031be:	32 0c       	mov	r12,32
800031c0:	e0 a0 0d 06 	rcall	80004bcc <gpio_clear_pin_interrupt_flag>
  
      if (first_interrupt)
800031c4:	48 aa       	lddpc	r10,800031ec <hall_int_handler+0x54>
800031c6:	94 08       	ld.sh	r8,r10[0x0]
800031c8:	58 08       	cp.w	r8,0
800031ca:	c0 51       	brne	800031d4 <hall_int_handler+0x3c>
        nieme=0;
        first_interrupt=0;
      }
      else
      {
        first_interrupt=1;
800031cc:	30 18       	mov	r8,1
800031ce:	b4 08       	st.h	r10[0x0],r8
      }
   }
}
800031d0:	d4 02       	popm	lr
800031d2:	d6 03       	rete
     hall_ti = hall_tj; // arm for next period     
     gpio_clear_pin_interrupt_flag(HALL_1_PIN);   //PB0
  
      if (first_interrupt)
      {
        nieme=0;
800031d4:	30 09       	mov	r9,0
800031d6:	48 78       	lddpc	r8,800031f0 <hall_int_handler+0x58>
800031d8:	b0 09       	st.h	r8[0x0],r9
        first_interrupt=0;
800031da:	b4 09       	st.h	r10[0x0],r9
      else
      {
        first_interrupt=1;
      }
   }
}
800031dc:	d4 02       	popm	lr
800031de:	d6 03       	rete
800031e0:	00 00       	add	r0,r0
800031e2:	06 a4       	st.w	r3++,r4
800031e4:	00 00       	add	r0,r0
800031e6:	06 a0       	st.w	r3++,r0
800031e8:	00 00       	add	r0,r0
800031ea:	00 1c       	sub	r12,r0
800031ec:	00 00       	add	r0,r0
800031ee:	05 48       	ld.w	r8,--r2
800031f0:	00 00       	add	r0,r0
800031f2:	05 4a       	ld.w	r10,--r2

800031f4 <pwm_drv_start>:
  pwm->channel[PWM_ZL_PWM_CHANNEL].cdty= pwm_drv_options->max_pwm_value - 10; // duty cycle, should be < CPRD
}
void pwm_drv_start(void)
{
  volatile avr32_pwm_t *pwm = &AVR32_PWM;
  pwm->ier = (1<<PWM_XL_PWM_CHANNEL );
800031f4:	fe 78 30 00 	mov	r8,-53248
800031f8:	30 49       	mov	r9,4
800031fa:	91 49       	st.w	r8[0x10],r9
  pwm->ena = (1<<PWM_XL_PWM_CHANNEL )|(1<<PWM_XH_PWM_CHANNEL )|(1<<PWM_YL_PWM_CHANNEL )|(1<<PWM_YH_PWM_CHANNEL )|(1<<PWM_ZL_PWM_CHANNEL )|(1<<PWM_ZH_PWM_CHANNEL ); // enable channel 0 to 6 
800031fc:	37 7a       	mov	r10,119
800031fe:	91 1a       	st.w	r8[0x4],r10
}
80003200:	5e fc       	retal	r12

80003202 <pwm_drv_stop>:
void pwm_drv_stop(void)
{
}
80003202:	5e fc       	retal	r12

80003204 <pwm_drv_duty_cycle>:
//------------------------------------------------------------------------------
/*! \name PWM Driver Update
 */
//! @{
void pwm_drv_duty_cycle(volatile pwm_drv_options_t *pwm_drv_options,U32 pwm0,U32 pwm1,U32 pwm2,U32 pwm3,U32 pwm4,U32 pwm5)
{
80003204:	eb cd 40 6c 	pushm	r2-r3,r5-r6,lr
  volatile avr32_pwm_t *pwm = &AVR32_PWM;

  pwm->channel[PWM_XH_PWM_CHANNEL].cupd= pwm_drv_options->max_pwm_value - pwm0;
80003208:	fe 76 30 00 	mov	r6,-53248
8000320c:	78 0e       	ld.w	lr,r12[0x0]
//------------------------------------------------------------------------------
/*! \name PWM Driver Update
 */
//! @{
void pwm_drv_duty_cycle(volatile pwm_drv_options_t *pwm_drv_options,U32 pwm0,U32 pwm1,U32 pwm2,U32 pwm3,U32 pwm4,U32 pwm5)
{
8000320e:	fa c5 ff ec 	sub	r5,sp,-20
  volatile avr32_pwm_t *pwm = &AVR32_PWM;

  pwm->channel[PWM_XH_PWM_CHANNEL].cupd= pwm_drv_options->max_pwm_value - pwm0;
80003212:	16 1e       	sub	lr,r11
//------------------------------------------------------------------------------
/*! \name PWM Driver Update
 */
//! @{
void pwm_drv_duty_cycle(volatile pwm_drv_options_t *pwm_drv_options,U32 pwm0,U32 pwm1,U32 pwm2,U32 pwm3,U32 pwm4,U32 pwm5)
{
80003214:	6a 12       	ld.w	r2,r5[0x4]
80003216:	6a 03       	ld.w	r3,r5[0x0]
  volatile avr32_pwm_t *pwm = &AVR32_PWM;

  pwm->channel[PWM_XH_PWM_CHANNEL].cupd= pwm_drv_options->max_pwm_value - pwm0;
80003218:	ed 4e 02 10 	st.w	r6[528],lr
  pwm->channel[PWM_XL_PWM_CHANNEL].cupd= pwm_drv_options->max_pwm_value - pwm1;
8000321c:	78 0b       	ld.w	r11,r12[0x0]
8000321e:	14 1b       	sub	r11,r10
80003220:	ed 4b 02 50 	st.w	r6[592],r11
  pwm->channel[PWM_YH_PWM_CHANNEL].cupd= pwm_drv_options->max_pwm_value - pwm2;
80003224:	78 0a       	ld.w	r10,r12[0x0]
80003226:	12 1a       	sub	r10,r9
80003228:	ed 4a 02 30 	st.w	r6[560],r10
  pwm->channel[PWM_YL_PWM_CHANNEL].cupd= pwm_drv_options->max_pwm_value - pwm3;
8000322c:	78 09       	ld.w	r9,r12[0x0]
8000322e:	10 19       	sub	r9,r8
80003230:	ed 49 02 d0 	st.w	r6[720],r9
  pwm->channel[PWM_ZH_PWM_CHANNEL].cupd= pwm_drv_options->max_pwm_value - pwm4;
80003234:	78 08       	ld.w	r8,r12[0x0]
80003236:	06 18       	sub	r8,r3
80003238:	ed 48 02 90 	st.w	r6[656],r8
  pwm->channel[PWM_ZL_PWM_CHANNEL].cupd= pwm_drv_options->max_pwm_value - pwm5;
8000323c:	78 09       	ld.w	r9,r12[0x0]
8000323e:	04 19       	sub	r9,r2
80003240:	ed 49 02 b0 	st.w	r6[688],r9
}
80003244:	e3 cd 80 6c 	ldm	sp++,r2-r3,r5-r6,pc

80003248 <pwm_drv_init>:
//------------------------------------------------------------------------------
/*! \name Initialization function
 */
//! @{
void pwm_drv_init(volatile pwm_drv_options_t *pwm_drv_options)
{
80003248:	eb cd 40 40 	pushm	r6,lr
    {PWM_YH_PIN_NUMBER, PWM_YH_PWM_FUNCTION},
    {PWM_ZL_PIN_NUMBER, PWM_ZL_PWM_FUNCTION},
    {PWM_ZH_PIN_NUMBER, PWM_ZH_PWM_FUNCTION}
  };
  // Assign GPIO to PWM.
  gpio_enable_module(PWM_GPIO_MAP ,
8000324c:	30 6b       	mov	r11,6
//------------------------------------------------------------------------------
/*! \name Initialization function
 */
//! @{
void pwm_drv_init(volatile pwm_drv_options_t *pwm_drv_options)
{
8000324e:	18 96       	mov	r6,r12
    {PWM_YH_PIN_NUMBER, PWM_YH_PWM_FUNCTION},
    {PWM_ZL_PIN_NUMBER, PWM_ZL_PWM_FUNCTION},
    {PWM_ZH_PIN_NUMBER, PWM_ZH_PWM_FUNCTION}
  };
  // Assign GPIO to PWM.
  gpio_enable_module(PWM_GPIO_MAP ,
80003250:	4a 2c       	lddpc	r12,800032d8 <pwm_drv_init+0x90>
80003252:	e0 a0 0c c7 	rcall	80004be0 <gpio_enable_module>
                     sizeof(PWM_GPIO_MAP ) / sizeof(PWM_GPIO_MAP[0]));

  // set PWM mode register 
  pwm->mr =
80003256:	fe 79 30 00 	mov	r9,-53248
8000325a:	30 08       	mov	r8,0
8000325c:	93 08       	st.w	r9[0x0],r8
    (0<<AVR32_PWM_PREA) |
    (0<<AVR32_PWM_PREB)
    ;

  // channel XH_PWM_CHANNEL 
  pwm->channel[PWM_XH_PWM_CHANNEL].cmr=
8000325e:	e0 6c 01 00 	mov	r12,256
80003262:	f3 4c 02 00 	st.w	r9[512],r12
    (0<<AVR32_PWM_CMR_CPRE) | // MCK % 1 
    (1<<AVR32_PWM_CMR_CALG) | // center aligned 
    (0<<AVR32_PWM_CMR_CPOL) | // start with 0 
    (0<<AVR32_PWM_CMR_CPD)
    ;   // channel mode
  pwm->channel[PWM_XH_PWM_CHANNEL].cprd= pwm_drv_options->max_pwm_value; // channel period
80003266:	6c 0a       	ld.w	r10,r6[0x0]
80003268:	f3 4a 02 08 	st.w	r9[520],r10
  pwm->channel[PWM_XH_PWM_CHANNEL].cdty= pwm_drv_options->max_pwm_value - 10; // duty cycle, should be < CPRD
8000326c:	6c 08       	ld.w	r8,r6[0x0]
8000326e:	20 a8       	sub	r8,10
80003270:	f3 48 02 04 	st.w	r9[516],r8

  // channel XL_PWM_CHANNEL 
  pwm->channel[PWM_XL_PWM_CHANNEL].cmr=
80003274:	e0 6b 03 00 	mov	r11,768
80003278:	f3 4b 02 40 	st.w	r9[576],r11
    (0<<AVR32_PWM_CMR_CPRE) | // MCK % 1
    (1<<AVR32_PWM_CMR_CALG) | // center aligned 
    (1<<AVR32_PWM_CMR_CPOL) | // start with 1 
    (0<<AVR32_PWM_CMR_CPD)
    ;   // channel mode
  pwm->channel[PWM_XL_PWM_CHANNEL].cprd= pwm_drv_options->max_pwm_value; // channel period
8000327c:	6c 0a       	ld.w	r10,r6[0x0]
8000327e:	f3 4a 02 48 	st.w	r9[584],r10
  pwm->channel[PWM_XL_PWM_CHANNEL].cdty= pwm_drv_options->max_pwm_value - 10; // duty cycle, should be < CPRD
80003282:	6c 08       	ld.w	r8,r6[0x0]
80003284:	20 a8       	sub	r8,10
80003286:	f3 48 02 44 	st.w	r9[580],r8

  // channel YH_PWM_CHANNEL 
  pwm->channel[PWM_YH_PWM_CHANNEL].cmr=
8000328a:	f3 4c 02 20 	st.w	r9[544],r12
    (0<<AVR32_PWM_CMR_CPRE) | // MCK % 1 
    (1<<AVR32_PWM_CMR_CALG) | // center aligned 
    (0<<AVR32_PWM_CMR_CPOL) | // start with 0 
    (0<<AVR32_PWM_CMR_CPD)
    ;   // channel mode
  pwm->channel[PWM_YH_PWM_CHANNEL].cprd= pwm_drv_options->max_pwm_value; // channel period
8000328e:	6c 0a       	ld.w	r10,r6[0x0]
80003290:	f3 4a 02 28 	st.w	r9[552],r10
  pwm->channel[PWM_YH_PWM_CHANNEL].cdty= pwm_drv_options->max_pwm_value - 10; // duty cycle, should be < CPRD
80003294:	6c 08       	ld.w	r8,r6[0x0]
80003296:	20 a8       	sub	r8,10
80003298:	f3 48 02 24 	st.w	r9[548],r8

  // channel YL_PWM_CHANNEL 
  pwm->channel[PWM_YL_PWM_CHANNEL].cmr=
8000329c:	f3 4b 02 c0 	st.w	r9[704],r11
    (0<<AVR32_PWM_CMR_CPRE) | // MCK % 1
    (1<<AVR32_PWM_CMR_CALG) | // center aligned 
    (1<<AVR32_PWM_CMR_CPOL) | // start with 1 
    (0<<AVR32_PWM_CMR_CPD)
    ;   // channel mode
  pwm->channel[PWM_YL_PWM_CHANNEL].cprd= pwm_drv_options->max_pwm_value; // channel period
800032a0:	6c 0a       	ld.w	r10,r6[0x0]
800032a2:	f3 4a 02 c8 	st.w	r9[712],r10
  pwm->channel[PWM_YL_PWM_CHANNEL].cdty= pwm_drv_options->max_pwm_value - 10; // duty cycle, should be < CPRD
800032a6:	6c 08       	ld.w	r8,r6[0x0]
800032a8:	20 a8       	sub	r8,10
800032aa:	f3 48 02 c4 	st.w	r9[708],r8

  // channel ZH_PWM_CHANNEL 
  pwm->channel[PWM_ZH_PWM_CHANNEL].cmr=
800032ae:	f3 4c 02 80 	st.w	r9[640],r12
    (0<<AVR32_PWM_CMR_CPRE) | // MCK % 1 
    (1<<AVR32_PWM_CMR_CALG) | // center aligned 
    (0<<AVR32_PWM_CMR_CPOL) | // start with 0 
    (0<<AVR32_PWM_CMR_CPD)
    ;   // channel mode
  pwm->channel[PWM_ZH_PWM_CHANNEL].cprd= pwm_drv_options->max_pwm_value; // channel period
800032b2:	6c 0a       	ld.w	r10,r6[0x0]
800032b4:	f3 4a 02 88 	st.w	r9[648],r10
  pwm->channel[PWM_ZH_PWM_CHANNEL].cdty= pwm_drv_options->max_pwm_value - 10; // duty cycle, should be < CPRD
800032b8:	6c 08       	ld.w	r8,r6[0x0]
800032ba:	20 a8       	sub	r8,10
800032bc:	f3 48 02 84 	st.w	r9[644],r8

  // channel ZL_PWM_CHANNEL 
  pwm->channel[PWM_ZL_PWM_CHANNEL].cmr=
800032c0:	f3 4b 02 a0 	st.w	r9[672],r11
    (0<<AVR32_PWM_CMR_CPRE) | // MCK % 1 
    (1<<AVR32_PWM_CMR_CALG) | // center aligned 
    (1<<AVR32_PWM_CMR_CPOL) | // start with 1 
    (0<<AVR32_PWM_CMR_CPD)
    ;   // channel mode
  pwm->channel[PWM_ZL_PWM_CHANNEL].cprd= pwm_drv_options->max_pwm_value; // channel period
800032c4:	6c 0a       	ld.w	r10,r6[0x0]
800032c6:	f3 4a 02 a8 	st.w	r9[680],r10
  
  pwm->channel[PWM_ZL_PWM_CHANNEL].cdty= pwm_drv_options->max_pwm_value - 10; // duty cycle, should be < CPRD
800032ca:	6c 08       	ld.w	r8,r6[0x0]
800032cc:	20 a8       	sub	r8,10
800032ce:	f3 48 02 a4 	st.w	r9[676],r8
}
800032d2:	e3 cd 80 40 	ldm	sp++,r6,pc
800032d6:	d7 03       	nop
800032d8:	80 00       	ld.sh	r0,r0[0x0]
800032da:	b0 d5       	st.b	r8[0x5],r5

800032dc <park>:

extern const int coss[361];
extern const int sinn[361];

void park(int ialpha, int ibeta,unsigned short teta, int *Id, int *Iq)
{
800032dc:	d4 31       	pushm	r0-r7,lr
800032de:	20 2d       	sub	sp,8
  // Id = ialpha cos(teta)+ibeta sin(teta)
  // Iq= ibeta cos(teta)- ialpha sin( teta)

  *Id=(int)((((long long int)ialpha*(long long int)coss[teta])+((long long int)ibeta*(long long int)sinn[teta]))>>31);
800032e0:	f8 0e 14 1f 	asr	lr,r12,0x1f
800032e4:	50 1e       	stdsp	sp[0x4],lr
800032e6:	f6 0e 14 1f 	asr	lr,r11,0x1f
800032ea:	5c 7a       	castu.h	r10
800032ec:	50 0e       	stdsp	sp[0x0],lr
800032ee:	4a 0e       	lddpc	lr,8000336c <park+0x90>
800032f0:	4a 06       	lddpc	r6,80003370 <park+0x94>
800032f2:	fc 0a 03 27 	ld.w	r7,lr[r10<<0x2]
800032f6:	ec 0a 03 25 	ld.w	r5,r6[r10<<0x2]
800032fa:	40 0e       	lddsp	lr,sp[0x0]
800032fc:	ee 04 14 1f 	asr	r4,r7,0x1f
80003300:	e8 0b 02 4a 	mul	r10,r4,r11
80003304:	fc 07 03 4a 	mac	r10,lr,r7
80003308:	ee 0b 06 40 	mulu.d	r0,r7,r11
8000330c:	f4 01 00 01 	add	r1,r10,r1
80003310:	40 1a       	lddsp	r10,sp[0x4]
80003312:	ea 0c 06 42 	mulu.d	r2,r5,r12
80003316:	ea 06 14 1f 	asr	r6,r5,0x1f
8000331a:	ec 0c 02 4e 	mul	lr,r6,r12
8000331e:	f4 05 03 4e 	mac	lr,r10,r5
80003322:	fc 03 00 03 	add	r3,lr,r3
80003326:	04 00       	add	r0,r2
80003328:	e2 03 00 41 	adc	r1,r1,r3
8000332c:	e0 0a 16 1f 	lsr	r10,r0,0x1f
80003330:	f5 e1 10 1a 	or	r10,r10,r1<<0x1
80003334:	93 0a       	st.w	r9[0x0],r10
  *Iq=(int)((((long long int)ibeta*(long long int)coss[teta])-((long long int)ialpha*(long long int)sinn[teta]))>>31);
80003336:	40 09       	lddsp	r9,sp[0x0]
80003338:	ea 0b 06 42 	mulu.d	r2,r5,r11
8000333c:	ee 0c 06 40 	mulu.d	r0,r7,r12
80003340:	b7 36       	mul	r6,r11
80003342:	e8 0c 02 4a 	mul	r10,r4,r12
80003346:	f2 05 03 46 	mac	r6,r9,r5
8000334a:	40 1e       	lddsp	lr,sp[0x4]
8000334c:	ec 03 00 03 	add	r3,r6,r3
80003350:	fc 07 03 4a 	mac	r10,lr,r7
80003354:	f4 01 00 01 	add	r1,r10,r1
80003358:	00 12       	sub	r2,r0
8000335a:	e6 01 01 43 	sbc	r3,r3,r1
8000335e:	e4 09 16 1f 	lsr	r9,r2,0x1f
80003362:	f3 e3 10 19 	or	r9,r9,r3<<0x1
80003366:	91 09       	st.w	r8[0x0],r9
}
80003368:	2f ed       	sub	sp,-8
8000336a:	d8 32       	popm	r0-r7,pc
8000336c:	80 00       	ld.sh	r0,r0[0x0]
8000336e:	b6 8c       	st.b	r11[0x0],r12
80003370:	80 00       	ld.sh	r0,r0[0x0]
80003372:	b0 e8       	st.b	r8[0x6],r8

80003374 <park_inv>:

void park_inv(int Vd, int Vq,unsigned short teta, volatile int  *valpha, volatile int *vbeta)
{
80003374:	d4 31       	pushm	r0-r7,lr
80003376:	20 2d       	sub	sp,8
  // valpha = Vd cos(teta)-Vq sin(teta)
  // vbeta= Vq cos'teta)+ Vd sin( teta)

  *valpha=(int)((((long long int)Vd*(long long int)coss[teta])-((long long int)Vq*(long long int)sinn[teta]))>>31);
80003378:	f8 0e 14 1f 	asr	lr,r12,0x1f
8000337c:	50 1e       	stdsp	sp[0x4],lr
8000337e:	f6 0e 14 1f 	asr	lr,r11,0x1f
80003382:	5c 7a       	castu.h	r10
80003384:	50 0e       	stdsp	sp[0x0],lr
80003386:	4a 0e       	lddpc	lr,80003404 <park_inv+0x90>
80003388:	4a 06       	lddpc	r6,80003408 <park_inv+0x94>
8000338a:	fc 0a 03 24 	ld.w	r4,lr[r10<<0x2]
8000338e:	ec 0a 03 27 	ld.w	r7,r6[r10<<0x2]
80003392:	40 1e       	lddsp	lr,sp[0x4]
80003394:	e8 05 14 1f 	asr	r5,r4,0x1f
80003398:	ea 0c 02 4a 	mul	r10,r5,r12
8000339c:	fc 04 03 4a 	mac	r10,lr,r4
800033a0:	e8 0c 06 40 	mulu.d	r0,r4,r12
800033a4:	f4 01 00 01 	add	r1,r10,r1
800033a8:	40 0a       	lddsp	r10,sp[0x0]
800033aa:	ee 0b 06 42 	mulu.d	r2,r7,r11
800033ae:	ee 06 14 1f 	asr	r6,r7,0x1f
800033b2:	ec 0b 02 4e 	mul	lr,r6,r11
800033b6:	f4 07 03 4e 	mac	lr,r10,r7
800033ba:	fc 03 00 03 	add	r3,lr,r3
800033be:	04 10       	sub	r0,r2
800033c0:	e2 03 01 41 	sbc	r1,r1,r3
800033c4:	e0 0a 16 1f 	lsr	r10,r0,0x1f
800033c8:	f5 e1 10 1a 	or	r10,r10,r1<<0x1
800033cc:	93 0a       	st.w	r9[0x0],r10
  *vbeta =(int)((((long long int)Vq*(long long int)coss[teta])+((long long int)Vd*(long long int)sinn[teta]))>>31);
800033ce:	40 19       	lddsp	r9,sp[0x4]
800033d0:	ee 0c 06 42 	mulu.d	r2,r7,r12
800033d4:	e8 0b 06 40 	mulu.d	r0,r4,r11
800033d8:	b9 36       	mul	r6,r12
800033da:	b7 35       	mul	r5,r11
800033dc:	f2 07 03 46 	mac	r6,r9,r7
800033e0:	40 0e       	lddsp	lr,sp[0x0]
800033e2:	ec 03 00 03 	add	r3,r6,r3
800033e6:	fc 04 03 45 	mac	r5,lr,r4
800033ea:	ea 01 00 01 	add	r1,r5,r1
800033ee:	00 02       	add	r2,r0
800033f0:	e6 01 00 43 	adc	r3,r3,r1
800033f4:	e4 09 16 1f 	lsr	r9,r2,0x1f
800033f8:	f3 e3 10 19 	or	r9,r9,r3<<0x1
800033fc:	91 09       	st.w	r8[0x0],r9
}
800033fe:	2f ed       	sub	sp,-8
80003400:	d8 32       	popm	r0-r7,pc
80003402:	d7 03       	nop
80003404:	80 00       	ld.sh	r0,r0[0x0]
80003406:	b0 e8       	st.b	r8[0x6],r8
80003408:	80 00       	ld.sh	r0,r0[0x0]
8000340a:	b6 8c       	st.b	r11[0x0],r12

8000340c <IP_REG_compute>:
//!        Feedback=Feedback-Discharge+Ki.Te.Error
//!        Output=Feedback-Kd.Mes
//!        Error=Ref-Mes
//!
void IP_REG_compute(IP_REG_variables_t* IP_reg)
{
8000340c:	eb cd 40 4c 	pushm	r2-r3,r6,lr
     IP_reg->IP_REG_feedback=IP_reg->IP_REG_feedback-IP_reg->IP_REG_discharge+(int)(((long long int)IP_reg->Ki *(long long int)IP_reg->IP_REG_lasterror)>>31);
80003410:	78 58       	ld.w	r8,r12[0x14]
80003412:	78 0e       	ld.w	lr,r12[0x0]
80003414:	78 43       	ld.w	r3,r12[0x10]
80003416:	10 1e       	sub	lr,r8
80003418:	78 69       	ld.w	r9,r12[0x18]
8000341a:	e6 09 04 42 	muls.d	r2,r3,r9
8000341e:	e4 08 16 1f 	lsr	r8,r2,0x1f
80003422:	f1 e3 10 18 	or	r8,r8,r3<<0x1
     IP_reg->IP_REG_output=IP_reg->IP_REG_feedback-(int)(((long long int)IP_reg->Kp *(long long int)IP_reg->IP_REG_mes)>>31);
80003426:	78 16       	ld.w	r6,r12[0x4]
//!        Output=Feedback-Kd.Mes
//!        Error=Ref-Mes
//!
void IP_REG_compute(IP_REG_variables_t* IP_reg)
{
     IP_reg->IP_REG_feedback=IP_reg->IP_REG_feedback-IP_reg->IP_REG_discharge+(int)(((long long int)IP_reg->Ki *(long long int)IP_reg->IP_REG_lasterror)>>31);
80003428:	10 0e       	add	lr,r8
     IP_reg->IP_REG_output=IP_reg->IP_REG_feedback-(int)(((long long int)IP_reg->Kp *(long long int)IP_reg->IP_REG_mes)>>31);
8000342a:	78 7b       	ld.w	r11,r12[0x1c]
     IP_reg->IP_REG_lasterror=IP_reg->IP_REG_ref-IP_reg->IP_REG_mes;
8000342c:	78 29       	ld.w	r9,r12[0x8]
//!        Error=Ref-Mes
//!
void IP_REG_compute(IP_REG_variables_t* IP_reg)
{
     IP_reg->IP_REG_feedback=IP_reg->IP_REG_feedback-IP_reg->IP_REG_discharge+(int)(((long long int)IP_reg->Ki *(long long int)IP_reg->IP_REG_lasterror)>>31);
     IP_reg->IP_REG_output=IP_reg->IP_REG_feedback-(int)(((long long int)IP_reg->Kp *(long long int)IP_reg->IP_REG_mes)>>31);
8000342e:	ec 0b 04 4a 	muls.d	r10,r6,r11
     IP_reg->IP_REG_lasterror=IP_reg->IP_REG_ref-IP_reg->IP_REG_mes;
80003432:	0c 19       	sub	r9,r6
//!        Error=Ref-Mes
//!
void IP_REG_compute(IP_REG_variables_t* IP_reg)
{
     IP_reg->IP_REG_feedback=IP_reg->IP_REG_feedback-IP_reg->IP_REG_discharge+(int)(((long long int)IP_reg->Ki *(long long int)IP_reg->IP_REG_lasterror)>>31);
     IP_reg->IP_REG_output=IP_reg->IP_REG_feedback-(int)(((long long int)IP_reg->Kp *(long long int)IP_reg->IP_REG_mes)>>31);
80003434:	f4 08 16 1f 	lsr	r8,r10,0x1f
//!        Output=Feedback-Kd.Mes
//!        Error=Ref-Mes
//!
void IP_REG_compute(IP_REG_variables_t* IP_reg)
{
     IP_reg->IP_REG_feedback=IP_reg->IP_REG_feedback-IP_reg->IP_REG_discharge+(int)(((long long int)IP_reg->Ki *(long long int)IP_reg->IP_REG_lasterror)>>31);
80003438:	99 0e       	st.w	r12[0x0],lr
     IP_reg->IP_REG_output=IP_reg->IP_REG_feedback-(int)(((long long int)IP_reg->Kp *(long long int)IP_reg->IP_REG_mes)>>31);
8000343a:	f1 eb 10 18 	or	r8,r8,r11<<0x1
     IP_reg->IP_REG_lasterror=IP_reg->IP_REG_ref-IP_reg->IP_REG_mes;
8000343e:	99 49       	st.w	r12[0x10],r9
//!        Error=Ref-Mes
//!
void IP_REG_compute(IP_REG_variables_t* IP_reg)
{
     IP_reg->IP_REG_feedback=IP_reg->IP_REG_feedback-IP_reg->IP_REG_discharge+(int)(((long long int)IP_reg->Ki *(long long int)IP_reg->IP_REG_lasterror)>>31);
     IP_reg->IP_REG_output=IP_reg->IP_REG_feedback-(int)(((long long int)IP_reg->Kp *(long long int)IP_reg->IP_REG_mes)>>31);
80003440:	fc 08 01 08 	sub	r8,lr,r8
80003444:	99 38       	st.w	r12[0xc],r8
     IP_reg->IP_REG_lasterror=IP_reg->IP_REG_ref-IP_reg->IP_REG_mes;
}
80003446:	e3 cd 80 4c 	ldm	sp++,r2-r3,r6,pc

8000344a <svpwm>:
/*! \name Compute SVPWM
 */
//! @{
// Valpha et Vbeta are divided by 2E
void svpwm(volatile svpwm_options_t *svpwm_options) 
{
8000344a:	eb cd 40 c0 	pushm	r6-r7,lr
   int delta_i, delta_2i, delta_z;
   int Vb_M_Va, Vb_P_Va, Va_P_Vb, Va_M_Vb;

   //******************************************************************
   // Vbeta-sqrt(3)*Valpha
   Vb_M_Va = svpwm_options->Vbeta - (svpwm_options->Valpha <<1) + (svpwm_options->Valpha >>2) + (svpwm_options->Valpha >>6);
8000344e:	78 2b       	ld.w	r11,r12[0x8]
/*! \name Compute SVPWM
 */
//! @{
// Valpha et Vbeta are divided by 2E
void svpwm(volatile svpwm_options_t *svpwm_options) 
{
80003450:	18 97       	mov	r7,r12
   int delta_i, delta_2i, delta_z;
   int Vb_M_Va, Vb_P_Va, Va_P_Vb, Va_M_Vb;

   //******************************************************************
   // Vbeta-sqrt(3)*Valpha
   Vb_M_Va = svpwm_options->Vbeta - (svpwm_options->Valpha <<1) + (svpwm_options->Valpha >>2) + (svpwm_options->Valpha >>6);
80003452:	78 1c       	ld.w	r12,r12[0x4]
80003454:	6e 18       	ld.w	r8,r7[0x4]
80003456:	6e 19       	ld.w	r9,r7[0x4]
80003458:	a3 48       	asr	r8,0x2
   // Vbeta+sqrt(3)*Valpha
   Vb_P_Va = (svpwm_options->Vbeta <<1) - Vb_M_Va;  
8000345a:	6e 2a       	ld.w	r10,r7[0x8]
   int delta_i, delta_2i, delta_z;
   int Vb_M_Va, Vb_P_Va, Va_P_Vb, Va_M_Vb;

   //******************************************************************
   // Vbeta-sqrt(3)*Valpha
   Vb_M_Va = svpwm_options->Vbeta - (svpwm_options->Valpha <<1) + (svpwm_options->Valpha >>2) + (svpwm_options->Valpha >>6);
8000345c:	a7 49       	asr	r9,0x6
8000345e:	12 08       	add	r8,r9
80003460:	16 08       	add	r8,r11
   // Vbeta+sqrt(3)*Valpha
   Vb_P_Va = (svpwm_options->Vbeta <<1) - Vb_M_Va;  
80003462:	a1 7a       	lsl	r10,0x1
   int delta_i, delta_2i, delta_z;
   int Vb_M_Va, Vb_P_Va, Va_P_Vb, Va_M_Vb;

   //******************************************************************
   // Vbeta-sqrt(3)*Valpha
   Vb_M_Va = svpwm_options->Vbeta - (svpwm_options->Valpha <<1) + (svpwm_options->Valpha >>2) + (svpwm_options->Valpha >>6);
80003464:	f0 0c 01 16 	sub	r6,r8,r12<<0x1
   // Vbeta+sqrt(3)*Valpha
   Vb_P_Va = (svpwm_options->Vbeta <<1) - Vb_M_Va;  
   if (svpwm_options->Vbeta >0)
80003468:	6e 28       	ld.w	r8,r7[0x8]

   //******************************************************************
   // Vbeta-sqrt(3)*Valpha
   Vb_M_Va = svpwm_options->Vbeta - (svpwm_options->Valpha <<1) + (svpwm_options->Valpha >>2) + (svpwm_options->Valpha >>6);
   // Vbeta+sqrt(3)*Valpha
   Vb_P_Va = (svpwm_options->Vbeta <<1) - Vb_M_Va;  
8000346a:	f4 06 01 0e 	sub	lr,r10,r6
   if (svpwm_options->Vbeta >0)
8000346e:	58 08       	cp.w	r8,0
80003470:	e0 8a 00 a4 	brle	800035b8 <svpwm+0x16e>
   {
     if (svpwm_options->Valpha >0)
80003474:	6e 18       	ld.w	r8,r7[0x4]
80003476:	58 08       	cp.w	r8,0
80003478:	e0 8a 00 71 	brle	8000355a <svpwm+0x110>
     {
       if (Vb_M_Va <0) // SECTOR =i =1
8000347c:	58 06       	cp.w	r6,0
8000347e:	e0 85 00 fd 	brlt	80003678 <svpwm+0x22e>
         tempsr4 = delta_2i + delta_z;
       }
     else  // SECTOR = i = 2
     { 
         
         svpwm_options->current_to_be_measured=AC; 
80003482:	30 28       	mov	r8,2
80003484:	8f 08       	st.w	r7[0x0],r8
         //Valpha+sqrt(3)*Vbeta
         Va_P_Vb = svpwm_options->Valpha + (svpwm_options->Vbeta<<1) - (svpwm_options->Vbeta>>2) - (svpwm_options->Vbeta>>6); 
         // delta_2i = sqrt(2)* Vb_M_Va  
         delta_2i = (Vb_M_Va<<1) - (Vb_M_Va>>1) -(Vb_M_Va>>4) -(Vb_M_Va>>5);
80003486:	ec 08 14 01 	asr	r8,r6,0x1
     else  // SECTOR = i = 2
     { 
         
         svpwm_options->current_to_be_measured=AC; 
         //Valpha+sqrt(3)*Vbeta
         Va_P_Vb = svpwm_options->Valpha + (svpwm_options->Vbeta<<1) - (svpwm_options->Vbeta>>2) - (svpwm_options->Vbeta>>6); 
8000348a:	6e 19       	ld.w	r9,r7[0x4]
         // delta_2i = sqrt(2)* Vb_M_Va  
         delta_2i = (Vb_M_Va<<1) - (Vb_M_Va>>1) -(Vb_M_Va>>4) -(Vb_M_Va>>5);
8000348c:	ec 0a 15 01 	lsl	r10,r6,0x1
     else  // SECTOR = i = 2
     { 
         
         svpwm_options->current_to_be_measured=AC; 
         //Valpha+sqrt(3)*Vbeta
         Va_P_Vb = svpwm_options->Valpha + (svpwm_options->Vbeta<<1) - (svpwm_options->Vbeta>>2) - (svpwm_options->Vbeta>>6); 
80003490:	6e 2b       	ld.w	r11,r7[0x8]
         // delta_2i = sqrt(2)* Vb_M_Va  
         delta_2i = (Vb_M_Va<<1) - (Vb_M_Va>>1) -(Vb_M_Va>>4) -(Vb_M_Va>>5);
80003492:	10 1a       	sub	r10,r8
     else  // SECTOR = i = 2
     { 
         
         svpwm_options->current_to_be_measured=AC; 
         //Valpha+sqrt(3)*Vbeta
         Va_P_Vb = svpwm_options->Valpha + (svpwm_options->Vbeta<<1) - (svpwm_options->Vbeta>>2) - (svpwm_options->Vbeta>>6); 
80003494:	f2 0b 00 1b 	add	r11,r9,r11<<0x1
80003498:	6e 28       	ld.w	r8,r7[0x8]
8000349a:	6e 29       	ld.w	r9,r7[0x8]
8000349c:	a3 48       	asr	r8,0x2
8000349e:	a7 49       	asr	r9,0x6
         // delta_2i = sqrt(2)* Vb_M_Va  
         delta_2i = (Vb_M_Va<<1) - (Vb_M_Va>>1) -(Vb_M_Va>>4) -(Vb_M_Va>>5);
800034a0:	ec 0e 14 05 	asr	lr,r6,0x5
     else  // SECTOR = i = 2
     { 
         
         svpwm_options->current_to_be_measured=AC; 
         //Valpha+sqrt(3)*Vbeta
         Va_P_Vb = svpwm_options->Valpha + (svpwm_options->Vbeta<<1) - (svpwm_options->Vbeta>>2) - (svpwm_options->Vbeta>>6); 
800034a4:	10 1b       	sub	r11,r8
         // delta_2i = sqrt(2)* Vb_M_Va  
         delta_2i = (Vb_M_Va<<1) - (Vb_M_Va>>1) -(Vb_M_Va>>4) -(Vb_M_Va>>5);
800034a6:	ec 08 14 04 	asr	r8,r6,0x4
     else  // SECTOR = i = 2
     { 
         
         svpwm_options->current_to_be_measured=AC; 
         //Valpha+sqrt(3)*Vbeta
         Va_P_Vb = svpwm_options->Valpha + (svpwm_options->Vbeta<<1) - (svpwm_options->Vbeta>>2) - (svpwm_options->Vbeta>>6); 
800034aa:	12 1b       	sub	r11,r9
         // delta_2i = sqrt(2)* Vb_M_Va  
         delta_2i = (Vb_M_Va<<1) - (Vb_M_Va>>1) -(Vb_M_Va>>4) -(Vb_M_Va>>5);
800034ac:	10 1a       	sub	r10,r8
         // delta_i = sqrt(1.5)*(Valpha+sqrt(3)*Vbeta) - 0.5*delta_2i
         delta_i  = Va_P_Vb + (Va_P_Vb>>2) - (Va_P_Vb>>5) - (delta_2i>>1);
800034ae:	f6 0c 14 05 	asr	r12,r11,0x5
         
         svpwm_options->current_to_be_measured=AC; 
         //Valpha+sqrt(3)*Vbeta
         Va_P_Vb = svpwm_options->Valpha + (svpwm_options->Vbeta<<1) - (svpwm_options->Vbeta>>2) - (svpwm_options->Vbeta>>6); 
         // delta_2i = sqrt(2)* Vb_M_Va  
         delta_2i = (Vb_M_Va<<1) - (Vb_M_Va>>1) -(Vb_M_Va>>4) -(Vb_M_Va>>5);
800034b2:	1c 1a       	sub	r10,lr
         // delta_i = sqrt(1.5)*(Valpha+sqrt(3)*Vbeta) - 0.5*delta_2i
         delta_i  = Va_P_Vb + (Va_P_Vb>>2) - (Va_P_Vb>>5) - (delta_2i>>1);
800034b4:	f4 09 14 01 	asr	r9,r10,0x1
800034b8:	f6 08 14 02 	asr	r8,r11,0x2
800034bc:	16 08       	add	r8,r11
800034be:	18 18       	sub	r8,r12
800034c0:	12 18       	sub	r8,r9
         delta_z  = (Un_1 - delta_2i - delta_i)>>1;
800034c2:	30 09       	mov	r9,0
800034c4:	ea 19 80 00 	orh	r9,0x8000
         tempsr0  = delta_i + delta_z;
         tempsr2  = delta_i + delta_2i + delta_z;
800034c8:	f0 0a 00 0b 	add	r11,r8,r10
         Va_P_Vb = svpwm_options->Valpha + (svpwm_options->Vbeta<<1) - (svpwm_options->Vbeta>>2) - (svpwm_options->Vbeta>>6); 
         // delta_2i = sqrt(2)* Vb_M_Va  
         delta_2i = (Vb_M_Va<<1) - (Vb_M_Va>>1) -(Vb_M_Va>>4) -(Vb_M_Va>>5);
         // delta_i = sqrt(1.5)*(Valpha+sqrt(3)*Vbeta) - 0.5*delta_2i
         delta_i  = Va_P_Vb + (Va_P_Vb>>2) - (Va_P_Vb>>5) - (delta_2i>>1);
         delta_z  = (Un_1 - delta_2i - delta_i)>>1;
800034cc:	f2 0a 01 0a 	sub	r10,r9,r10
800034d0:	10 1a       	sub	r10,r8
800034d2:	a1 9a       	lsr	r10,0x1
         tempsr0  = delta_i + delta_z;
         tempsr2  = delta_i + delta_2i + delta_z;
800034d4:	f6 0a 00 0c 	add	r12,r11,r10
800034d8:	14 96       	mov	r6,r10
         // delta_2i = sqrt(2)* Vb_M_Va  
         delta_2i = (Vb_M_Va<<1) - (Vb_M_Va>>1) -(Vb_M_Va>>4) -(Vb_M_Va>>5);
         // delta_i = sqrt(1.5)*(Valpha+sqrt(3)*Vbeta) - 0.5*delta_2i
         delta_i  = Va_P_Vb + (Va_P_Vb>>2) - (Va_P_Vb>>5) - (delta_2i>>1);
         delta_z  = (Un_1 - delta_2i - delta_i)>>1;
         tempsr0  = delta_i + delta_z;
800034da:	f4 08 00 0e 	add	lr,r10,r8
          tempsr2  = delta_z + delta_i;
          tempsr4  = delta_z + delta_2i + delta_i;
      }
   }

  svpwm_options->duty0 = (tempsr0>>20) - (tempsr0>>22) - (tempsr0>>23) - (tempsr0>>25) - (tempsr0>>26)-10; 
800034de:	fc 0a 14 1a 	asr	r10,lr,0x1a
800034e2:	fc 0b 14 17 	asr	r11,lr,0x17
800034e6:	fc 09 14 19 	asr	r9,lr,0x19
800034ea:	fc 08 14 14 	asr	r8,lr,0x14
800034ee:	f2 09 11 f6 	rsub	r9,r9,-10
800034f2:	14 19       	sub	r9,r10
800034f4:	fc 0a 14 16 	asr	r10,lr,0x16
800034f8:	14 18       	sub	r8,r10
800034fa:	16 18       	sub	r8,r11
800034fc:	10 09       	add	r9,r8
800034fe:	8f 39       	st.w	r7[0xc],r9
  svpwm_options->duty1 = svpwm_options->duty0+20; 
  svpwm_options->duty2 = (tempsr2>>20) - (tempsr2>>22) - (tempsr2>>23) - (tempsr2>>25) - (tempsr2>>26)-10;
80003500:	f8 0a 14 1a 	asr	r10,r12,0x1a
          tempsr4  = delta_z + delta_2i + delta_i;
      }
   }

  svpwm_options->duty0 = (tempsr0>>20) - (tempsr0>>22) - (tempsr0>>23) - (tempsr0>>25) - (tempsr0>>26)-10; 
  svpwm_options->duty1 = svpwm_options->duty0+20; 
80003504:	6e 38       	ld.w	r8,r7[0xc]
80003506:	2e c8       	sub	r8,-20
80003508:	8f 48       	st.w	r7[0x10],r8
  svpwm_options->duty2 = (tempsr2>>20) - (tempsr2>>22) - (tempsr2>>23) - (tempsr2>>25) - (tempsr2>>26)-10;
8000350a:	f8 0b 14 17 	asr	r11,r12,0x17
8000350e:	f8 09 14 19 	asr	r9,r12,0x19
80003512:	f8 08 14 14 	asr	r8,r12,0x14
80003516:	f2 09 11 f6 	rsub	r9,r9,-10
8000351a:	14 19       	sub	r9,r10
8000351c:	f8 0a 14 16 	asr	r10,r12,0x16
80003520:	14 18       	sub	r8,r10
80003522:	16 18       	sub	r8,r11
80003524:	10 09       	add	r9,r8
80003526:	8f 59       	st.w	r7[0x14],r9
  svpwm_options->duty3 = svpwm_options->duty2+20;
  svpwm_options->duty4 = (tempsr4>>20) - (tempsr4>>22) - (tempsr4>>23) - (tempsr4>>25) - (tempsr4>>26)-10;
80003528:	ec 0a 14 1a 	asr	r10,r6,0x1a
   }

  svpwm_options->duty0 = (tempsr0>>20) - (tempsr0>>22) - (tempsr0>>23) - (tempsr0>>25) - (tempsr0>>26)-10; 
  svpwm_options->duty1 = svpwm_options->duty0+20; 
  svpwm_options->duty2 = (tempsr2>>20) - (tempsr2>>22) - (tempsr2>>23) - (tempsr2>>25) - (tempsr2>>26)-10;
  svpwm_options->duty3 = svpwm_options->duty2+20;
8000352c:	6e 58       	ld.w	r8,r7[0x14]
8000352e:	2e c8       	sub	r8,-20
80003530:	8f 68       	st.w	r7[0x18],r8
  svpwm_options->duty4 = (tempsr4>>20) - (tempsr4>>22) - (tempsr4>>23) - (tempsr4>>25) - (tempsr4>>26)-10;
80003532:	ec 0b 14 17 	asr	r11,r6,0x17
80003536:	ec 09 14 19 	asr	r9,r6,0x19
8000353a:	ec 08 14 14 	asr	r8,r6,0x14
8000353e:	f2 09 11 f6 	rsub	r9,r9,-10
80003542:	14 19       	sub	r9,r10
80003544:	ec 0a 14 16 	asr	r10,r6,0x16
80003548:	14 18       	sub	r8,r10
8000354a:	16 18       	sub	r8,r11
8000354c:	10 09       	add	r9,r8
8000354e:	8f 79       	st.w	r7[0x1c],r9
  svpwm_options->duty5 = svpwm_options->duty4+20;
80003550:	6e 78       	ld.w	r8,r7[0x1c]
80003552:	2e c8       	sub	r8,-20
80003554:	8f 88       	st.w	r7[0x20],r8
} 
80003556:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
         tempsr2  = delta_i + delta_2i + delta_z;
         tempsr4  = delta_z;
       }
     }
     else
       if (Vb_P_Va <0)  // SECTOR = i = 3
8000355a:	58 0e       	cp.w	lr,0
8000355c:	c9 34       	brge	80003482 <svpwm+0x38>
       { 
         svpwm_options->current_to_be_measured=CA; 
8000355e:	30 38       	mov	r8,3
80003560:	8f 08       	st.w	r7[0x0],r8
         // delta_2i = -sqrt(2)*Vb_P_Va
         delta_2i = -(Vb_P_Va<<1) + (Vb_P_Va>>1) + (Vb_P_Va>>4) + (Vb_P_Va>>5);
80003562:	fc 08 14 01 	asr	r8,lr,0x1
80003566:	fc 0a 14 04 	asr	r10,lr,0x4
8000356a:	10 0a       	add	r10,r8
8000356c:	fc 08 14 05 	asr	r8,lr,0x5
         // Valpha-sqrt(3)*Vbeta
         Va_M_Vb = svpwm_options->Valpha - (svpwm_options->Vbeta<<1) + (svpwm_options->Vbeta>>2) + (svpwm_options->Vbeta>>6);
80003570:	6e 1b       	ld.w	r11,r7[0x4]
     else
       if (Vb_P_Va <0)  // SECTOR = i = 3
       { 
         svpwm_options->current_to_be_measured=CA; 
         // delta_2i = -sqrt(2)*Vb_P_Va
         delta_2i = -(Vb_P_Va<<1) + (Vb_P_Va>>1) + (Vb_P_Va>>4) + (Vb_P_Va>>5);
80003572:	10 0a       	add	r10,r8
         // Valpha-sqrt(3)*Vbeta
         Va_M_Vb = svpwm_options->Valpha - (svpwm_options->Vbeta<<1) + (svpwm_options->Vbeta>>2) + (svpwm_options->Vbeta>>6);
80003574:	6e 2c       	ld.w	r12,r7[0x8]
80003576:	6e 28       	ld.w	r8,r7[0x8]
80003578:	6e 29       	ld.w	r9,r7[0x8]
8000357a:	a3 48       	asr	r8,0x2
8000357c:	a7 49       	asr	r9,0x6
8000357e:	12 08       	add	r8,r9
80003580:	16 08       	add	r8,r11
80003582:	f0 0c 01 18 	sub	r8,r8,r12<<0x1
     else
       if (Vb_P_Va <0)  // SECTOR = i = 3
       { 
         svpwm_options->current_to_be_measured=CA; 
         // delta_2i = -sqrt(2)*Vb_P_Va
         delta_2i = -(Vb_P_Va<<1) + (Vb_P_Va>>1) + (Vb_P_Va>>4) + (Vb_P_Va>>5);
80003586:	f4 0e 01 1a 	sub	r10,r10,lr<<0x1
         // Valpha-sqrt(3)*Vbeta
         Va_M_Vb = svpwm_options->Valpha - (svpwm_options->Vbeta<<1) + (svpwm_options->Vbeta>>2) + (svpwm_options->Vbeta>>6);
         // delta_i = -sqrt(1.5)*(Va_M_Vb)- 0.5*delta_2i
         delta_i = - Va_M_Vb - (Va_M_Vb>>2) + (Va_M_Vb>>5) - (delta_2i>>1);
8000358a:	f0 0b 14 02 	asr	r11,r8,0x2
8000358e:	f0 09 14 05 	asr	r9,r8,0x5
80003592:	10 19       	sub	r9,r8
80003594:	f4 08 14 01 	asr	r8,r10,0x1
80003598:	16 19       	sub	r9,r11
8000359a:	10 19       	sub	r9,r8
         delta_z = (Un_1 - delta_2i - delta_i)>>1;
8000359c:	30 08       	mov	r8,0
8000359e:	ea 18 80 00 	orh	r8,0x8000
         tempsr0 = delta_z;
         tempsr2 = delta_i + delta_2i+ delta_z;
800035a2:	f2 0a 00 0b 	add	r11,r9,r10
         delta_2i = -(Vb_P_Va<<1) + (Vb_P_Va>>1) + (Vb_P_Va>>4) + (Vb_P_Va>>5);
         // Valpha-sqrt(3)*Vbeta
         Va_M_Vb = svpwm_options->Valpha - (svpwm_options->Vbeta<<1) + (svpwm_options->Vbeta>>2) + (svpwm_options->Vbeta>>6);
         // delta_i = -sqrt(1.5)*(Va_M_Vb)- 0.5*delta_2i
         delta_i = - Va_M_Vb - (Va_M_Vb>>2) + (Va_M_Vb>>5) - (delta_2i>>1);
         delta_z = (Un_1 - delta_2i - delta_i)>>1;
800035a6:	14 18       	sub	r8,r10
800035a8:	12 18       	sub	r8,r9
800035aa:	a1 98       	lsr	r8,0x1
         tempsr0 = delta_z;
         tempsr2 = delta_i + delta_2i+ delta_z;
800035ac:	f6 08 00 0c 	add	r12,r11,r8
         tempsr4 = delta_2i + delta_z;
800035b0:	f0 0a 00 06 	add	r6,r8,r10
800035b4:	10 9e       	mov	lr,r8
800035b6:	c9 4b       	rjmp	800034de <svpwm+0x94>
         tempsr4  = delta_z;
     }
   }
   else
   {
      if (svpwm_options->Valpha >0)
800035b8:	6e 18       	ld.w	r8,r7[0x4]
800035ba:	58 08       	cp.w	r8,0
800035bc:	e0 8a 00 85 	brle	800036c6 <svpwm+0x27c>
      {
        if (Vb_P_Va <0)// SECTOR = i = 5
800035c0:	58 0e       	cp.w	lr,0
800035c2:	c3 05       	brlt	80003622 <svpwm+0x1d8>
          tempsr2  = delta_z;
          tempsr4  = delta_z + delta_2i + delta_i;
        }
        else   // SECTOR = i = 6
        {  
          svpwm_options->current_to_be_measured=CB;
800035c4:	30 58       	mov	r8,5
800035c6:	8f 08       	st.w	r7[0x0],r8
          // delta_2i =  sqrt(2)*( Vbeta + sqrt(3)*Valpha)
          delta_2i = (Vb_P_Va<<1) - (Vb_P_Va>>1) - (Vb_P_Va>>4) - (Vb_P_Va>>5);
800035c8:	fc 08 14 01 	asr	r8,lr,0x1
800035cc:	fc 09 14 05 	asr	r9,lr,0x5
800035d0:	fc 0a 15 01 	lsl	r10,lr,0x1
800035d4:	10 1a       	sub	r10,r8
800035d6:	fc 08 14 04 	asr	r8,lr,0x4
          // Valpha-sqrt(3)*Vbeta
          Va_M_Vb = svpwm_options->Valpha - (svpwm_options->Vbeta<<1) + (svpwm_options->Vbeta>>2) + (svpwm_options->Vbeta>>6);
800035da:	6e 1b       	ld.w	r11,r7[0x4]
        }
        else   // SECTOR = i = 6
        {  
          svpwm_options->current_to_be_measured=CB;
          // delta_2i =  sqrt(2)*( Vbeta + sqrt(3)*Valpha)
          delta_2i = (Vb_P_Va<<1) - (Vb_P_Va>>1) - (Vb_P_Va>>4) - (Vb_P_Va>>5);
800035dc:	10 1a       	sub	r10,r8
          // Valpha-sqrt(3)*Vbeta
          Va_M_Vb = svpwm_options->Valpha - (svpwm_options->Vbeta<<1) + (svpwm_options->Vbeta>>2) + (svpwm_options->Vbeta>>6);
800035de:	6e 2c       	ld.w	r12,r7[0x8]
        }
        else   // SECTOR = i = 6
        {  
          svpwm_options->current_to_be_measured=CB;
          // delta_2i =  sqrt(2)*( Vbeta + sqrt(3)*Valpha)
          delta_2i = (Vb_P_Va<<1) - (Vb_P_Va>>1) - (Vb_P_Va>>4) - (Vb_P_Va>>5);
800035e0:	12 1a       	sub	r10,r9
          // Valpha-sqrt(3)*Vbeta
          Va_M_Vb = svpwm_options->Valpha - (svpwm_options->Vbeta<<1) + (svpwm_options->Vbeta>>2) + (svpwm_options->Vbeta>>6);
800035e2:	6e 28       	ld.w	r8,r7[0x8]
800035e4:	6e 29       	ld.w	r9,r7[0x8]
800035e6:	a3 48       	asr	r8,0x2
800035e8:	a7 49       	asr	r9,0x6
800035ea:	12 08       	add	r8,r9
800035ec:	16 08       	add	r8,r11
800035ee:	f0 0c 01 18 	sub	r8,r8,r12<<0x1
          // delta_i =  sqrt(1.5)*(Valpha-sqrt(3)*Vbeta) - 0.5* delta_2i          
          delta_i = Va_M_Vb + (Va_M_Vb>>2) - (Va_M_Vb>>5) - (delta_2i>>1);
800035f2:	f0 0b 14 05 	asr	r11,r8,0x5
800035f6:	f0 09 14 02 	asr	r9,r8,0x2
800035fa:	10 09       	add	r9,r8
800035fc:	f4 08 14 01 	asr	r8,r10,0x1
80003600:	16 19       	sub	r9,r11
80003602:	10 19       	sub	r9,r8
          delta_z  = (Un_1 - delta_2i - delta_i)>>1;
80003604:	30 08       	mov	r8,0
80003606:	ea 18 80 00 	orh	r8,0x8000
          tempsr0  = delta_2i + delta_z + delta_i;
8000360a:	f2 0a 00 0b 	add	r11,r9,r10
          delta_2i = (Vb_P_Va<<1) - (Vb_P_Va>>1) - (Vb_P_Va>>4) - (Vb_P_Va>>5);
          // Valpha-sqrt(3)*Vbeta
          Va_M_Vb = svpwm_options->Valpha - (svpwm_options->Vbeta<<1) + (svpwm_options->Vbeta>>2) + (svpwm_options->Vbeta>>6);
          // delta_i =  sqrt(1.5)*(Valpha-sqrt(3)*Vbeta) - 0.5* delta_2i          
          delta_i = Va_M_Vb + (Va_M_Vb>>2) - (Va_M_Vb>>5) - (delta_2i>>1);
          delta_z  = (Un_1 - delta_2i - delta_i)>>1;
8000360e:	f0 0a 01 0a 	sub	r10,r8,r10
80003612:	12 1a       	sub	r10,r9
80003614:	a1 9a       	lsr	r10,0x1
          tempsr0  = delta_2i + delta_z + delta_i;
80003616:	f6 0a 00 0e 	add	lr,r11,r10
          tempsr2  = delta_z;
          tempsr4  = delta_z + delta_i;
8000361a:	f4 09 00 06 	add	r6,r10,r9
8000361e:	14 9c       	mov	r12,r10
80003620:	c5 fb       	rjmp	800034de <svpwm+0x94>
        }
      }
      else
        if (Vb_M_Va <0)// SECTOR = i = 5
        {
          svpwm_options->current_to_be_measured=AB;
80003622:	30 48       	mov	r8,4
80003624:	8f 08       	st.w	r7[0x0],r8
          // delta_2i = - sqrt(2)*( Vbeta - sqrt(3)*Valpha)         
          delta_2i = -(Vb_M_Va<<1) + (Vb_M_Va>>1) + (Vb_M_Va>>4) + (Vb_M_Va>>5);
80003626:	ec 08 08 4b 	asr	r11,r6,r8
8000362a:	ec 08 14 01 	asr	r8,r6,0x1
          //Valpha+sqrt(3)*Vbeta
          Va_P_Vb = svpwm_options->Valpha + (svpwm_options->Vbeta<<1) - (svpwm_options->Vbeta>>2) - (svpwm_options->Vbeta>>6); 
8000362e:	6e 19       	ld.w	r9,r7[0x4]
      else
        if (Vb_M_Va <0)// SECTOR = i = 5
        {
          svpwm_options->current_to_be_measured=AB;
          // delta_2i = - sqrt(2)*( Vbeta - sqrt(3)*Valpha)         
          delta_2i = -(Vb_M_Va<<1) + (Vb_M_Va>>1) + (Vb_M_Va>>4) + (Vb_M_Va>>5);
80003630:	10 0b       	add	r11,r8
          //Valpha+sqrt(3)*Vbeta
          Va_P_Vb = svpwm_options->Valpha + (svpwm_options->Vbeta<<1) - (svpwm_options->Vbeta>>2) - (svpwm_options->Vbeta>>6); 
80003632:	6e 2a       	ld.w	r10,r7[0x8]
80003634:	6e 28       	ld.w	r8,r7[0x8]
80003636:	a3 48       	asr	r8,0x2
80003638:	f2 0a 00 1a 	add	r10,r9,r10<<0x1
      else
        if (Vb_M_Va <0)// SECTOR = i = 5
        {
          svpwm_options->current_to_be_measured=AB;
          // delta_2i = - sqrt(2)*( Vbeta - sqrt(3)*Valpha)         
          delta_2i = -(Vb_M_Va<<1) + (Vb_M_Va>>1) + (Vb_M_Va>>4) + (Vb_M_Va>>5);
8000363c:	ec 09 14 05 	asr	r9,r6,0x5
          //Valpha+sqrt(3)*Vbeta
          Va_P_Vb = svpwm_options->Valpha + (svpwm_options->Vbeta<<1) - (svpwm_options->Vbeta>>2) - (svpwm_options->Vbeta>>6); 
80003640:	10 1a       	sub	r10,r8
80003642:	6e 28       	ld.w	r8,r7[0x8]
80003644:	a7 48       	asr	r8,0x6
80003646:	10 1a       	sub	r10,r8
          // delta_i = - sqrt(1.5)*(Valpha+sqrt(3)*Vbeta) - 0.5* delta_2i         
          delta_i  = - Va_P_Vb - (Va_P_Vb>>2) + (Va_P_Vb>>5) - (delta_2i>>1);
80003648:	f4 0c 14 02 	asr	r12,r10,0x2
      else
        if (Vb_M_Va <0)// SECTOR = i = 5
        {
          svpwm_options->current_to_be_measured=AB;
          // delta_2i = - sqrt(2)*( Vbeta - sqrt(3)*Valpha)         
          delta_2i = -(Vb_M_Va<<1) + (Vb_M_Va>>1) + (Vb_M_Va>>4) + (Vb_M_Va>>5);
8000364c:	12 0b       	add	r11,r9
          //Valpha+sqrt(3)*Vbeta
          Va_P_Vb = svpwm_options->Valpha + (svpwm_options->Vbeta<<1) - (svpwm_options->Vbeta>>2) - (svpwm_options->Vbeta>>6); 
          // delta_i = - sqrt(1.5)*(Valpha+sqrt(3)*Vbeta) - 0.5* delta_2i         
          delta_i  = - Va_P_Vb - (Va_P_Vb>>2) + (Va_P_Vb>>5) - (delta_2i>>1);
          delta_z  = (Un_1 - delta_2i - delta_i)>>1;
8000364e:	30 08       	mov	r8,0
80003650:	ea 18 80 00 	orh	r8,0x8000
      else
        if (Vb_M_Va <0)// SECTOR = i = 5
        {
          svpwm_options->current_to_be_measured=AB;
          // delta_2i = - sqrt(2)*( Vbeta - sqrt(3)*Valpha)         
          delta_2i = -(Vb_M_Va<<1) + (Vb_M_Va>>1) + (Vb_M_Va>>4) + (Vb_M_Va>>5);
80003654:	f6 06 01 1b 	sub	r11,r11,r6<<0x1
          //Valpha+sqrt(3)*Vbeta
          Va_P_Vb = svpwm_options->Valpha + (svpwm_options->Vbeta<<1) - (svpwm_options->Vbeta>>2) - (svpwm_options->Vbeta>>6); 
          // delta_i = - sqrt(1.5)*(Valpha+sqrt(3)*Vbeta) - 0.5* delta_2i         
          delta_i  = - Va_P_Vb - (Va_P_Vb>>2) + (Va_P_Vb>>5) - (delta_2i>>1);
80003658:	f4 09 14 05 	asr	r9,r10,0x5
          delta_z  = (Un_1 - delta_2i - delta_i)>>1;
8000365c:	16 18       	sub	r8,r11
          // delta_2i = - sqrt(2)*( Vbeta - sqrt(3)*Valpha)         
          delta_2i = -(Vb_M_Va<<1) + (Vb_M_Va>>1) + (Vb_M_Va>>4) + (Vb_M_Va>>5);
          //Valpha+sqrt(3)*Vbeta
          Va_P_Vb = svpwm_options->Valpha + (svpwm_options->Vbeta<<1) - (svpwm_options->Vbeta>>2) - (svpwm_options->Vbeta>>6); 
          // delta_i = - sqrt(1.5)*(Valpha+sqrt(3)*Vbeta) - 0.5* delta_2i         
          delta_i  = - Va_P_Vb - (Va_P_Vb>>2) + (Va_P_Vb>>5) - (delta_2i>>1);
8000365e:	14 19       	sub	r9,r10
80003660:	f6 0a 14 01 	asr	r10,r11,0x1
80003664:	18 19       	sub	r9,r12
80003666:	14 19       	sub	r9,r10
          delta_z  = (Un_1 - delta_2i - delta_i)>>1;
80003668:	12 18       	sub	r8,r9
8000366a:	a1 98       	lsr	r8,0x1
          tempsr0  = delta_2i + delta_z;
8000366c:	f0 0b 00 0e 	add	lr,r8,r11
          tempsr2  = delta_z;
          tempsr4  = delta_z + delta_2i + delta_i;
80003670:	10 9c       	mov	r12,r8
80003672:	fc 09 00 06 	add	r6,lr,r9
80003676:	c3 4b       	rjmp	800034de <svpwm+0x94>
   {
     if (svpwm_options->Valpha >0)
     {
       if (Vb_M_Va <0) // SECTOR =i =1
       { // delta_2i= 2*sqrt(2)* Vbeta
          svpwm_options->current_to_be_measured=BC; 
80003678:	30 18       	mov	r8,1
8000367a:	8f 08       	st.w	r7[0x0],r8
          delta_2i = (svpwm_options->Vbeta<<1) + (svpwm_options->Vbeta>>1) + (svpwm_options->Vbeta>>2) + (svpwm_options->Vbeta>>4)+ (svpwm_options->Vbeta>>6);
8000367c:	6e 2b       	ld.w	r11,r7[0x8]
8000367e:	6e 28       	ld.w	r8,r7[0x8]
80003680:	a1 58       	asr	r8,0x1
80003682:	6e 29       	ld.w	r9,r7[0x8]
80003684:	f0 0b 00 1b 	add	r11,r8,r11<<0x1
80003688:	a3 49       	asr	r9,0x2
8000368a:	6e 28       	ld.w	r8,r7[0x8]
8000368c:	a5 48       	asr	r8,0x4
8000368e:	12 0b       	add	r11,r9
80003690:	6e 29       	ld.w	r9,r7[0x8]
80003692:	10 0b       	add	r11,r8
         
         // delta_i = 2*sqrt(1.5)*Valpha - 0.5*delta_2i           
          delta_i = (svpwm_options->Valpha<<1) + (svpwm_options->Valpha>>1) - (svpwm_options->Valpha>>4) - (delta_2i>>1);
80003694:	6e 1a       	ld.w	r10,r7[0x4]
     if (svpwm_options->Valpha >0)
     {
       if (Vb_M_Va <0) // SECTOR =i =1
       { // delta_2i= 2*sqrt(2)* Vbeta
          svpwm_options->current_to_be_measured=BC; 
          delta_2i = (svpwm_options->Vbeta<<1) + (svpwm_options->Vbeta>>1) + (svpwm_options->Vbeta>>2) + (svpwm_options->Vbeta>>4)+ (svpwm_options->Vbeta>>6);
80003696:	a7 49       	asr	r9,0x6
         
         // delta_i = 2*sqrt(1.5)*Valpha - 0.5*delta_2i           
          delta_i = (svpwm_options->Valpha<<1) + (svpwm_options->Valpha>>1) - (svpwm_options->Valpha>>4) - (delta_2i>>1);
80003698:	6e 18       	ld.w	r8,r7[0x4]
     if (svpwm_options->Valpha >0)
     {
       if (Vb_M_Va <0) // SECTOR =i =1
       { // delta_2i= 2*sqrt(2)* Vbeta
          svpwm_options->current_to_be_measured=BC; 
          delta_2i = (svpwm_options->Vbeta<<1) + (svpwm_options->Vbeta>>1) + (svpwm_options->Vbeta>>2) + (svpwm_options->Vbeta>>4)+ (svpwm_options->Vbeta>>6);
8000369a:	12 0b       	add	r11,r9
         
         // delta_i = 2*sqrt(1.5)*Valpha - 0.5*delta_2i           
          delta_i = (svpwm_options->Valpha<<1) + (svpwm_options->Valpha>>1) - (svpwm_options->Valpha>>4) - (delta_2i>>1);
8000369c:	a1 58       	asr	r8,0x1
8000369e:	f6 0c 14 01 	asr	r12,r11,0x1
800036a2:	f0 0a 00 1a 	add	r10,r8,r10<<0x1
800036a6:	6e 19       	ld.w	r9,r7[0x4]

         // delta_z = 0.5*( 1 - delta_2i - delta_i )          
          delta_z = (Un_1 - delta_2i - delta_i)>>1;
800036a8:	30 08       	mov	r8,0
800036aa:	ea 18 80 00 	orh	r8,0x8000
       { // delta_2i= 2*sqrt(2)* Vbeta
          svpwm_options->current_to_be_measured=BC; 
          delta_2i = (svpwm_options->Vbeta<<1) + (svpwm_options->Vbeta>>1) + (svpwm_options->Vbeta>>2) + (svpwm_options->Vbeta>>4)+ (svpwm_options->Vbeta>>6);
         
         // delta_i = 2*sqrt(1.5)*Valpha - 0.5*delta_2i           
          delta_i = (svpwm_options->Valpha<<1) + (svpwm_options->Valpha>>1) - (svpwm_options->Valpha>>4) - (delta_2i>>1);
800036ae:	a5 49       	asr	r9,0x4

         // delta_z = 0.5*( 1 - delta_2i - delta_i )          
          delta_z = (Un_1 - delta_2i - delta_i)>>1;
800036b0:	16 18       	sub	r8,r11
       { // delta_2i= 2*sqrt(2)* Vbeta
          svpwm_options->current_to_be_measured=BC; 
          delta_2i = (svpwm_options->Vbeta<<1) + (svpwm_options->Vbeta>>1) + (svpwm_options->Vbeta>>2) + (svpwm_options->Vbeta>>4)+ (svpwm_options->Vbeta>>6);
         
         // delta_i = 2*sqrt(1.5)*Valpha - 0.5*delta_2i           
          delta_i = (svpwm_options->Valpha<<1) + (svpwm_options->Valpha>>1) - (svpwm_options->Valpha>>4) - (delta_2i>>1);
800036b2:	12 1a       	sub	r10,r9
800036b4:	18 1a       	sub	r10,r12

         // delta_z = 0.5*( 1 - delta_2i - delta_i )          
          delta_z = (Un_1 - delta_2i - delta_i)>>1;
800036b6:	14 18       	sub	r8,r10
800036b8:	a1 98       	lsr	r8,0x1
          
          tempsr0 = delta_z + delta_2i + delta_i;
800036ba:	f0 0b 00 0c 	add	r12,r8,r11
800036be:	10 96       	mov	r6,r8
800036c0:	f8 0a 00 0e 	add	lr,r12,r10
800036c4:	c0 db       	rjmp	800034de <svpwm+0x94>
          tempsr2  = delta_z;
          tempsr4  = delta_z + delta_i;
        }
      }
      else
        if (Vb_M_Va <0)// SECTOR = i = 5
800036c6:	58 06       	cp.w	r6,0
800036c8:	ca d5       	brlt	80003622 <svpwm+0x1d8>
          tempsr2  = delta_z;
          tempsr4  = delta_z + delta_2i + delta_i;
        }
      else // SECTOR = i = 4
      {
          svpwm_options->current_to_be_measured=BA;
800036ca:	30 68       	mov	r8,6
800036cc:	8f 08       	st.w	r7[0x0],r8
         // delta_2i= -2*sqrt(2)* Vbeta         
          delta_2i = -(svpwm_options->Vbeta<<1)- (svpwm_options->Vbeta>>1) - (svpwm_options->Vbeta>>2) - (svpwm_options->Vbeta>>4)- (svpwm_options->Vbeta>>6);
800036ce:	6e 2a       	ld.w	r10,r7[0x8]
800036d0:	6e 28       	ld.w	r8,r7[0x8]
800036d2:	a1 58       	asr	r8,0x1
800036d4:	6e 29       	ld.w	r9,r7[0x8]
800036d6:	a1 7a       	lsl	r10,0x1
800036d8:	a3 49       	asr	r9,0x2
800036da:	5c 3a       	neg	r10
800036dc:	10 1a       	sub	r10,r8
800036de:	6e 28       	ld.w	r8,r7[0x8]
800036e0:	a5 48       	asr	r8,0x4
800036e2:	12 1a       	sub	r10,r9
800036e4:	6e 29       	ld.w	r9,r7[0x8]
800036e6:	10 1a       	sub	r10,r8
         // delta_i = -2*sqrt(1.5)*Valpha - 0.5*delta_2i  
          delta_i = -(svpwm_options->Valpha<<1) - (svpwm_options->Valpha>>1) + (svpwm_options->Valpha>>4) - (delta_2i>>1);
800036e8:	6e 1b       	ld.w	r11,r7[0x4]
        }
      else // SECTOR = i = 4
      {
          svpwm_options->current_to_be_measured=BA;
         // delta_2i= -2*sqrt(2)* Vbeta         
          delta_2i = -(svpwm_options->Vbeta<<1)- (svpwm_options->Vbeta>>1) - (svpwm_options->Vbeta>>2) - (svpwm_options->Vbeta>>4)- (svpwm_options->Vbeta>>6);
800036ea:	a7 49       	asr	r9,0x6
         // delta_i = -2*sqrt(1.5)*Valpha - 0.5*delta_2i  
          delta_i = -(svpwm_options->Valpha<<1) - (svpwm_options->Valpha>>1) + (svpwm_options->Valpha>>4) - (delta_2i>>1);
800036ec:	6e 18       	ld.w	r8,r7[0x4]
800036ee:	a1 58       	asr	r8,0x1
        }
      else // SECTOR = i = 4
      {
          svpwm_options->current_to_be_measured=BA;
         // delta_2i= -2*sqrt(2)* Vbeta         
          delta_2i = -(svpwm_options->Vbeta<<1)- (svpwm_options->Vbeta>>1) - (svpwm_options->Vbeta>>2) - (svpwm_options->Vbeta>>4)- (svpwm_options->Vbeta>>6);
800036f0:	12 1a       	sub	r10,r9
         // delta_i = -2*sqrt(1.5)*Valpha - 0.5*delta_2i  
          delta_i = -(svpwm_options->Valpha<<1) - (svpwm_options->Valpha>>1) + (svpwm_options->Valpha>>4) - (delta_2i>>1);
800036f2:	a1 7b       	lsl	r11,0x1
800036f4:	6e 19       	ld.w	r9,r7[0x4]
800036f6:	5c 3b       	neg	r11
800036f8:	a5 49       	asr	r9,0x4
800036fa:	10 1b       	sub	r11,r8
800036fc:	f4 08 14 01 	asr	r8,r10,0x1
80003700:	12 0b       	add	r11,r9
80003702:	10 1b       	sub	r11,r8
          delta_z = (Un_1 - delta_2i - delta_i)>>1;
80003704:	30 08       	mov	r8,0
80003706:	ea 18 80 00 	orh	r8,0x8000
          tempsr0  = delta_z;
          tempsr2  = delta_z + delta_i;
          tempsr4  = delta_z + delta_2i + delta_i;
8000370a:	f6 0a 00 09 	add	r9,r11,r10
          svpwm_options->current_to_be_measured=BA;
         // delta_2i= -2*sqrt(2)* Vbeta         
          delta_2i = -(svpwm_options->Vbeta<<1)- (svpwm_options->Vbeta>>1) - (svpwm_options->Vbeta>>2) - (svpwm_options->Vbeta>>4)- (svpwm_options->Vbeta>>6);
         // delta_i = -2*sqrt(1.5)*Valpha - 0.5*delta_2i  
          delta_i = -(svpwm_options->Valpha<<1) - (svpwm_options->Valpha>>1) + (svpwm_options->Valpha>>4) - (delta_2i>>1);
          delta_z = (Un_1 - delta_2i - delta_i)>>1;
8000370e:	f0 0a 01 0a 	sub	r10,r8,r10
80003712:	16 1a       	sub	r10,r11
80003714:	a1 9a       	lsr	r10,0x1
          tempsr0  = delta_z;
          tempsr2  = delta_z + delta_i;
          tempsr4  = delta_z + delta_2i + delta_i;
80003716:	f2 0a 00 06 	add	r6,r9,r10
8000371a:	14 9e       	mov	lr,r10
          delta_2i = -(svpwm_options->Vbeta<<1)- (svpwm_options->Vbeta>>1) - (svpwm_options->Vbeta>>2) - (svpwm_options->Vbeta>>4)- (svpwm_options->Vbeta>>6);
         // delta_i = -2*sqrt(1.5)*Valpha - 0.5*delta_2i  
          delta_i = -(svpwm_options->Valpha<<1) - (svpwm_options->Valpha>>1) + (svpwm_options->Valpha>>4) - (delta_2i>>1);
          delta_z = (Un_1 - delta_2i - delta_i)>>1;
          tempsr0  = delta_z;
          tempsr2  = delta_z + delta_i;
8000371c:	f4 0b 00 0c 	add	r12,r10,r11
80003720:	cd fa       	rjmp	800034de <svpwm+0x94>
80003722:	d7 03       	nop

80003724 <usb_sof_action>:
//! the USB Start-of-Frame interrupt subroutine is executed (1 ms).
//! Useful to manage time delays
//!
void usb_sof_action(void)
{
  sof_cnt++;
80003724:	48 39       	lddpc	r9,80003730 <usb_sof_action+0xc>
80003726:	92 08       	ld.sh	r8,r9[0x0]
80003728:	2f f8       	sub	r8,-1
8000372a:	b2 08       	st.h	r9[0x0],r8
}
8000372c:	5e fc       	retal	r12
8000372e:	d7 03       	nop
80003730:	00 00       	add	r0,r0
80003732:	05 4c       	ld.w	r12,--r2

80003734 <device_cdc_task>:

//!
//! @brief Entry point of the device CDC task management
//!
void device_cdc_task(void)
{
80003734:	d4 21       	pushm	r4-r7,lr
 if( uart_usb_tx_ready() )      // "USART"-USB free ?
80003736:	e0 a0 08 65 	rcall	80004800 <uart_usb_tx_ready>
8000373a:	c0 80       	breq	8000374a <device_cdc_task+0x16>
 {                              
    if( (msg_rdy==1) && (msg_sent==0))  
8000373c:	49 c7       	lddpc	r7,800037ac <device_cdc_task+0x78>
8000373e:	30 19       	mov	r9,1
80003740:	0f 88       	ld.ub	r8,r7[0x0]
80003742:	10 96       	mov	r6,r8
80003744:	f2 08 18 00 	cp.b	r8,r9
80003748:	c1 70       	breq	80003776 <device_cdc_task+0x42>
      uart_usb_sendmessage(&msg_idm,&msg_idref,&msg_iqm,&msg_iqref,&msg_vm,&msg_vref,&msg_speedm,&msg_speedest,&msg_tetam,&msg_tetaest);  
      msg_rdy = 0;
      msg_sent = 1;
    }
 }
 if (uart_usb_test_hit() )
8000374a:	e0 a0 08 35 	rcall	800047b4 <uart_usb_test_hit>
8000374e:	c0 21       	brne	80003752 <device_cdc_task+0x1e>
80003750:	d8 22       	popm	r4-r7,pc
 {      
       uart_usb_readmessage(&msg_rx_vref);      
80003752:	49 86       	lddpc	r6,800037b0 <device_cdc_task+0x7c>
80003754:	0c 9c       	mov	r12,r6
80003756:	e0 a0 08 5b 	rcall	8000480c <uart_usb_readmessage>
       if ((msg_rx_vref.data[0])+(msg_rx_vref.data[1]<<8)+(msg_rx_vref.data[2]<<16)+(msg_rx_vref.data[3]<<24)!=0)
8000375a:	0d db       	ld.ub	r11,r6[0x5]
8000375c:	0d b9       	ld.ub	r9,r6[0x3]
8000375e:	b9 6b       	lsl	r11,0x18
80003760:	a9 69       	lsl	r9,0x8
80003762:	0d c8       	ld.ub	r8,r6[0x4]
80003764:	0d aa       	ld.ub	r10,r6[0x2]
80003766:	b1 68       	lsl	r8,0x10
80003768:	10 09       	add	r9,r8
8000376a:	14 09       	add	r9,r10
8000376c:	16 09       	add	r9,r11
8000376e:	cf 10       	breq	80003750 <device_cdc_task+0x1c>
         MC_BLDC_motor.Speedref = (msg_rx_vref.data[0])+(msg_rx_vref.data[1]<<8)+(msg_rx_vref.data[2]<<16)+(msg_rx_vref.data[3]<<24);        
80003770:	49 18       	lddpc	r8,800037b4 <device_cdc_task+0x80>
80003772:	91 79       	st.w	r8[0x1c],r9
80003774:	d8 22       	popm	r4-r7,pc
//!
void device_cdc_task(void)
{
 if( uart_usb_tx_ready() )      // "USART"-USB free ?
 {                              
    if( (msg_rdy==1) && (msg_sent==0))  
80003776:	49 14       	lddpc	r4,800037b8 <device_cdc_task+0x84>
80003778:	09 88       	ld.ub	r8,r4[0x0]
8000377a:	10 95       	mov	r5,r8
8000377c:	58 08       	cp.w	r8,0
8000377e:	ce 61       	brne	8000374a <device_cdc_task+0x16>
    {
      uart_usb_sendmessage(&msg_idm,&msg_idref,&msg_iqm,&msg_iqref,&msg_vm,&msg_vref,&msg_speedm,&msg_speedest,&msg_tetam,&msg_tetaest);  
80003780:	48 f8       	lddpc	r8,800037bc <device_cdc_task+0x88>
80003782:	49 09       	lddpc	r9,800037c0 <device_cdc_task+0x8c>
80003784:	1a d8       	st.w	--sp,r8
80003786:	49 08       	lddpc	r8,800037c4 <device_cdc_task+0x90>
80003788:	1a d9       	st.w	--sp,r9
8000378a:	49 09       	lddpc	r9,800037c8 <device_cdc_task+0x94>
8000378c:	1a d8       	st.w	--sp,r8
8000378e:	49 08       	lddpc	r8,800037cc <device_cdc_task+0x98>
80003790:	1a d9       	st.w	--sp,r9
80003792:	49 0a       	lddpc	r10,800037d0 <device_cdc_task+0x9c>
80003794:	1a d8       	st.w	--sp,r8
80003796:	49 09       	lddpc	r9,800037d4 <device_cdc_task+0xa0>
80003798:	49 08       	lddpc	r8,800037d8 <device_cdc_task+0xa4>
8000379a:	49 1b       	lddpc	r11,800037dc <device_cdc_task+0xa8>
8000379c:	49 1c       	lddpc	r12,800037e0 <device_cdc_task+0xac>
8000379e:	e0 a0 08 63 	rcall	80004864 <uart_usb_sendmessage>
      msg_rdy = 0;
800037a2:	ae 85       	st.b	r7[0x0],r5
      msg_sent = 1;
800037a4:	a8 86       	st.b	r4[0x0],r6
800037a6:	2f bd       	sub	sp,-20
800037a8:	cd 1b       	rjmp	8000374a <device_cdc_task+0x16>
800037aa:	d7 03       	nop
800037ac:	00 00       	add	r0,r0
800037ae:	06 a9       	st.w	r3++,r9
800037b0:	00 00       	add	r0,r0
800037b2:	08 d9       	st.w	--r4,r9
800037b4:	00 00       	add	r0,r0
800037b6:	07 b0       	ld.ub	r0,r3[0x3]
800037b8:	00 00       	add	r0,r0
800037ba:	06 a8       	st.w	r3++,r8
800037bc:	00 00       	add	r0,r0
800037be:	0c dd       	st.w	--r6,sp
800037c0:	00 00       	add	r0,r0
800037c2:	0b dc       	ld.ub	r12,r5[0x5]
800037c4:	00 00       	add	r0,r0
800037c6:	06 ac       	st.w	r3++,r12
800037c8:	00 00       	add	r0,r0
800037ca:	10 e1       	st.h	--r8,r1
800037cc:	00 00       	add	r0,r0
800037ce:	0f e0       	ld.ub	r0,r7[0x6]
800037d0:	00 00       	add	r0,r0
800037d2:	0a db       	st.w	--r5,r11
800037d4:	00 00       	add	r0,r0
800037d6:	0e df       	st.w	--r7,pc
800037d8:	00 00       	add	r0,r0
800037da:	07 d8       	ld.ub	r8,r3[0x5]
800037dc:	00 00       	add	r0,r0
800037de:	0d de       	ld.ub	lr,r6[0x5]
800037e0:	00 00       	add	r0,r0
800037e2:	09 da       	ld.ub	r10,r4[0x5]

800037e4 <device_cdc_task_init>:
//!
//! @brief This function initializes the hardware/software resources
//! required for device CDC task.
//!
void device_cdc_task_init(void)
{
800037e4:	eb cd 40 40 	pushm	r6,lr
  sof_cnt   = 0 ;
800037e8:	48 88       	lddpc	r8,80003808 <device_cdc_task_init+0x24>
800037ea:	30 06       	mov	r6,0
800037ec:	b0 06       	st.h	r8[0x0],r6
  uart_usb_init();
800037ee:	e0 a0 07 d9 	rcall	800047a0 <uart_usb_init>
  Usb_enable_sof_interrupt();
800037f2:	30 49       	mov	r9,4
800037f4:	fe 68 00 00 	mov	r8,-131072
800037f8:	91 69       	st.w	r8[0x18],r9
  msg_sent = 1;
800037fa:	30 1a       	mov	r10,1
800037fc:	48 48       	lddpc	r8,8000380c <device_cdc_task_init+0x28>
800037fe:	b0 8a       	st.b	r8[0x0],r10
  msg_rdy  = 0; 
80003800:	48 49       	lddpc	r9,80003810 <device_cdc_task_init+0x2c>
80003802:	b2 86       	st.b	r9[0x0],r6
}
80003804:	e3 cd 80 40 	ldm	sp++,r6,pc
80003808:	00 00       	add	r0,r0
8000380a:	05 4c       	ld.w	r12,--r2
8000380c:	00 00       	add	r0,r0
8000380e:	06 a8       	st.w	r3++,r8
80003810:	00 00       	add	r0,r0
80003812:	06 a9       	st.w	r3++,r9

80003814 <_init_startup>:
#if __GNUC__ && __AVR32__
int _init_startup(void)
#elif __ICCAVR32__
int __low_level_init(void)
#endif
{
80003814:	eb cd 40 40 	pushm	r6,lr
  // Import the Exception Vector Base Address.
  extern void _evba;

  // Load the Exception Vector Base Address in the corresponding system
  // register.
  Set_system_register(AVR32_EVBA, (int)&_evba);
80003818:	fe c8 8a 18 	sub	r8,pc,-30184
8000381c:	e3 b8 00 01 	mtsr	0x4,r8
  union
  {
    unsigned long                 scfg;
    avr32_hmatrix_scfg_t          SCFG;
  } u_avr32_hmatrix_scfg = {AVR32_HMATRIX.scfg[AVR32_HMATRIX_SLAVE_FLASH]};
  u_avr32_hmatrix_scfg.SCFG.defmstr_type = AVR32_HMATRIX_DEFMSTR_TYPE_LAST_DEFAULT;
80003820:	d5 53       	csrf	0x15
  // For the internal-flash HMATRIX slave, use last master as default.
  union
  {
    unsigned long                 scfg;
    avr32_hmatrix_scfg_t          SCFG;
  } u_avr32_hmatrix_scfg = {AVR32_HMATRIX.scfg[AVR32_HMATRIX_SLAVE_FLASH]};
80003822:	30 16       	mov	r6,1
80003824:	fe 69 10 00 	mov	r9,-126976
  u_avr32_hmatrix_scfg.SCFG.defmstr_type = AVR32_HMATRIX_DEFMSTR_TYPE_LAST_DEFAULT;
80003828:	73 08       	ld.w	r8,r9[0x40]
8000382a:	f1 d6 d2 02 	bfins	r8,r6,0x10,0x2
  AVR32_HMATRIX.scfg[AVR32_HMATRIX_SLAVE_FLASH] = u_avr32_hmatrix_scfg.scfg;
8000382e:	30 3a       	mov	r10,3
80003830:	f3 48 00 40 	st.w	r9[64],r8
static void init_sys_clocks(void)
{
volatile avr32_pm_t* pm = &AVR32_PM;

  /* Switch the main clock to OSC0 */
  pm_switch_to_osc0(pm, FOSC0, OSC0_STARTUP);
80003834:	e0 6b 1b 00 	mov	r11,6912
80003838:	ea 1b 00 b7 	orh	r11,0xb7
8000383c:	fe 7c 0c 00 	mov	r12,-62464
80003840:	e0 a0 0b 25 	rcall	80004e8a <pm_switch_to_osc0>
  /* Setup PLL0 on OSC0 */
  pm_pll_setup(pm,  // volatile avr32_pm_t* pm
80003844:	31 0a       	mov	r10,16
80003846:	30 08       	mov	r8,0
80003848:	1a da       	st.w	--sp,r10
8000384a:	0c 99       	mov	r9,r6
8000384c:	10 9b       	mov	r11,r8
8000384e:	30 7a       	mov	r10,7
80003850:	fe 7c 0c 00 	mov	r12,-62464
80003854:	e0 a0 0a ec 	rcall	80004e2c <pm_pll_setup>
               7,   // unsigned int mul
               1,   // unsigned int div, Sel Osc0/PLL0 or Osc1/Pll1
               0,   // unsigned int osc
               16); // unsigned int lockcount

  pm_pll_set_option(pm, 0, 1, 1, 0);//60MHz
80003858:	30 08       	mov	r8,0
8000385a:	0c 99       	mov	r9,r6
8000385c:	0c 9a       	mov	r10,r6
8000385e:	10 9b       	mov	r11,r8
80003860:	fe 7c 0c 00 	mov	r12,-62464
80003864:	e0 a0 0a f3 	rcall	80004e4a <pm_pll_set_option>

  /* Enable PLL0 */
  pm_pll_enable(pm,0);
80003868:	30 0b       	mov	r11,0
8000386a:	fe 7c 0c 00 	mov	r12,-62464
8000386e:	e0 a0 0a f9 	rcall	80004e60 <pm_pll_enable>
  /* Wait for PLL0 locked */
  pm_wait_for_pll0_locked(pm) ;
80003872:	fe 7c 0c 00 	mov	r12,-62464
80003876:	e0 a0 0a fb 	rcall	80004e6c <pm_wait_for_pll0_locked>
  /* set divider to 4 for PBA bus */
  pm_cksel(pm,1,0,0,0,0,0);
8000387a:	30 09       	mov	r9,0
8000387c:	0c 9b       	mov	r11,r6
8000387e:	1a d9       	st.w	--sp,r9
80003880:	12 98       	mov	r8,r9
80003882:	1a d9       	st.w	--sp,r9
80003884:	12 9a       	mov	r10,r9
80003886:	fe 7c 0c 00 	mov	r12,-62464
8000388a:	e0 a0 0a 97 	rcall	80004db8 <pm_cksel>
  /* switch to clock */
  pm_switch_to_clock(pm, AVR32_PM_MCCTRL_MCSEL_PLL0);
8000388e:	30 2b       	mov	r11,2
80003890:	fe 7c 0c 00 	mov	r12,-62464
80003894:	e0 a0 0a f6 	rcall	80004e80 <pm_switch_to_clock>

#if __GNUC__ && __AVR32__
  // Give the used PBA clock frequency to Newlib, so it can work properly.
  set_cpu_hz(FPBA_HZ);
80003898:	e0 6c 36 00 	mov	r12,13824
8000389c:	ea 1c 01 6e 	orh	r12,0x16e
800038a0:	e0 a0 0b 4c 	rcall	80004f38 <set_cpu_hz>
/*! \brief Initializes MCU interrupts.
 */
static void init_interrupts(void)
{
  // Initialize interrupt handling.
  INTC_init_interrupts();
800038a4:	e0 a0 0a 30 	rcall	80004d04 <INTC_init_interrupts>
  init_interrupts();

  // EWAVR32: Request initialization of data segments.
  // GCC: Don't-care value.
  return 1;
}
800038a8:	d5 03       	csrf	0x10
{
  // Initialize interrupt handling.
  INTC_init_interrupts();

  // Enable interrupts globally.
  Enable_global_interrupt();
800038aa:	30 1c       	mov	r12,1
  init_interrupts();

  // EWAVR32: Request initialization of data segments.
  // GCC: Don't-care value.
  return 1;
}
800038ac:	2f dd       	sub	sp,-12
800038ae:	e3 cd 80 40 	ldm	sp++,r6,pc
800038b2:	d7 03       	nop

800038b4 <main>:
  // Initialize device CDC USB task
  device_cdc_task_init();
  
}
int main (void)
{
800038b4:	eb cd 40 40 	pushm	r6,lr
  // Configure standard I/O streams as unbuffered.
#if __GNUC__ && __AVR32__
  setbuf(stdin, NULL);
800038b8:	48 f6       	lddpc	r6,800038f4 <main+0x40>
800038ba:	6c 08       	ld.w	r8,r6[0x0]
800038bc:	30 0b       	mov	r11,0
800038be:	70 0c       	ld.w	r12,r8[0x0]
800038c0:	e0 a0 11 54 	rcall	80005b68 <setbuf>
#endif
  setbuf(stdout, NULL);
800038c4:	6c 08       	ld.w	r8,r6[0x0]
800038c6:	30 0b       	mov	r11,0
800038c8:	70 1c       	ld.w	r12,r8[0x4]
800038ca:	48 c6       	lddpc	r6,800038f8 <main+0x44>
800038cc:	e0 a0 11 4e 	rcall	80005b68 <setbuf>
}

void init_usb(void)
{
  // Initialize USB clock
  pm_configure_usb_clock();
800038d0:	e0 a0 0b 0c 	rcall	80004ee8 <pm_configure_usb_clock>

  // Initialize USB task
  usb_task_init();
800038d4:	fe b0 f6 3c 	rcall	8000254c <usb_task_init>

  // Initialize device CDC USB task
  device_cdc_task_init();
800038d8:	c8 6f       	rcall	800037e4 <device_cdc_task_init>
800038da:	fe b0 f6 35 	rcall	80002544 <usb_task>
  init_usb();
     
   // Wait enumeration
   do 
   {
     usb_task();     
800038de:	0d 88       	ld.ub	r8,r6[0x0]
   }while(!Is_device_enumerated());
800038e0:	58 08       	cp.w	r8,0
800038e2:	cf c0       	breq	800038da <main+0x26>
800038e4:	c0 cc       	rcall	800038fc <mc_control_task_init>
     
#endif
  
   // Initialize control task
   mc_control_task_init();
800038e6:	30 0c       	mov	r12,0
800038e8:	c5 6c       	rcall	80003994 <mc_set_motor_direction>
   
   // Initialize direction
   mc_set_motor_direction(MC_CW);
800038ea:	fe b0 f6 2d 	rcall	80002544 <usb_task>
800038ee:	c2 3f       	rcall	80003734 <device_cdc_task>
   
   while(1)
   {
#ifdef USB_DEBUG     
      usb_task();   
800038f0:	c5 8c       	rcall	800039a0 <mc_control_task>
800038f2:	cf cb       	rjmp	800038ea <main+0x36>
      device_cdc_task();
800038f4:	00 00       	add	r0,r0
800038f6:	01 1c       	ld.sh	r12,r0++
#endif
      mc_control_task();
800038f8:	00 00       	add	r0,r0
800038fa:	06 90       	mov	r0,r3

800038fc <mc_control_task_init>:

//!< Local Function to Display messages
static void mc_output_messages(void);

void mc_control_task_init()
{
800038fc:	eb cd 40 ef 	pushm	r0-r3,r5-r7,lr
    // Initialize messages
    msg_idm.dlc = 4; msg_idm.cmd = FRAME_SENDIDM_CMD;
80003900:	30 49       	mov	r9,4
80003902:	31 08       	mov	r8,16
80003904:	49 8a       	lddpc	r10,80003964 <mc_control_task_init+0x68>
    msg_idref.dlc = 4; msg_idref.cmd = FRAME_SENDIDREF_CMD;  
80003906:	49 9b       	lddpc	r11,80003968 <mc_control_task_init+0x6c>
    msg_iqm.dlc = 4; msg_iqm.cmd = FRAME_SENDIQM_CMD;
80003908:	49 9c       	lddpc	r12,8000396c <mc_control_task_init+0x70>
    msg_iqref.dlc = 4; msg_iqref.cmd = FRAME_SENDIQREF_CMD;  
8000390a:	49 ae       	lddpc	lr,80003970 <mc_control_task_init+0x74>
    msg_vm.dlc = 4; msg_vm.cmd = FRAME_SENDSPEEDM_CMD;
8000390c:	49 a6       	lddpc	r6,80003974 <mc_control_task_init+0x78>
    msg_vref.dlc = 4; msg_vref.cmd = FRAME_SENDSPEEDREF_CMD;  
8000390e:	49 b5       	lddpc	r5,80003978 <mc_control_task_init+0x7c>
    msg_speedm.dlc = 4; msg_speedm.cmd = FRAME_SENDSPEEDMES_CMD;
80003910:	49 b3       	lddpc	r3,8000397c <mc_control_task_init+0x80>
    msg_speedest.dlc = 4; msg_speedest.cmd = FRAME_SENDSPEEDEST_CMD;
80003912:	49 c2       	lddpc	r2,80003980 <mc_control_task_init+0x84>
    msg_tetam.dlc = 4; msg_tetam.cmd = FRAME_SENDTETAM_CMD;
80003914:	49 c1       	lddpc	r1,80003984 <mc_control_task_init+0x88>
    msg_tetaest.dlc = 4; msg_tetaest.cmd = FRAME_SENDTETAEST_CMD; 
80003916:	49 d0       	lddpc	r0,80003988 <mc_control_task_init+0x8c>
    msg_rx_vref.dlc = 4;msg_rx_vref.cmd = FRAME_GETVREF;
80003918:	49 d7       	lddpc	r7,8000398c <mc_control_task_init+0x90>
static void mc_output_messages(void);

void mc_control_task_init()
{
    // Initialize messages
    msg_idm.dlc = 4; msg_idm.cmd = FRAME_SENDIDM_CMD;
8000391a:	b4 99       	st.b	r10[0x1],r9
    msg_idref.dlc = 4; msg_idref.cmd = FRAME_SENDIDREF_CMD;  
8000391c:	b6 99       	st.b	r11[0x1],r9
    msg_iqm.dlc = 4; msg_iqm.cmd = FRAME_SENDIQM_CMD;
8000391e:	b8 99       	st.b	r12[0x1],r9
    msg_iqref.dlc = 4; msg_iqref.cmd = FRAME_SENDIQREF_CMD;  
80003920:	bc 99       	st.b	lr[0x1],r9
    msg_vm.dlc = 4; msg_vm.cmd = FRAME_SENDSPEEDM_CMD;
80003922:	ac 99       	st.b	r6[0x1],r9
    msg_vref.dlc = 4; msg_vref.cmd = FRAME_SENDSPEEDREF_CMD;  
80003924:	aa 99       	st.b	r5[0x1],r9
    msg_speedm.dlc = 4; msg_speedm.cmd = FRAME_SENDSPEEDMES_CMD;
80003926:	a6 99       	st.b	r3[0x1],r9
    msg_speedest.dlc = 4; msg_speedest.cmd = FRAME_SENDSPEEDEST_CMD;
80003928:	a4 99       	st.b	r2[0x1],r9
    msg_tetam.dlc = 4; msg_tetam.cmd = FRAME_SENDTETAM_CMD;
8000392a:	a2 99       	st.b	r1[0x1],r9
    msg_tetaest.dlc = 4; msg_tetaest.cmd = FRAME_SENDTETAEST_CMD; 
8000392c:	a0 99       	st.b	r0[0x1],r9
    msg_rx_vref.dlc = 4;msg_rx_vref.cmd = FRAME_GETVREF;
8000392e:	ae 99       	st.b	r7[0x1],r9
static void mc_output_messages(void);

void mc_control_task_init()
{
    // Initialize messages
    msg_idm.dlc = 4; msg_idm.cmd = FRAME_SENDIDM_CMD;
80003930:	b4 88       	st.b	r10[0x0],r8
    msg_idref.dlc = 4; msg_idref.cmd = FRAME_SENDIDREF_CMD;  
80003932:	31 19       	mov	r9,17
    msg_iqm.dlc = 4; msg_iqm.cmd = FRAME_SENDIQM_CMD;
80003934:	31 28       	mov	r8,18

void mc_control_task_init()
{
    // Initialize messages
    msg_idm.dlc = 4; msg_idm.cmd = FRAME_SENDIDM_CMD;
    msg_idref.dlc = 4; msg_idref.cmd = FRAME_SENDIDREF_CMD;  
80003936:	b6 89       	st.b	r11[0x0],r9
    msg_iqm.dlc = 4; msg_iqm.cmd = FRAME_SENDIQM_CMD;
80003938:	b8 88       	st.b	r12[0x0],r8
    msg_iqref.dlc = 4; msg_iqref.cmd = FRAME_SENDIQREF_CMD;  
8000393a:	31 39       	mov	r9,19
    msg_vm.dlc = 4; msg_vm.cmd = FRAME_SENDSPEEDM_CMD;
8000393c:	31 48       	mov	r8,20
{
    // Initialize messages
    msg_idm.dlc = 4; msg_idm.cmd = FRAME_SENDIDM_CMD;
    msg_idref.dlc = 4; msg_idref.cmd = FRAME_SENDIDREF_CMD;  
    msg_iqm.dlc = 4; msg_iqm.cmd = FRAME_SENDIQM_CMD;
    msg_iqref.dlc = 4; msg_iqref.cmd = FRAME_SENDIQREF_CMD;  
8000393e:	bc 89       	st.b	lr[0x0],r9
    msg_vm.dlc = 4; msg_vm.cmd = FRAME_SENDSPEEDM_CMD;
80003940:	ac 88       	st.b	r6[0x0],r8
    msg_vref.dlc = 4; msg_vref.cmd = FRAME_SENDSPEEDREF_CMD;  
80003942:	31 59       	mov	r9,21
    msg_speedm.dlc = 4; msg_speedm.cmd = FRAME_SENDSPEEDMES_CMD;
80003944:	31 68       	mov	r8,22
    msg_idm.dlc = 4; msg_idm.cmd = FRAME_SENDIDM_CMD;
    msg_idref.dlc = 4; msg_idref.cmd = FRAME_SENDIDREF_CMD;  
    msg_iqm.dlc = 4; msg_iqm.cmd = FRAME_SENDIQM_CMD;
    msg_iqref.dlc = 4; msg_iqref.cmd = FRAME_SENDIQREF_CMD;  
    msg_vm.dlc = 4; msg_vm.cmd = FRAME_SENDSPEEDM_CMD;
    msg_vref.dlc = 4; msg_vref.cmd = FRAME_SENDSPEEDREF_CMD;  
80003946:	aa 89       	st.b	r5[0x0],r9
    msg_speedm.dlc = 4; msg_speedm.cmd = FRAME_SENDSPEEDMES_CMD;
80003948:	a6 88       	st.b	r3[0x0],r8
    msg_speedest.dlc = 4; msg_speedest.cmd = FRAME_SENDSPEEDEST_CMD;
8000394a:	31 79       	mov	r9,23
    msg_tetam.dlc = 4; msg_tetam.cmd = FRAME_SENDTETAM_CMD;
8000394c:	31 88       	mov	r8,24
    msg_iqm.dlc = 4; msg_iqm.cmd = FRAME_SENDIQM_CMD;
    msg_iqref.dlc = 4; msg_iqref.cmd = FRAME_SENDIQREF_CMD;  
    msg_vm.dlc = 4; msg_vm.cmd = FRAME_SENDSPEEDM_CMD;
    msg_vref.dlc = 4; msg_vref.cmd = FRAME_SENDSPEEDREF_CMD;  
    msg_speedm.dlc = 4; msg_speedm.cmd = FRAME_SENDSPEEDMES_CMD;
    msg_speedest.dlc = 4; msg_speedest.cmd = FRAME_SENDSPEEDEST_CMD;
8000394e:	a4 89       	st.b	r2[0x0],r9
    msg_tetam.dlc = 4; msg_tetam.cmd = FRAME_SENDTETAM_CMD;
80003950:	a2 88       	st.b	r1[0x0],r8
    msg_tetaest.dlc = 4; msg_tetaest.cmd = FRAME_SENDTETAEST_CMD; 
80003952:	31 99       	mov	r9,25
    msg_rx_vref.dlc = 4;msg_rx_vref.cmd = FRAME_GETVREF;
80003954:	32 28       	mov	r8,34
    msg_vm.dlc = 4; msg_vm.cmd = FRAME_SENDSPEEDM_CMD;
    msg_vref.dlc = 4; msg_vref.cmd = FRAME_SENDSPEEDREF_CMD;  
    msg_speedm.dlc = 4; msg_speedm.cmd = FRAME_SENDSPEEDMES_CMD;
    msg_speedest.dlc = 4; msg_speedest.cmd = FRAME_SENDSPEEDEST_CMD;
    msg_tetam.dlc = 4; msg_tetam.cmd = FRAME_SENDTETAM_CMD;
    msg_tetaest.dlc = 4; msg_tetaest.cmd = FRAME_SENDTETAEST_CMD; 
80003956:	a0 89       	st.b	r0[0x0],r9
    msg_rx_vref.dlc = 4;msg_rx_vref.cmd = FRAME_GETVREF;
80003958:	ae 88       	st.b	r7[0x0],r8
    
    MC_BLDC_motor.mc_state = INIT;
8000395a:	30 09       	mov	r9,0
8000395c:	48 d8       	lddpc	r8,80003990 <mc_control_task_init+0x94>
8000395e:	91 09       	st.w	r8[0x0],r9
}
80003960:	e3 cd 80 ef 	ldm	sp++,r0-r3,r5-r7,pc
80003964:	00 00       	add	r0,r0
80003966:	09 da       	ld.ub	r10,r4[0x5]
80003968:	00 00       	add	r0,r0
8000396a:	0d de       	ld.ub	lr,r6[0x5]
8000396c:	00 00       	add	r0,r0
8000396e:	0a db       	st.w	--r5,r11
80003970:	00 00       	add	r0,r0
80003972:	0e df       	st.w	--r7,pc
80003974:	00 00       	add	r0,r0
80003976:	07 d8       	ld.ub	r8,r3[0x5]
80003978:	00 00       	add	r0,r0
8000397a:	0f e0       	ld.ub	r0,r7[0x6]
8000397c:	00 00       	add	r0,r0
8000397e:	10 e1       	st.h	--r8,r1
80003980:	00 00       	add	r0,r0
80003982:	06 ac       	st.w	r3++,r12
80003984:	00 00       	add	r0,r0
80003986:	0b dc       	ld.ub	r12,r5[0x5]
80003988:	00 00       	add	r0,r0
8000398a:	0c dd       	st.w	--r6,sp
8000398c:	00 00       	add	r0,r0
8000398e:	08 d9       	st.w	--r4,r9
80003990:	00 00       	add	r0,r0
80003992:	07 b0       	ld.ub	r0,r3[0x3]

80003994 <mc_set_motor_direction>:
/*! \name Set Motor Direction
 */
//! @{
void mc_set_motor_direction(mc_motor_direction_t direction)
{
  MC_BLDC_motor.mc_motor_direction = direction;
80003994:	48 28       	lddpc	r8,8000399c <mc_set_motor_direction+0x8>
80003996:	91 1c       	st.w	r8[0x4],r12
}
80003998:	5e fc       	retal	r12
8000399a:	d7 03       	nop
8000399c:	00 00       	add	r0,r0
8000399e:	07 b0       	ld.ub	r0,r3[0x3]

800039a0 <mc_control_task>:
    
    MC_BLDC_motor.mc_state = INIT;
}

void mc_control_task()
{
800039a0:	d4 31       	pushm	r0-r7,lr
800039a2:	20 1d       	sub	sp,4
   switch(MC_BLDC_motor.mc_state)
800039a4:	4e a7       	lddpc	r7,80003b4c <mc_control_task+0x1ac>
800039a6:	6e 08       	ld.w	r8,r7[0x0]
800039a8:	58 18       	cp.w	r8,1
800039aa:	e0 80 00 c3 	breq	80003b30 <mc_control_task+0x190>
800039ae:	c0 62       	brcc	800039ba <mc_control_task+0x1a>
   {
      case INIT:
        mc_global_init();
800039b0:	cf 6d       	rcall	80003d9c <mc_global_init>
800039b2:	30 28       	mov	r8,2
        MC_BLDC_motor.mc_state = START;
800039b4:	8f 08       	st.w	r7[0x0],r8
800039b6:	2f fd       	sub	sp,-4
        break;
      case RUN:
        if (msg_sent==1) { mc_output_messages(); }
        break;
   }
}
800039b8:	d8 32       	popm	r0-r7,pc
800039ba:	58 28       	cp.w	r8,2
    MC_BLDC_motor.mc_state = INIT;
}

void mc_control_task()
{
   switch(MC_BLDC_motor.mc_state)
800039bc:	e0 80 00 be 	breq	80003b38 <mc_control_task+0x198>
800039c0:	58 38       	cp.w	r8,3
800039c2:	cf a1       	brne	800039b6 <mc_control_task+0x16>
800039c4:	4e 3a       	lddpc	r10,80003b50 <mc_control_task+0x1b0>
        mc_register_callback(FOC_state_machine);
        FOC_set_state_machine(FOC_state_ramp_up_init);
        MC_BLDC_motor.mc_state = RUN;
        break;
      case RUN:
        if (msg_sent==1) { mc_output_messages(); }
800039c6:	30 19       	mov	r9,1
800039c8:	15 88       	ld.ub	r8,r10[0x0]
800039ca:	10 95       	mov	r5,r8
800039cc:	f2 08 18 00 	cp.b	r8,r9
800039d0:	cf 31       	brne	800039b6 <mc_control_task+0x16>
800039d2:	6e 29       	ld.w	r9,r7[0x8]
 */
//! @{
static void mc_output_messages(void)
{
     //Message IDM
     msg_idm.data[0] = MC_BLDC_motor.Idm&0x000000FF;    
800039d4:	6e 28       	ld.w	r8,r7[0x8]
     msg_idm.data[1] = MC_BLDC_motor.Idm>>8;
800039d6:	a9 48       	asr	r8,0x8
800039d8:	4d fa       	lddpc	r10,80003b54 <mc_control_task+0x1b4>
 */
//! @{
static void mc_output_messages(void)
{
     //Message IDM
     msg_idm.data[0] = MC_BLDC_motor.Idm&0x000000FF;    
800039da:	b4 a9       	st.b	r10[0x2],r9
800039dc:	b4 b8       	st.b	r10[0x3],r8
     msg_idm.data[1] = MC_BLDC_motor.Idm>>8;
800039de:	6e 29       	ld.w	r9,r7[0x8]
     msg_idm.data[2] = MC_BLDC_motor.Idm>>16;
800039e0:	6e 28       	ld.w	r8,r7[0x8]
     msg_idm.data[3] = MC_BLDC_motor.Idm>>24; 
800039e2:	b1 49       	asr	r9,0x10
static void mc_output_messages(void)
{
     //Message IDM
     msg_idm.data[0] = MC_BLDC_motor.Idm&0x000000FF;    
     msg_idm.data[1] = MC_BLDC_motor.Idm>>8;
     msg_idm.data[2] = MC_BLDC_motor.Idm>>16;
800039e4:	b9 48       	asr	r8,0x18
     msg_idm.data[3] = MC_BLDC_motor.Idm>>24; 
800039e6:	b4 c9       	st.b	r10[0x4],r9
static void mc_output_messages(void)
{
     //Message IDM
     msg_idm.data[0] = MC_BLDC_motor.Idm&0x000000FF;    
     msg_idm.data[1] = MC_BLDC_motor.Idm>>8;
     msg_idm.data[2] = MC_BLDC_motor.Idm>>16;
800039e8:	b4 d8       	st.b	r10[0x5],r8
     msg_idm.data[3] = MC_BLDC_motor.Idm>>24; 
800039ea:	6e 39       	ld.w	r9,r7[0xc]
     //Message IDREF       
     msg_idref.data[0] = MC_BLDC_motor.Idref&0x000000FF;    
800039ec:	6e 38       	ld.w	r8,r7[0xc]
     msg_idref.data[1] = MC_BLDC_motor.Idref>>8;
800039ee:	a9 48       	asr	r8,0x8
800039f0:	4d aa       	lddpc	r10,80003b58 <mc_control_task+0x1b8>
     msg_idm.data[0] = MC_BLDC_motor.Idm&0x000000FF;    
     msg_idm.data[1] = MC_BLDC_motor.Idm>>8;
     msg_idm.data[2] = MC_BLDC_motor.Idm>>16;
     msg_idm.data[3] = MC_BLDC_motor.Idm>>24; 
     //Message IDREF       
     msg_idref.data[0] = MC_BLDC_motor.Idref&0x000000FF;    
800039f2:	b4 a9       	st.b	r10[0x2],r9
800039f4:	b4 b8       	st.b	r10[0x3],r8
     msg_idref.data[1] = MC_BLDC_motor.Idref>>8;
800039f6:	6e 39       	ld.w	r9,r7[0xc]
     msg_idref.data[2] = MC_BLDC_motor.Idref>>16;
800039f8:	6e 38       	ld.w	r8,r7[0xc]
     msg_idref.data[3] = MC_BLDC_motor.Idref>>24;    
800039fa:	b1 49       	asr	r9,0x10
     msg_idm.data[2] = MC_BLDC_motor.Idm>>16;
     msg_idm.data[3] = MC_BLDC_motor.Idm>>24; 
     //Message IDREF       
     msg_idref.data[0] = MC_BLDC_motor.Idref&0x000000FF;    
     msg_idref.data[1] = MC_BLDC_motor.Idref>>8;
     msg_idref.data[2] = MC_BLDC_motor.Idref>>16;
800039fc:	b9 48       	asr	r8,0x18
     msg_idref.data[3] = MC_BLDC_motor.Idref>>24;    
800039fe:	b4 c9       	st.b	r10[0x4],r9
     msg_idm.data[2] = MC_BLDC_motor.Idm>>16;
     msg_idm.data[3] = MC_BLDC_motor.Idm>>24; 
     //Message IDREF       
     msg_idref.data[0] = MC_BLDC_motor.Idref&0x000000FF;    
     msg_idref.data[1] = MC_BLDC_motor.Idref>>8;
     msg_idref.data[2] = MC_BLDC_motor.Idref>>16;
80003a00:	b4 d8       	st.b	r10[0x5],r8
     msg_idref.data[3] = MC_BLDC_motor.Idref>>24;    
80003a02:	6e 49       	ld.w	r9,r7[0x10]
     //Message IQM
     msg_iqm.data[0] = MC_BLDC_motor.Iqm&0x000000FF;    
80003a04:	6e 48       	ld.w	r8,r7[0x10]
     msg_iqm.data[1] = MC_BLDC_motor.Iqm>>8;
80003a06:	a9 48       	asr	r8,0x8
80003a08:	4d 5a       	lddpc	r10,80003b5c <mc_control_task+0x1bc>
     msg_idref.data[0] = MC_BLDC_motor.Idref&0x000000FF;    
     msg_idref.data[1] = MC_BLDC_motor.Idref>>8;
     msg_idref.data[2] = MC_BLDC_motor.Idref>>16;
     msg_idref.data[3] = MC_BLDC_motor.Idref>>24;    
     //Message IQM
     msg_iqm.data[0] = MC_BLDC_motor.Iqm&0x000000FF;    
80003a0a:	b4 a9       	st.b	r10[0x2],r9
80003a0c:	b4 b8       	st.b	r10[0x3],r8
     msg_iqm.data[1] = MC_BLDC_motor.Iqm>>8;
80003a0e:	6e 49       	ld.w	r9,r7[0x10]
     msg_iqm.data[2] = MC_BLDC_motor.Iqm>>16;
80003a10:	6e 48       	ld.w	r8,r7[0x10]
     msg_iqm.data[3] = MC_BLDC_motor.Iqm>>24; 
80003a12:	b1 49       	asr	r9,0x10
     msg_idref.data[2] = MC_BLDC_motor.Idref>>16;
     msg_idref.data[3] = MC_BLDC_motor.Idref>>24;    
     //Message IQM
     msg_iqm.data[0] = MC_BLDC_motor.Iqm&0x000000FF;    
     msg_iqm.data[1] = MC_BLDC_motor.Iqm>>8;
     msg_iqm.data[2] = MC_BLDC_motor.Iqm>>16;
80003a14:	b9 48       	asr	r8,0x18
     msg_iqm.data[3] = MC_BLDC_motor.Iqm>>24; 
80003a16:	b4 c9       	st.b	r10[0x4],r9
     msg_idref.data[2] = MC_BLDC_motor.Idref>>16;
     msg_idref.data[3] = MC_BLDC_motor.Idref>>24;    
     //Message IQM
     msg_iqm.data[0] = MC_BLDC_motor.Iqm&0x000000FF;    
     msg_iqm.data[1] = MC_BLDC_motor.Iqm>>8;
     msg_iqm.data[2] = MC_BLDC_motor.Iqm>>16;
80003a18:	b4 d8       	st.b	r10[0x5],r8
     msg_iqm.data[3] = MC_BLDC_motor.Iqm>>24; 
80003a1a:	6e 59       	ld.w	r9,r7[0x14]
     //Message IQREF       
     msg_iqref.data[0] = MC_BLDC_motor.Iqref&0x000000FF;    
80003a1c:	6e 58       	ld.w	r8,r7[0x14]
     msg_iqref.data[1] = MC_BLDC_motor.Iqref>>8;
80003a1e:	a9 48       	asr	r8,0x8
80003a20:	4d 0a       	lddpc	r10,80003b60 <mc_control_task+0x1c0>
     msg_iqm.data[0] = MC_BLDC_motor.Iqm&0x000000FF;    
     msg_iqm.data[1] = MC_BLDC_motor.Iqm>>8;
     msg_iqm.data[2] = MC_BLDC_motor.Iqm>>16;
     msg_iqm.data[3] = MC_BLDC_motor.Iqm>>24; 
     //Message IQREF       
     msg_iqref.data[0] = MC_BLDC_motor.Iqref&0x000000FF;    
80003a22:	b4 a9       	st.b	r10[0x2],r9
80003a24:	b4 b8       	st.b	r10[0x3],r8
     msg_iqref.data[1] = MC_BLDC_motor.Iqref>>8;
80003a26:	6e 59       	ld.w	r9,r7[0x14]
     msg_iqref.data[2] = MC_BLDC_motor.Iqref>>16;
80003a28:	6e 58       	ld.w	r8,r7[0x14]
     msg_iqref.data[3] = MC_BLDC_motor.Iqref>>24;  
80003a2a:	b9 48       	asr	r8,0x18
80003a2c:	b1 49       	asr	r9,0x10
     msg_iqm.data[2] = MC_BLDC_motor.Iqm>>16;
     msg_iqm.data[3] = MC_BLDC_motor.Iqm>>24; 
     //Message IQREF       
     msg_iqref.data[0] = MC_BLDC_motor.Iqref&0x000000FF;    
     msg_iqref.data[1] = MC_BLDC_motor.Iqref>>8;
     msg_iqref.data[2] = MC_BLDC_motor.Iqref>>16;
80003a2e:	b4 d8       	st.b	r10[0x5],r8
     msg_iqref.data[3] = MC_BLDC_motor.Iqref>>24;  
80003a30:	b4 c9       	st.b	r10[0x4],r9
     msg_iqm.data[2] = MC_BLDC_motor.Iqm>>16;
     msg_iqm.data[3] = MC_BLDC_motor.Iqm>>24; 
     //Message IQREF       
     msg_iqref.data[0] = MC_BLDC_motor.Iqref&0x000000FF;    
     msg_iqref.data[1] = MC_BLDC_motor.Iqref>>8;
     msg_iqref.data[2] = MC_BLDC_motor.Iqref>>16;
80003a32:	ef 08 00 18 	ld.sh	r8,r7[24]
     msg_iqref.data[3] = MC_BLDC_motor.Iqref>>24;  
     //Message VM
     msg_vm.data[0] = MC_BLDC_motor.Speedm&0x000000FF;    
80003a36:	4c c9       	lddpc	r9,80003b64 <mc_control_task+0x1c4>
80003a38:	b2 a8       	st.b	r9[0x2],r8
80003a3a:	ef 08 00 18 	ld.sh	r8,r7[24]
     msg_vm.data[1] = MC_BLDC_motor.Speedm>>8;
80003a3e:	f1 d8 c1 08 	bfextu	r8,r8,0x8,0x8
80003a42:	ef 0a 00 18 	ld.sh	r10,r7[24]
     msg_vm.data[2] = MC_BLDC_motor.Speedm>>16;
80003a46:	30 0b       	mov	r11,0
80003a48:	b2 b8       	st.b	r9[0x3],r8
     msg_iqref.data[1] = MC_BLDC_motor.Iqref>>8;
     msg_iqref.data[2] = MC_BLDC_motor.Iqref>>16;
     msg_iqref.data[3] = MC_BLDC_motor.Iqref>>24;  
     //Message VM
     msg_vm.data[0] = MC_BLDC_motor.Speedm&0x000000FF;    
     msg_vm.data[1] = MC_BLDC_motor.Speedm>>8;
80003a4a:	4c 8c       	lddpc	r12,80003b68 <mc_control_task+0x1c8>
     msg_vref.data[0] = (MC_BLDC_motor.Speedref/transf_v)&0x000000FF;    
     msg_vref.data[1] = (MC_BLDC_motor.Speedref/transf_v)>>8;
     msg_vref.data[2] = (MC_BLDC_motor.Speedref/transf_v)>>16;
     msg_vref.data[3] = (MC_BLDC_motor.Speedref/transf_v)>>24;   
     //Message SPEEDM      
     msg_speedm.data[0] = MC_BLDC_motor.Speedm&0x000000FF;    
80003a4c:	ef 08 00 18 	ld.sh	r8,r7[24]
     msg_iqref.data[3] = MC_BLDC_motor.Iqref>>24;  
     //Message VM
     msg_vm.data[0] = MC_BLDC_motor.Speedm&0x000000FF;    
     msg_vm.data[1] = MC_BLDC_motor.Speedm>>8;
     msg_vm.data[2] = MC_BLDC_motor.Speedm>>16;
     msg_vm.data[3] = MC_BLDC_motor.Speedm>>24; 
80003a50:	4c 7e       	lddpc	lr,80003b6c <mc_control_task+0x1cc>
     msg_speedm.data[0] = MC_BLDC_motor.Speedm&0x000000FF;    
     msg_speedm.data[1] = MC_BLDC_motor.Speedm>>8;
     msg_speedm.data[2] = MC_BLDC_motor.Speedm>>16;
     msg_speedm.data[3] = MC_BLDC_motor.Speedm>>24;       
     //Message SPEEDEST       
     msg_speedest.data[0] = MC_BLDC_motor.SpeedEst&0x000000FF;    
80003a52:	6e 74       	ld.w	r4,r7[0x1c]
     msg_vm.data[0] = MC_BLDC_motor.Speedm&0x000000FF;    
     msg_vm.data[1] = MC_BLDC_motor.Speedm>>8;
     msg_vm.data[2] = MC_BLDC_motor.Speedm>>16;
     msg_vm.data[3] = MC_BLDC_motor.Speedm>>24; 
     //Message VREF       
     msg_vref.data[0] = (MC_BLDC_motor.Speedref/transf_v)&0x000000FF;    
80003a54:	b2 db       	st.b	r9[0x5],r11
     msg_iqref.data[3] = MC_BLDC_motor.Iqref>>24;  
     //Message VM
     msg_vm.data[0] = MC_BLDC_motor.Speedm&0x000000FF;    
     msg_vm.data[1] = MC_BLDC_motor.Speedm>>8;
     msg_vm.data[2] = MC_BLDC_motor.Speedm>>16;
     msg_vm.data[3] = MC_BLDC_motor.Speedm>>24; 
80003a56:	6e 73       	ld.w	r3,r7[0x1c]
     //Message VREF       
     msg_vref.data[0] = (MC_BLDC_motor.Speedref/transf_v)&0x000000FF;    
     msg_vref.data[1] = (MC_BLDC_motor.Speedref/transf_v)>>8;
80003a58:	b2 cb       	st.b	r9[0x4],r11
     msg_iqref.data[2] = MC_BLDC_motor.Iqref>>16;
     msg_iqref.data[3] = MC_BLDC_motor.Iqref>>24;  
     //Message VM
     msg_vm.data[0] = MC_BLDC_motor.Speedm&0x000000FF;    
     msg_vm.data[1] = MC_BLDC_motor.Speedm>>8;
     msg_vm.data[2] = MC_BLDC_motor.Speedm>>16;
80003a5a:	6e 71       	ld.w	r1,r7[0x1c]
     msg_vm.data[3] = MC_BLDC_motor.Speedm>>24; 
     //Message VREF       
     msg_vref.data[0] = (MC_BLDC_motor.Speedref/transf_v)&0x000000FF;    
     msg_vref.data[1] = (MC_BLDC_motor.Speedref/transf_v)>>8;
     msg_vref.data[2] = (MC_BLDC_motor.Speedref/transf_v)>>16;
80003a5c:	b8 db       	st.b	r12[0x5],r11
     msg_vref.data[3] = (MC_BLDC_motor.Speedref/transf_v)>>24;   
     //Message SPEEDM      
     msg_speedm.data[0] = MC_BLDC_motor.Speedm&0x000000FF;    
     msg_speedm.data[1] = MC_BLDC_motor.Speedm>>8;
     msg_speedm.data[2] = MC_BLDC_motor.Speedm>>16;
     msg_speedm.data[3] = MC_BLDC_motor.Speedm>>24;       
80003a5e:	bc db       	st.b	lr[0x5],r11
     //Message SPEEDEST       
     msg_speedest.data[0] = MC_BLDC_motor.SpeedEst&0x000000FF;    
     msg_speedest.data[1] = MC_BLDC_motor.SpeedEst>>8;
     msg_speedest.data[2] = MC_BLDC_motor.SpeedEst>>16;
     msg_speedest.data[3] = MC_BLDC_motor.SpeedEst>>24;   
80003a60:	b8 cb       	st.b	r12[0x4],r11
     msg_vref.data[2] = (MC_BLDC_motor.Speedref/transf_v)>>16;
     msg_vref.data[3] = (MC_BLDC_motor.Speedref/transf_v)>>24;   
     //Message SPEEDM      
     msg_speedm.data[0] = MC_BLDC_motor.Speedm&0x000000FF;    
     msg_speedm.data[1] = MC_BLDC_motor.Speedm>>8;
     msg_speedm.data[2] = MC_BLDC_motor.Speedm>>16;
80003a62:	bc cb       	st.b	lr[0x4],r11
     msg_speedm.data[3] = MC_BLDC_motor.Speedm>>24;       
     //Message SPEEDEST       
     msg_speedest.data[0] = MC_BLDC_motor.SpeedEst&0x000000FF;    
     msg_speedest.data[1] = MC_BLDC_motor.SpeedEst>>8;
     msg_speedest.data[2] = MC_BLDC_motor.SpeedEst>>16;
80003a64:	e2 09 14 1f 	asr	r9,r1,0x1f
     msg_vm.data[2] = MC_BLDC_motor.Speedm>>16;
     msg_vm.data[3] = MC_BLDC_motor.Speedm>>24; 
     //Message VREF       
     msg_vref.data[0] = (MC_BLDC_motor.Speedref/transf_v)&0x000000FF;    
     msg_vref.data[1] = (MC_BLDC_motor.Speedref/transf_v)>>8;
     msg_vref.data[2] = (MC_BLDC_motor.Speedref/transf_v)>>16;
80003a68:	e0 66 02 bd 	mov	r6,701
     msg_vm.data[0] = MC_BLDC_motor.Speedm&0x000000FF;    
     msg_vm.data[1] = MC_BLDC_motor.Speedm>>8;
     msg_vm.data[2] = MC_BLDC_motor.Speedm>>16;
     msg_vm.data[3] = MC_BLDC_motor.Speedm>>24; 
     //Message VREF       
     msg_vref.data[0] = (MC_BLDC_motor.Speedref/transf_v)&0x000000FF;    
80003a6c:	ea 16 4e 20 	orh	r6,0x4e20
80003a70:	50 09       	stdsp	sp[0x0],r9
     msg_vref.data[1] = (MC_BLDC_motor.Speedref/transf_v)>>8;
     msg_vref.data[2] = (MC_BLDC_motor.Speedref/transf_v)>>16;
80003a72:	6e 7a       	ld.w	r10,r7[0x1c]
     msg_vref.data[3] = (MC_BLDC_motor.Speedref/transf_v)>>24;   
80003a74:	f4 06 04 48 	muls.d	r8,r10,r6
80003a78:	4b e8       	lddpc	r8,80003b70 <mc_control_task+0x1d0>
80003a7a:	bf 5a       	asr	r10,0x1f
80003a7c:	b3 49       	asr	r9,0x12
80003a7e:	14 19       	sub	r9,r10
80003a80:	ef 0a 00 18 	ld.sh	r10,r7[24]
     //Message SPEEDM      
     msg_speedm.data[0] = MC_BLDC_motor.Speedm&0x000000FF;    
80003a84:	b9 49       	asr	r9,0x18
     msg_vm.data[3] = MC_BLDC_motor.Speedm>>24; 
     //Message VREF       
     msg_vref.data[0] = (MC_BLDC_motor.Speedref/transf_v)&0x000000FF;    
     msg_vref.data[1] = (MC_BLDC_motor.Speedref/transf_v)>>8;
     msg_vref.data[2] = (MC_BLDC_motor.Speedref/transf_v)>>16;
     msg_vref.data[3] = (MC_BLDC_motor.Speedref/transf_v)>>24;   
80003a86:	b0 d9       	st.b	r8[0x5],r9
80003a88:	ef 08 00 18 	ld.sh	r8,r7[24]
     //Message SPEEDM      
     msg_speedm.data[0] = MC_BLDC_motor.Speedm&0x000000FF;    
     msg_speedm.data[1] = MC_BLDC_motor.Speedm>>8;
80003a8c:	f1 d8 c1 08 	bfextu	r8,r8,0x8,0x8
80003a90:	ef 09 00 18 	ld.sh	r9,r7[24]
     msg_speedm.data[2] = MC_BLDC_motor.Speedm>>16;
80003a94:	b8 b8       	st.b	r12[0x3],r8
     msg_vref.data[1] = (MC_BLDC_motor.Speedref/transf_v)>>8;
     msg_vref.data[2] = (MC_BLDC_motor.Speedref/transf_v)>>16;
     msg_vref.data[3] = (MC_BLDC_motor.Speedref/transf_v)>>24;   
     //Message SPEEDM      
     msg_speedm.data[0] = MC_BLDC_motor.Speedm&0x000000FF;    
     msg_speedm.data[1] = MC_BLDC_motor.Speedm>>8;
80003a96:	ef 08 00 18 	ld.sh	r8,r7[24]
     msg_speedm.data[2] = MC_BLDC_motor.Speedm>>16;
     msg_speedm.data[3] = MC_BLDC_motor.Speedm>>24;       
80003a9a:	e8 06 04 48 	muls.d	r8,r4,r6
     msg_vm.data[0] = MC_BLDC_motor.Speedm&0x000000FF;    
     msg_vm.data[1] = MC_BLDC_motor.Speedm>>8;
     msg_vm.data[2] = MC_BLDC_motor.Speedm>>16;
     msg_vm.data[3] = MC_BLDC_motor.Speedm>>24; 
     //Message VREF       
     msg_vref.data[0] = (MC_BLDC_motor.Speedref/transf_v)&0x000000FF;    
80003a9e:	e8 02 14 1f 	asr	r2,r4,0x1f
80003aa2:	f2 08 14 12 	asr	r8,r9,0x12
80003aa6:	f0 02 01 09 	sub	r9,r8,r2
80003aaa:	b8 aa       	st.b	r12[0x2],r10
     msg_vref.data[1] = (MC_BLDC_motor.Speedref/transf_v)>>8;
     msg_vref.data[2] = (MC_BLDC_motor.Speedref/transf_v)>>16;
     msg_vref.data[3] = (MC_BLDC_motor.Speedref/transf_v)>>24;   
     //Message SPEEDM      
     msg_speedm.data[0] = MC_BLDC_motor.Speedm&0x000000FF;    
80003aac:	4b 1a       	lddpc	r10,80003b70 <mc_control_task+0x1d0>
     msg_vm.data[0] = MC_BLDC_motor.Speedm&0x000000FF;    
     msg_vm.data[1] = MC_BLDC_motor.Speedm>>8;
     msg_vm.data[2] = MC_BLDC_motor.Speedm>>16;
     msg_vm.data[3] = MC_BLDC_motor.Speedm>>24; 
     //Message VREF       
     msg_vref.data[0] = (MC_BLDC_motor.Speedref/transf_v)&0x000000FF;    
80003aae:	b4 a9       	st.b	r10[0x2],r9
80003ab0:	ef 09 00 20 	ld.sh	r9,r7[32]
     msg_speedm.data[0] = MC_BLDC_motor.Speedm&0x000000FF;    
     msg_speedm.data[1] = MC_BLDC_motor.Speedm>>8;
     msg_speedm.data[2] = MC_BLDC_motor.Speedm>>16;
     msg_speedm.data[3] = MC_BLDC_motor.Speedm>>24;       
     //Message SPEEDEST       
     msg_speedest.data[0] = MC_BLDC_motor.SpeedEst&0x000000FF;    
80003ab4:	ef 08 00 20 	ld.sh	r8,r7[32]
     msg_speedest.data[1] = MC_BLDC_motor.SpeedEst>>8;
80003ab8:	f1 d8 c1 08 	bfextu	r8,r8,0x8,0x8
80003abc:	bc a9       	st.b	lr[0x2],r9
     msg_speedm.data[0] = MC_BLDC_motor.Speedm&0x000000FF;    
     msg_speedm.data[1] = MC_BLDC_motor.Speedm>>8;
     msg_speedm.data[2] = MC_BLDC_motor.Speedm>>16;
     msg_speedm.data[3] = MC_BLDC_motor.Speedm>>24;       
     //Message SPEEDEST       
     msg_speedest.data[0] = MC_BLDC_motor.SpeedEst&0x000000FF;    
80003abe:	bc b8       	st.b	lr[0x3],r8
     msg_speedest.data[1] = MC_BLDC_motor.SpeedEst>>8;
80003ac0:	ef 09 00 20 	ld.sh	r9,r7[32]
     msg_speedest.data[2] = MC_BLDC_motor.SpeedEst>>16;
80003ac4:	ef 08 00 20 	ld.sh	r8,r7[32]
     msg_speedest.data[3] = MC_BLDC_motor.SpeedEst>>24;   
80003ac8:	ef 08 00 22 	ld.sh	r8,r7[34]
     //Message TETAM       
     msg_tetam.data[0] = MC_BLDC_motor.Tetam&0x000000FF;    
80003acc:	e6 00 14 1f 	asr	r0,r3,0x1f
     msg_vm.data[1] = MC_BLDC_motor.Speedm>>8;
     msg_vm.data[2] = MC_BLDC_motor.Speedm>>16;
     msg_vm.data[3] = MC_BLDC_motor.Speedm>>24; 
     //Message VREF       
     msg_vref.data[0] = (MC_BLDC_motor.Speedref/transf_v)&0x000000FF;    
     msg_vref.data[1] = (MC_BLDC_motor.Speedref/transf_v)>>8;
80003ad0:	e6 06 04 42 	muls.d	r2,r3,r6
80003ad4:	b3 43       	asr	r3,0x12
80003ad6:	00 13       	sub	r3,r0
80003ad8:	a9 43       	asr	r3,0x8
80003ada:	b4 b3       	st.b	r10[0x3],r3
80003adc:	4a 6a       	lddpc	r10,80003b74 <mc_control_task+0x1d4>
     msg_speedest.data[0] = MC_BLDC_motor.SpeedEst&0x000000FF;    
     msg_speedest.data[1] = MC_BLDC_motor.SpeedEst>>8;
     msg_speedest.data[2] = MC_BLDC_motor.SpeedEst>>16;
     msg_speedest.data[3] = MC_BLDC_motor.SpeedEst>>24;   
     //Message TETAM       
     msg_tetam.data[0] = MC_BLDC_motor.Tetam&0x000000FF;    
80003ade:	b4 a8       	st.b	r10[0x2],r8
80003ae0:	4a 48       	lddpc	r8,80003b70 <mc_control_task+0x1d0>
     msg_vm.data[2] = MC_BLDC_motor.Speedm>>16;
     msg_vm.data[3] = MC_BLDC_motor.Speedm>>24; 
     //Message VREF       
     msg_vref.data[0] = (MC_BLDC_motor.Speedref/transf_v)&0x000000FF;    
     msg_vref.data[1] = (MC_BLDC_motor.Speedref/transf_v)>>8;
     msg_vref.data[2] = (MC_BLDC_motor.Speedref/transf_v)>>16;
80003ae2:	40 09       	lddsp	r9,sp[0x0]
80003ae4:	e2 06 04 40 	muls.d	r0,r1,r6
80003ae8:	b3 41       	asr	r1,0x12
80003aea:	12 11       	sub	r1,r9
80003aec:	b1 41       	asr	r1,0x10
80003aee:	b0 c1       	st.b	r8[0x4],r1
80003af0:	ef 08 00 22 	ld.sh	r8,r7[34]
     msg_speedest.data[1] = MC_BLDC_motor.SpeedEst>>8;
     msg_speedest.data[2] = MC_BLDC_motor.SpeedEst>>16;
     msg_speedest.data[3] = MC_BLDC_motor.SpeedEst>>24;   
     //Message TETAM       
     msg_tetam.data[0] = MC_BLDC_motor.Tetam&0x000000FF;    
     msg_tetam.data[1] = MC_BLDC_motor.Tetam>>8;
80003af4:	f1 d8 c1 08 	bfextu	r8,r8,0x8,0x8
80003af8:	b4 b8       	st.b	r10[0x3],r8
80003afa:	ef 08 00 22 	ld.sh	r8,r7[34]
     msg_tetam.data[2] = MC_BLDC_motor.Tetam>>16;
80003afe:	ef 08 00 22 	ld.sh	r8,r7[34]
     msg_tetam.data[3] = MC_BLDC_motor.Tetam>>24;   
80003b02:	ef 0a 00 26 	ld.sh	r10,r7[38]
     //Message TETAEST       
     msg_tetaest.data[0] = MC_BLDC_motor.TetaEst&0x000000FF;    
80003b06:	ef 09 00 26 	ld.sh	r9,r7[38]
     msg_tetaest.data[1] = MC_BLDC_motor.TetaEst>>8;
80003b0a:	ef 08 00 26 	ld.sh	r8,r7[38]
     msg_tetaest.data[2] = MC_BLDC_motor.TetaEst>>16;
80003b0e:	ef 08 00 26 	ld.sh	r8,r7[38]
     msg_tetaest.data[3] = MC_BLDC_motor.TetaEst>>24;        
80003b12:	49 08       	lddpc	r8,80003b50 <mc_control_task+0x1b0>
     msg_sent = 0;
80003b14:	f3 d9 c1 08 	bfextu	r9,r9,0x8,0x8
     msg_tetam.data[1] = MC_BLDC_motor.Tetam>>8;
     msg_tetam.data[2] = MC_BLDC_motor.Tetam>>16;
     msg_tetam.data[3] = MC_BLDC_motor.Tetam>>24;   
     //Message TETAEST       
     msg_tetaest.data[0] = MC_BLDC_motor.TetaEst&0x000000FF;    
     msg_tetaest.data[1] = MC_BLDC_motor.TetaEst>>8;
80003b18:	b0 8b       	st.b	r8[0x0],r11
     msg_tetaest.data[2] = MC_BLDC_motor.TetaEst>>16;
     msg_tetaest.data[3] = MC_BLDC_motor.TetaEst>>24;        
     msg_sent = 0;
80003b1a:	49 78       	lddpc	r8,80003b74 <mc_control_task+0x1d4>
     msg_speedest.data[3] = MC_BLDC_motor.SpeedEst>>24;   
     //Message TETAM       
     msg_tetam.data[0] = MC_BLDC_motor.Tetam&0x000000FF;    
     msg_tetam.data[1] = MC_BLDC_motor.Tetam>>8;
     msg_tetam.data[2] = MC_BLDC_motor.Tetam>>16;
     msg_tetam.data[3] = MC_BLDC_motor.Tetam>>24;   
80003b1c:	b0 db       	st.b	r8[0x5],r11
80003b1e:	b0 cb       	st.b	r8[0x4],r11
     msg_speedest.data[2] = MC_BLDC_motor.SpeedEst>>16;
     msg_speedest.data[3] = MC_BLDC_motor.SpeedEst>>24;   
     //Message TETAM       
     msg_tetam.data[0] = MC_BLDC_motor.Tetam&0x000000FF;    
     msg_tetam.data[1] = MC_BLDC_motor.Tetam>>8;
     msg_tetam.data[2] = MC_BLDC_motor.Tetam>>16;
80003b20:	49 68       	lddpc	r8,80003b78 <mc_control_task+0x1d8>
     msg_tetam.data[3] = MC_BLDC_motor.Tetam>>24;   
     //Message TETAEST       
     msg_tetaest.data[0] = MC_BLDC_motor.TetaEst&0x000000FF;    
80003b22:	b0 b9       	st.b	r8[0x3],r9
     msg_tetaest.data[1] = MC_BLDC_motor.TetaEst>>8;
80003b24:	b0 aa       	st.b	r8[0x2],r10
     msg_tetam.data[0] = MC_BLDC_motor.Tetam&0x000000FF;    
     msg_tetam.data[1] = MC_BLDC_motor.Tetam>>8;
     msg_tetam.data[2] = MC_BLDC_motor.Tetam>>16;
     msg_tetam.data[3] = MC_BLDC_motor.Tetam>>24;   
     //Message TETAEST       
     msg_tetaest.data[0] = MC_BLDC_motor.TetaEst&0x000000FF;    
80003b26:	49 69       	lddpc	r9,80003b7c <mc_control_task+0x1dc>
     msg_tetaest.data[1] = MC_BLDC_motor.TetaEst>>8;
     msg_tetaest.data[2] = MC_BLDC_motor.TetaEst>>16;
     msg_tetaest.data[3] = MC_BLDC_motor.TetaEst>>24;        
     msg_sent = 0;
     msg_rdy  = 1;
80003b28:	b0 db       	st.b	r8[0x5],r11
     msg_tetam.data[3] = MC_BLDC_motor.Tetam>>24;   
     //Message TETAEST       
     msg_tetaest.data[0] = MC_BLDC_motor.TetaEst&0x000000FF;    
     msg_tetaest.data[1] = MC_BLDC_motor.TetaEst>>8;
     msg_tetaest.data[2] = MC_BLDC_motor.TetaEst>>16;
     msg_tetaest.data[3] = MC_BLDC_motor.TetaEst>>24;        
80003b2a:	b0 cb       	st.b	r8[0x4],r11
     msg_tetam.data[2] = MC_BLDC_motor.Tetam>>16;
     msg_tetam.data[3] = MC_BLDC_motor.Tetam>>24;   
     //Message TETAEST       
     msg_tetaest.data[0] = MC_BLDC_motor.TetaEst&0x000000FF;    
     msg_tetaest.data[1] = MC_BLDC_motor.TetaEst>>8;
     msg_tetaest.data[2] = MC_BLDC_motor.TetaEst>>16;
80003b2c:	b2 85       	st.b	r9[0x0],r5
     msg_tetaest.data[3] = MC_BLDC_motor.TetaEst>>24;        
     msg_sent = 0;
     msg_rdy  = 1;
80003b2e:	c4 4b       	rjmp	800039b6 <mc_control_task+0x16>
80003b30:	c5 8c       	rcall	80003be0 <mc_unregister_callback>
      case INIT:
        mc_global_init();
        MC_BLDC_motor.mc_state = START;
        break;
      case STOP:
        mc_unregister_callback();
80003b32:	cb bc       	rcall	80003ca8 <mc_lowlevel_stop>
80003b34:	2f fd       	sub	sp,-4
        mc_lowlevel_stop();
80003b36:	d8 32       	popm	r0-r7,pc
80003b38:	ce ac       	rcall	80003d0c <mc_lowlevel_start>
        break;
      case RUN:
        if (msg_sent==1) { mc_output_messages(); }
        break;
   }
}
80003b3a:	fe cc fc 6a 	sub	r12,pc,-918
      case STOP:
        mc_unregister_callback();
        mc_lowlevel_stop();
        break;
      case START:
        mc_lowlevel_start();
80003b3e:	c4 bc       	rcall	80003bd4 <mc_register_callback>
80003b40:	30 0c       	mov	r12,0
        mc_register_callback(FOC_state_machine);
80003b42:	c4 fd       	rcall	80003de0 <FOC_set_state_machine>
80003b44:	30 38       	mov	r8,3
80003b46:	8f 08       	st.w	r7[0x0],r8
        FOC_set_state_machine(FOC_state_ramp_up_init);
80003b48:	2f fd       	sub	sp,-4
80003b4a:	d8 32       	popm	r0-r7,pc
80003b4c:	00 00       	add	r0,r0
        MC_BLDC_motor.mc_state = RUN;
80003b4e:	07 b0       	ld.ub	r0,r3[0x3]
80003b50:	00 00       	add	r0,r0
        break;
      case RUN:
        if (msg_sent==1) { mc_output_messages(); }
        break;
   }
}
80003b52:	06 a8       	st.w	r3++,r8
80003b54:	00 00       	add	r0,r0
80003b56:	09 da       	ld.ub	r10,r4[0x5]
80003b58:	00 00       	add	r0,r0
80003b5a:	0d de       	ld.ub	lr,r6[0x5]
80003b5c:	00 00       	add	r0,r0
80003b5e:	0a db       	st.w	--r5,r11
80003b60:	00 00       	add	r0,r0
80003b62:	0e df       	st.w	--r7,pc
80003b64:	00 00       	add	r0,r0
80003b66:	07 d8       	ld.ub	r8,r3[0x5]
80003b68:	00 00       	add	r0,r0
80003b6a:	10 e1       	st.h	--r8,r1
80003b6c:	00 00       	add	r0,r0
80003b6e:	06 ac       	st.w	r3++,r12
80003b70:	00 00       	add	r0,r0
80003b72:	0f e0       	ld.ub	r0,r7[0x6]
80003b74:	00 00       	add	r0,r0
80003b76:	0b dc       	ld.ub	r12,r5[0x5]
80003b78:	00 00       	add	r0,r0
80003b7a:	0c dd       	st.w	--r6,sp
80003b7c:	00 00       	add	r0,r0
80003b7e:	06 a9       	st.w	r3++,r9

80003b80 <pwm_int_handler>:
#if __GNUC__
__attribute__((__interrupt__)) void pwm_int_handler( void )
#elif __ICCAVR32__
__interrupt void pwm_int_handler( void )
#endif
{
80003b80:	d4 01       	pushm	lr
    // Clear Interrupt Handler
    AVR32_PWM.isr;
80003b82:	fe 78 30 00 	mov	r8,-53248
80003b86:	70 78       	ld.w	r8,r8[0x1c]
    if (motor_control_params.motor_appli_callback!=NULL){
80003b88:	48 f9       	lddpc	r9,80003bc4 <pwm_int_handler+0x44>
80003b8a:	72 0a       	ld.w	r10,r9[0x0]
80003b8c:	58 0a       	cp.w	r10,0
80003b8e:	c0 50       	breq	80003b98 <pwm_int_handler+0x18>
        if (MC_BLDC_motor.mc_state == RUN)
80003b90:	48 e8       	lddpc	r8,80003bc8 <pwm_int_handler+0x48>
80003b92:	70 09       	ld.w	r9,r8[0x0]
80003b94:	58 39       	cp.w	r9,3
80003b96:	c0 30       	breq	80003b9c <pwm_int_handler+0x1c>
          g_mc_tick++;
          if (g_mc_tick == TICK_SPEED_FACTOR) { g_mc_tick = 0 ; FOC_tick_speed = 1; }
          else FOC_tick_speed = 0;
        }
    }
}
80003b98:	d4 02       	popm	lr
80003b9a:	d6 03       	rete
    AVR32_PWM.isr;
    if (motor_control_params.motor_appli_callback!=NULL){
        if (MC_BLDC_motor.mc_state == RUN)
        {
          // Call application
          motor_control_params.motor_appli_callback();          
80003b9c:	5d 1a       	icall	r10
          g_mc_tick++;
80003b9e:	48 ca       	lddpc	r10,80003bcc <pwm_int_handler+0x4c>
80003ba0:	74 08       	ld.w	r8,r10[0x0]
80003ba2:	2f f8       	sub	r8,-1
80003ba4:	95 08       	st.w	r10[0x0],r8
          if (g_mc_tick == TICK_SPEED_FACTOR) { g_mc_tick = 0 ; FOC_tick_speed = 1; }
80003ba6:	74 09       	ld.w	r9,r10[0x0]
80003ba8:	58 69       	cp.w	r9,6
80003baa:	c0 60       	breq	80003bb6 <pwm_int_handler+0x36>
          else FOC_tick_speed = 0;
80003bac:	30 09       	mov	r9,0
80003bae:	48 98       	lddpc	r8,80003bd0 <pwm_int_handler+0x50>
80003bb0:	b0 09       	st.h	r8[0x0],r9
        }
    }
}
80003bb2:	d4 02       	popm	lr
80003bb4:	d6 03       	rete
        if (MC_BLDC_motor.mc_state == RUN)
        {
          // Call application
          motor_control_params.motor_appli_callback();          
          g_mc_tick++;
          if (g_mc_tick == TICK_SPEED_FACTOR) { g_mc_tick = 0 ; FOC_tick_speed = 1; }
80003bb6:	30 08       	mov	r8,0
80003bb8:	95 08       	st.w	r10[0x0],r8
80003bba:	30 19       	mov	r9,1
80003bbc:	48 58       	lddpc	r8,80003bd0 <pwm_int_handler+0x50>
80003bbe:	b0 09       	st.h	r8[0x0],r9
80003bc0:	ce cb       	rjmp	80003b98 <pwm_int_handler+0x18>
80003bc2:	d7 03       	nop
80003bc4:	00 00       	add	r0,r0
80003bc6:	05 54       	ld.sh	r4,--r2
80003bc8:	00 00       	add	r0,r0
80003bca:	07 b0       	ld.ub	r0,r3[0x3]
80003bcc:	00 00       	add	r0,r0
80003bce:	05 50       	ld.sh	r0,--r2
80003bd0:	00 00       	add	r0,r0
80003bd2:	05 6c       	ld.uh	r12,--r2

80003bd4 <mc_register_callback>:
    }
}
// Register Motor Control Application
void mc_register_callback(void (*motor_appli_callback)(void))
{
    motor_control_params.motor_appli_callback = motor_appli_callback;
80003bd4:	48 28       	lddpc	r8,80003bdc <mc_register_callback+0x8>
80003bd6:	91 0c       	st.w	r8[0x0],r12
}
80003bd8:	5e fc       	retal	r12
80003bda:	d7 03       	nop
80003bdc:	00 00       	add	r0,r0
80003bde:	05 54       	ld.sh	r4,--r2

80003be0 <mc_unregister_callback>:
// Unregister Motor Control Application
void mc_unregister_callback()
{
    motor_control_params.motor_appli_callback = NULL;
80003be0:	30 09       	mov	r9,0
80003be2:	48 28       	lddpc	r8,80003be8 <mc_unregister_callback+0x8>
80003be4:	91 09       	st.w	r8[0x0],r9
}
80003be6:	5e fc       	retal	r12
80003be8:	00 00       	add	r0,r0
80003bea:	05 54       	ld.sh	r4,--r2

80003bec <mc_update_duty_cycle>:
                           volatile U16 mc_duty1,
                           volatile U16 mc_duty2,
                           volatile U16 mc_duty3,
                           volatile U16 mc_duty4,
                           volatile U16 mc_duty5)
{
80003bec:	eb cd 40 40 	pushm	r6,lr
80003bf0:	20 6d       	sub	sp,24
80003bf2:	fb 5c 00 14 	st.h	sp[20],r12
80003bf6:	fb 5b 00 10 	st.h	sp[16],r11
80003bfa:	ba 6a       	st.h	sp[0xc],r10
80003bfc:	ba 49       	st.h	sp[0x8],r9
80003bfe:	ba 28       	st.h	sp[0x4],r8
80003c00:	40 86       	lddsp	r6,sp[0x20]
80003c02:	ba 06       	st.h	sp[0x0],r6
     pwm_drv_duty_cycle(&pwm_drv_options,
80003c04:	9a 08       	ld.sh	r8,sp[0x0]
80003c06:	5c 78       	castu.h	r8
80003c08:	1a d8       	st.w	--sp,r8
80003c0a:	9a 49       	ld.sh	r9,sp[0x8]
80003c0c:	5c 79       	castu.h	r9
80003c0e:	48 bc       	lddpc	r12,80003c38 <mc_update_duty_cycle+0x4c>
80003c10:	1a d9       	st.w	--sp,r9
80003c12:	fb 08 00 10 	ld.sh	r8,sp[16]
80003c16:	fb 09 00 14 	ld.sh	r9,sp[20]
80003c1a:	5c 78       	castu.h	r8
80003c1c:	fb 0a 00 18 	ld.sh	r10,sp[24]
80003c20:	5c 79       	castu.h	r9
80003c22:	fb 0b 00 1c 	ld.sh	r11,sp[28]
80003c26:	5c 7a       	castu.h	r10
80003c28:	5c 7b       	castu.h	r11
80003c2a:	fe b0 fa ed 	rcall	80003204 <pwm_drv_duty_cycle>
80003c2e:	2f ed       	sub	sp,-8
                          mc_duty1,
                          mc_duty2,
                          mc_duty3,
                          mc_duty4,
                          mc_duty5);
}
80003c30:	2f ad       	sub	sp,-24
80003c32:	e3 cd 80 40 	ldm	sp++,r6,pc
80003c36:	d7 03       	nop
80003c38:	00 00       	add	r0,r0
80003c3a:	11 e4       	ld.ub	r4,r8[0x6]

80003c3c <mc_get_ic>:
    adc_start(adc);
    return adc_get_value(adc, adc_channel_ib);
}

unsigned long mc_get_ic(void)
{
80003c3c:	eb cd 40 40 	pushm	r6,lr
    adc_start(adc);
80003c40:	48 66       	lddpc	r6,80003c58 <mc_get_ic+0x1c>
80003c42:	6c 0c       	ld.w	r12,r6[0x0]
80003c44:	e0 a0 07 42 	rcall	80004ac8 <adc_start>
    return adc_get_value(adc, adc_channel_ic);
80003c48:	48 58       	lddpc	r8,80003c5c <mc_get_ic+0x20>
80003c4a:	6c 0c       	ld.w	r12,r6[0x0]
80003c4c:	90 0b       	ld.sh	r11,r8[0x0]
80003c4e:	5c 7b       	castu.h	r11
80003c50:	e0 a0 07 50 	rcall	80004af0 <adc_get_value>
}
80003c54:	e3 cd 80 40 	ldm	sp++,r6,pc
80003c58:	00 00       	add	r0,r0
80003c5a:	00 20       	rsub	r0,r0
80003c5c:	00 00       	add	r0,r0
80003c5e:	11 ea       	ld.ub	r10,r8[0x6]

80003c60 <mc_get_ib>:
    adc_start(adc);
    return adc_get_value(adc, adc_channel_ia);
}

unsigned long mc_get_ib(void)
{
80003c60:	eb cd 40 40 	pushm	r6,lr
    adc_start(adc);
80003c64:	48 66       	lddpc	r6,80003c7c <mc_get_ib+0x1c>
80003c66:	6c 0c       	ld.w	r12,r6[0x0]
80003c68:	e0 a0 07 30 	rcall	80004ac8 <adc_start>
    return adc_get_value(adc, adc_channel_ib);
80003c6c:	48 58       	lddpc	r8,80003c80 <mc_get_ib+0x20>
80003c6e:	6c 0c       	ld.w	r12,r6[0x0]
80003c70:	90 0b       	ld.sh	r11,r8[0x0]
80003c72:	5c 7b       	castu.h	r11
80003c74:	e0 a0 07 3e 	rcall	80004af0 <adc_get_value>
}
80003c78:	e3 cd 80 40 	ldm	sp++,r6,pc
80003c7c:	00 00       	add	r0,r0
80003c7e:	00 20       	rsub	r0,r0
80003c80:	00 00       	add	r0,r0
80003c82:	11 ec       	ld.ub	r12,r8[0x6]

80003c84 <mc_get_ia>:
  mc_update_duty_cycle(500,550,500,550,500,550);
}
//@}

unsigned long mc_get_ia(void)
{
80003c84:	eb cd 40 40 	pushm	r6,lr
    adc_start(adc);
80003c88:	48 66       	lddpc	r6,80003ca0 <mc_get_ia+0x1c>
80003c8a:	6c 0c       	ld.w	r12,r6[0x0]
80003c8c:	e0 a0 07 1e 	rcall	80004ac8 <adc_start>
    return adc_get_value(adc, adc_channel_ia);
80003c90:	48 58       	lddpc	r8,80003ca4 <mc_get_ia+0x20>
80003c92:	6c 0c       	ld.w	r12,r6[0x0]
80003c94:	90 0b       	ld.sh	r11,r8[0x0]
80003c96:	5c 7b       	castu.h	r11
80003c98:	e0 a0 07 2c 	rcall	80004af0 <adc_get_value>
}
80003c9c:	e3 cd 80 40 	ldm	sp++,r6,pc
80003ca0:	00 00       	add	r0,r0
80003ca2:	00 20       	rsub	r0,r0
80003ca4:	00 00       	add	r0,r0
80003ca6:	11 e8       	ld.ub	r8,r8[0x6]

80003ca8 <mc_lowlevel_stop>:
  pwm_drv_start(); // Start PWM Channels
  pwm_drv_duty_cycle(&pwm_drv_options,500,550,500,550,500,550);
}

void mc_lowlevel_stop(void)
{
80003ca8:	eb cd 40 40 	pushm	r6,lr
  // --------------------- ADC Stop ----------------------------------
  // Disable the ADC channels.
  adc_disable(adc,adc_channel_ia);
80003cac:	49 38       	lddpc	r8,80003cf8 <mc_lowlevel_stop+0x50>
80003cae:	49 46       	lddpc	r6,80003cfc <mc_lowlevel_stop+0x54>
80003cb0:	90 0b       	ld.sh	r11,r8[0x0]
80003cb2:	6c 0c       	ld.w	r12,r6[0x0]
80003cb4:	5c 7b       	castu.h	r11
80003cb6:	e0 a0 07 32 	rcall	80004b1a <adc_disable>
  adc_disable(adc,adc_channel_ib);
80003cba:	49 28       	lddpc	r8,80003d00 <mc_lowlevel_stop+0x58>
80003cbc:	6c 0c       	ld.w	r12,r6[0x0]
80003cbe:	90 0b       	ld.sh	r11,r8[0x0]
80003cc0:	5c 7b       	castu.h	r11
80003cc2:	e0 a0 07 2c 	rcall	80004b1a <adc_disable>
  adc_disable(adc,adc_channel_ic);
80003cc6:	49 08       	lddpc	r8,80003d04 <mc_lowlevel_stop+0x5c>
80003cc8:	6c 0c       	ld.w	r12,r6[0x0]
80003cca:	90 0b       	ld.sh	r11,r8[0x0]
80003ccc:	5c 7b       	castu.h	r11
80003cce:	e0 a0 07 26 	rcall	80004b1a <adc_disable>
  // --------------------- Hall Sensors Stop -------------------------
  hall_estimator_stop();
80003cd2:	fe b0 fa 41 	rcall	80003154 <hall_estimator_stop>
  // --------------------- PWM Stop ----------------------------------
  pwm_drv_stop(); // Stop PWM Channels
80003cd6:	fe b0 fa 96 	rcall	80003202 <pwm_drv_stop>
  mc_update_duty_cycle(500,550,500,550,500,550);
80003cda:	e0 6a 01 f4 	mov	r10,500
80003cde:	e0 68 02 26 	mov	r8,550
                           volatile U16 mc_duty2,
                           volatile U16 mc_duty3,
                           volatile U16 mc_duty4,
                           volatile U16 mc_duty5)
{
     pwm_drv_duty_cycle(&pwm_drv_options,
80003ce2:	14 99       	mov	r9,r10
80003ce4:	1a d8       	st.w	--sp,r8
80003ce6:	48 9c       	lddpc	r12,80003d08 <mc_lowlevel_stop+0x60>
80003ce8:	1a da       	st.w	--sp,r10
80003cea:	12 9b       	mov	r11,r9
80003cec:	10 9a       	mov	r10,r8
80003cee:	fe b0 fa 8b 	rcall	80003204 <pwm_drv_duty_cycle>
80003cf2:	2f ed       	sub	sp,-8
  // --------------------- Hall Sensors Stop -------------------------
  hall_estimator_stop();
  // --------------------- PWM Stop ----------------------------------
  pwm_drv_stop(); // Stop PWM Channels
  mc_update_duty_cycle(500,550,500,550,500,550);
}
80003cf4:	e3 cd 80 40 	ldm	sp++,r6,pc
80003cf8:	00 00       	add	r0,r0
80003cfa:	11 e8       	ld.ub	r8,r8[0x6]
80003cfc:	00 00       	add	r0,r0
80003cfe:	00 20       	rsub	r0,r0
80003d00:	00 00       	add	r0,r0
80003d02:	11 ec       	ld.ub	r12,r8[0x6]
80003d04:	00 00       	add	r0,r0
80003d06:	11 ea       	ld.ub	r10,r8[0x6]
80003d08:	00 00       	add	r0,r0
80003d0a:	11 e4       	ld.ub	r4,r8[0x6]

80003d0c <mc_lowlevel_start>:
  pwm_drv_init(&pwm_drv_options);
  INTC_register_interrupt(&pwm_int_handler, AVR32_PWM_IRQ, AVR32_INTC_INT0);
}

void mc_lowlevel_start(void)
{
80003d0c:	eb cd 40 e0 	pushm	r5-r7,lr
  // --------------------- ADC Start ----------------------------------
  if (MC_BLDC_motor.mc_motor_direction == MC_CW)
80003d10:	49 d8       	lddpc	r8,80003d84 <mc_lowlevel_start+0x78>
80003d12:	70 19       	ld.w	r9,r8[0x4]
80003d14:	58 09       	cp.w	r9,0
80003d16:	c2 d0       	breq	80003d70 <mc_lowlevel_start+0x64>
    adc_channel_ib = CURRENT_IC_ADC_CHANNEL;
    adc_channel_ic = CURRENT_IA_ADC_CHANNEL;
  }
  else
  {
    adc_channel_ia = CURRENT_IC_ADC_CHANNEL;
80003d18:	30 38       	mov	r8,3
80003d1a:	49 c9       	lddpc	r9,80003d88 <mc_lowlevel_start+0x7c>
80003d1c:	b2 08       	st.h	r9[0x0],r8
    adc_channel_ib = CURRENT_IB_ADC_CHANNEL;
80003d1e:	49 c5       	lddpc	r5,80003d8c <mc_lowlevel_start+0x80>
80003d20:	30 28       	mov	r8,2
80003d22:	aa 08       	st.h	r5[0x0],r8
    adc_channel_ic = CURRENT_IA_ADC_CHANNEL;
80003d24:	49 b7       	lddpc	r7,80003d90 <mc_lowlevel_start+0x84>
80003d26:	30 18       	mov	r8,1
80003d28:	ae 08       	st.h	r7[0x0],r8
  }
  // Enable the ADC channels.
  adc_enable(adc,adc_channel_ia);
80003d2a:	92 0b       	ld.sh	r11,r9[0x0]
80003d2c:	49 a6       	lddpc	r6,80003d94 <mc_lowlevel_start+0x88>
80003d2e:	5c 7b       	castu.h	r11
80003d30:	6c 0c       	ld.w	r12,r6[0x0]
80003d32:	e0 a0 06 d1 	rcall	80004ad4 <adc_enable>
  adc_enable(adc,adc_channel_ib);
80003d36:	8a 0b       	ld.sh	r11,r5[0x0]
80003d38:	6c 0c       	ld.w	r12,r6[0x0]
80003d3a:	5c 7b       	castu.h	r11
80003d3c:	e0 a0 06 cc 	rcall	80004ad4 <adc_enable>
  adc_enable(adc,adc_channel_ic);
80003d40:	6c 0c       	ld.w	r12,r6[0x0]
80003d42:	8e 0b       	ld.sh	r11,r7[0x0]
80003d44:	5c 7b       	castu.h	r11
80003d46:	e0 a0 06 c7 	rcall	80004ad4 <adc_enable>
  // --------------------- Hall Sensors Start -------------------------
  hall_estimator_start();
80003d4a:	fe b0 fa 0b 	rcall	80003160 <hall_estimator_start>
  // --------------------- PWM Start ----------------------------------
  pwm_drv_start(); // Start PWM Channels
80003d4e:	fe b0 fa 53 	rcall	800031f4 <pwm_drv_start>
  pwm_drv_duty_cycle(&pwm_drv_options,500,550,500,550,500,550);
80003d52:	e0 6a 01 f4 	mov	r10,500
80003d56:	e0 68 02 26 	mov	r8,550
80003d5a:	14 99       	mov	r9,r10
80003d5c:	1a d8       	st.w	--sp,r8
80003d5e:	48 fc       	lddpc	r12,80003d98 <mc_lowlevel_start+0x8c>
80003d60:	1a da       	st.w	--sp,r10
80003d62:	12 9b       	mov	r11,r9
80003d64:	10 9a       	mov	r10,r8
80003d66:	fe b0 fa 4f 	rcall	80003204 <pwm_drv_duty_cycle>
80003d6a:	2f ed       	sub	sp,-8
}
80003d6c:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
void mc_lowlevel_start(void)
{
  // --------------------- ADC Start ----------------------------------
  if (MC_BLDC_motor.mc_motor_direction == MC_CW)
  {
    adc_channel_ia = CURRENT_IB_ADC_CHANNEL;
80003d70:	30 28       	mov	r8,2
80003d72:	48 69       	lddpc	r9,80003d88 <mc_lowlevel_start+0x7c>
80003d74:	b2 08       	st.h	r9[0x0],r8
    adc_channel_ib = CURRENT_IC_ADC_CHANNEL;
80003d76:	48 65       	lddpc	r5,80003d8c <mc_lowlevel_start+0x80>
80003d78:	30 38       	mov	r8,3
80003d7a:	aa 08       	st.h	r5[0x0],r8
    adc_channel_ic = CURRENT_IA_ADC_CHANNEL;
80003d7c:	48 57       	lddpc	r7,80003d90 <mc_lowlevel_start+0x84>
80003d7e:	30 18       	mov	r8,1
80003d80:	ae 08       	st.h	r7[0x0],r8
80003d82:	cd 4b       	rjmp	80003d2a <mc_lowlevel_start+0x1e>
80003d84:	00 00       	add	r0,r0
80003d86:	07 b0       	ld.ub	r0,r3[0x3]
80003d88:	00 00       	add	r0,r0
80003d8a:	11 e8       	ld.ub	r8,r8[0x6]
80003d8c:	00 00       	add	r0,r0
80003d8e:	11 ec       	ld.ub	r12,r8[0x6]
80003d90:	00 00       	add	r0,r0
80003d92:	11 ea       	ld.ub	r10,r8[0x6]
80003d94:	00 00       	add	r0,r0
80003d96:	00 20       	rsub	r0,r0
80003d98:	00 00       	add	r0,r0
80003d9a:	11 e4       	ld.ub	r4,r8[0x6]

80003d9c <mc_global_init>:
//------------------------------------------------------------------------------
/*! \name Global Low level initialization
 */
//! @{
void mc_global_init(void)
{   
80003d9c:	d4 01       	pushm	lr
    {CURRENT_IA_ADC_PIN, CURRENT_IA_ADC_FUNCTION },
    {CURRENT_IB_ADC_PIN, CURRENT_IB_ADC_FUNCTION },
    {CURRENT_IC_ADC_PIN, CURRENT_IC_ADC_FUNCTION },

  };
  gpio_enable_module(ADC_GPIO_MAP, sizeof(ADC_GPIO_MAP) / sizeof(ADC_GPIO_MAP[0]));
80003d9e:	30 3b       	mov	r11,3
80003da0:	48 dc       	lddpc	r12,80003dd4 <mc_global_init+0x38>
80003da2:	e0 a0 07 1f 	rcall	80004be0 <gpio_enable_module>
  // configure ADC
  adc_configure(adc);
80003da6:	48 d8       	lddpc	r8,80003dd8 <mc_global_init+0x3c>
80003da8:	70 0c       	ld.w	r12,r8[0x0]
80003daa:	e0 a0 06 83 	rcall	80004ab0 <adc_configure>
  // --------------------- Hall Sensors Initialization -------------------------
  hall_estimator_init(); 
80003dae:	fe b0 f9 cd 	rcall	80003148 <hall_estimator_init>
  hall_estimator_init_interrupt();
80003db2:	fe b0 f9 eb 	rcall	80003188 <hall_estimator_init_interrupt>
  // --------------------- PWM Initialization ----------------------------------
  pwm_drv_options.max_pwm_value = 1200;    // Cprd 
80003db6:	48 a9       	lddpc	r9,80003ddc <mc_global_init+0x40>
80003db8:	e0 68 04 b0 	mov	r8,1200
  pwm_drv_init(&pwm_drv_options);
80003dbc:	12 9c       	mov	r12,r9
  adc_configure(adc);
  // --------------------- Hall Sensors Initialization -------------------------
  hall_estimator_init(); 
  hall_estimator_init_interrupt();
  // --------------------- PWM Initialization ----------------------------------
  pwm_drv_options.max_pwm_value = 1200;    // Cprd 
80003dbe:	93 08       	st.w	r9[0x0],r8
  pwm_drv_init(&pwm_drv_options);
80003dc0:	fe b0 fa 44 	rcall	80003248 <pwm_drv_init>
  INTC_register_interrupt(&pwm_int_handler, AVR32_PWM_IRQ, AVR32_INTC_INT0);
80003dc4:	30 0a       	mov	r10,0
80003dc6:	e0 6b 01 80 	mov	r11,384
80003dca:	fe cc 02 4a 	sub	r12,pc,586
80003dce:	e0 a0 07 c1 	rcall	80004d50 <INTC_register_interrupt>
}
80003dd2:	d8 02       	popm	pc
80003dd4:	80 00       	ld.sh	r0,r0[0x0]
80003dd6:	b0 e1       	st.b	r8[0x6],r1
80003dd8:	00 00       	add	r0,r0
80003dda:	00 20       	rsub	r0,r0
80003ddc:	00 00       	add	r0,r0
80003dde:	11 e4       	ld.ub	r4,r8[0x6]

80003de0 <FOC_set_state_machine>:
//!< Local Update of duty cycle
static void FOC_update_duty(void);
//!< Local Start motor sequence
static unsigned char FOC_start_motor(void);

void FOC_set_state_machine(FOC_STATE_t FOC_state_p) { FOC_state = FOC_state_p;}
80003de0:	48 28       	lddpc	r8,80003de8 <FOC_set_state_machine+0x8>
80003de2:	91 0c       	st.w	r8[0x0],r12
80003de4:	5e fc       	retal	r12
80003de6:	d7 03       	nop
80003de8:	00 00       	add	r0,r0
80003dea:	11 f0       	ld.ub	r0,r8[0x7]

80003dec <FOC_read_current>:
//!           ia+ib+ic=0 
//!                       or
//!           adc_value_ia + adc_value_ib + adc_value_ic = zero_adc;
//!
static void FOC_read_current(void)
{
80003dec:	eb cd 40 80 	pushm	r7,lr
80003df0:	20 2d       	sub	sp,8
  volatile unsigned short adc_value_ia;
  volatile unsigned short adc_value_ib;
  volatile unsigned short adc_value_ic;
  
  if(svpwm_options.current_to_be_measured == AB)
80003df2:	4b 47       	lddpc	r7,80003ec0 <FOC_read_current+0xd4>
80003df4:	6e 08       	ld.w	r8,r7[0x0]
80003df6:	58 48       	cp.w	r8,4
80003df8:	c3 80       	breq	80003e68 <FOC_read_current+0x7c>
    
    adc_value_ic =zero_adc-adc_value_ia-adc_value_ib;
    svpwm_options.current_to_be_measured == NONE;
  }
  else 
      if(svpwm_options.current_to_be_measured == AC)
80003dfa:	6e 08       	ld.w	r8,r7[0x0]
80003dfc:	58 28       	cp.w	r8,2
80003dfe:	c4 20       	breq	80003e82 <FOC_read_current+0x96>
        adc_value_ic = mc_get_ic();
        adc_value_ib =zero_adc-adc_value_ia-adc_value_ic;
        svpwm_options.current_to_be_measured == NONE;
      }
      else 
             if (svpwm_options.current_to_be_measured == BA)
80003e00:	6e 08       	ld.w	r8,r7[0x0]
80003e02:	58 68       	cp.w	r8,6
80003e04:	c4 40       	breq	80003e8c <FOC_read_current+0xa0>
                adc_value_ia = mc_get_ia();
                adc_value_ic =zero_adc-adc_value_ia-adc_value_ib;
                svpwm_options.current_to_be_measured == NONE;
             }
             else 
                   if (svpwm_options.current_to_be_measured == BC)
80003e06:	6e 08       	ld.w	r8,r7[0x0]
80003e08:	58 18       	cp.w	r8,1
80003e0a:	c4 60       	breq	80003e96 <FOC_read_current+0xaa>
                      adc_value_ic = mc_get_ic();
                      adc_value_ia =zero_adc-adc_value_ib-adc_value_ic;
                      svpwm_options.current_to_be_measured == NONE;
                   }
                   else 
                         if (svpwm_options.current_to_be_measured == CA)
80003e0c:	6e 08       	ld.w	r8,r7[0x0]
80003e0e:	58 38       	cp.w	r8,3
80003e10:	c1 f0       	breq	80003e4e <FOC_read_current+0x62>
                            adc_value_ia = mc_get_ia();
                            adc_value_ib =zero_adc-adc_value_ia-adc_value_ic;
                            svpwm_options.current_to_be_measured == NONE;
                         }
                          else 
                                if (svpwm_options.current_to_be_measured == CB)
80003e12:	6e 08       	ld.w	r8,r7[0x0]
80003e14:	58 58       	cp.w	r8,5
80003e16:	c4 d0       	breq	80003eb0 <FOC_read_current+0xc4>
                                    adc_value_ib = mc_get_ib();
                                    adc_value_ia =zero_adc-adc_value_ic-adc_value_ib;
                                    svpwm_options.current_to_be_measured == NONE;
                                }
   // Rescale Current measures.
   ia= (adc_value_ia-offset)*echelle_adc;
80003e18:	9a 38       	ld.sh	r8,sp[0x6]
80003e1a:	ea 7e bb bb 	mov	lr,768955
80003e1e:	e0 6c 56 f0 	mov	r12,22256
80003e22:	ea 1c e6 55 	orh	r12,0xe655
   ib= (adc_value_ib-offset)*echelle_adc;
80003e26:	9a 29       	ld.sh	r9,sp[0x4]
                                    adc_value_ib = mc_get_ib();
                                    adc_value_ia =zero_adc-adc_value_ic-adc_value_ib;
                                    svpwm_options.current_to_be_measured == NONE;
                                }
   // Rescale Current measures.
   ia= (adc_value_ia-offset)*echelle_adc;
80003e28:	5c 78       	castu.h	r8
   ib= (adc_value_ib-offset)*echelle_adc;
80003e2a:	5c 79       	castu.h	r9
                                    adc_value_ib = mc_get_ib();
                                    adc_value_ia =zero_adc-adc_value_ic-adc_value_ib;
                                    svpwm_options.current_to_be_measured == NONE;
                                }
   // Rescale Current measures.
   ia= (adc_value_ia-offset)*echelle_adc;
80003e2c:	bd 38       	mul	r8,lr
   ib= (adc_value_ib-offset)*echelle_adc;
80003e2e:	bd 39       	mul	r9,lr
                                    adc_value_ib = mc_get_ib();
                                    adc_value_ia =zero_adc-adc_value_ic-adc_value_ib;
                                    svpwm_options.current_to_be_measured == NONE;
                                }
   // Rescale Current measures.
   ia= (adc_value_ia-offset)*echelle_adc;
80003e30:	18 08       	add	r8,r12
   ib= (adc_value_ib-offset)*echelle_adc;
80003e32:	18 09       	add	r9,r12
                                    adc_value_ib = mc_get_ib();
                                    adc_value_ia =zero_adc-adc_value_ic-adc_value_ib;
                                    svpwm_options.current_to_be_measured == NONE;
                                }
   // Rescale Current measures.
   ia= (adc_value_ia-offset)*echelle_adc;
80003e34:	4a 4a       	lddpc	r10,80003ec4 <FOC_read_current+0xd8>
   ib= (adc_value_ib-offset)*echelle_adc;
80003e36:	4a 5b       	lddpc	r11,80003ec8 <FOC_read_current+0xdc>
                                    adc_value_ib = mc_get_ib();
                                    adc_value_ia =zero_adc-adc_value_ic-adc_value_ib;
                                    svpwm_options.current_to_be_measured == NONE;
                                }
   // Rescale Current measures.
   ia= (adc_value_ia-offset)*echelle_adc;
80003e38:	95 08       	st.w	r10[0x0],r8
   ib= (adc_value_ib-offset)*echelle_adc;
80003e3a:	97 09       	st.w	r11[0x0],r9
   ic= (adc_value_ic-offset)*echelle_adc;
80003e3c:	9a 18       	ld.sh	r8,sp[0x2]
80003e3e:	4a 49       	lddpc	r9,80003ecc <FOC_read_current+0xe0>
80003e40:	5c 78       	castu.h	r8
80003e42:	bd 38       	mul	r8,lr
80003e44:	18 08       	add	r8,r12
80003e46:	93 08       	st.w	r9[0x0],r8

}
80003e48:	2f ed       	sub	sp,-8
80003e4a:	e3 cd 80 80 	ldm	sp++,r7,pc
                      svpwm_options.current_to_be_measured == NONE;
                   }
                   else 
                         if (svpwm_options.current_to_be_measured == CA)
                         {
                            adc_value_ic = mc_get_ic();
80003e4e:	cf 7e       	rcall	80003c3c <mc_get_ic>
80003e50:	ba 1c       	st.h	sp[0x2],r12
80003e52:	c1 9f       	rcall	80003c84 <mc_get_ia>
                            adc_value_ia = mc_get_ia();
80003e54:	ba 3c       	st.h	sp[0x6],r12
80003e56:	9a 38       	ld.sh	r8,sp[0x6]
80003e58:	9a 19       	ld.sh	r9,sp[0x2]
                            adc_value_ib =zero_adc-adc_value_ia-adc_value_ic;
80003e5a:	5c 38       	neg	r8
80003e5c:	12 18       	sub	r8,r9
80003e5e:	f0 c8 f9 70 	sub	r8,r8,-1680
80003e62:	ba 28       	st.h	sp[0x4],r8
80003e64:	6e 08       	ld.w	r8,r7[0x0]
80003e66:	cd 9b       	rjmp	80003e18 <FOC_read_current+0x2c>
                            svpwm_options.current_to_be_measured == NONE;
80003e68:	c0 ef       	rcall	80003c84 <mc_get_ia>
80003e6a:	ba 3c       	st.h	sp[0x6],r12
  volatile unsigned short adc_value_ib;
  volatile unsigned short adc_value_ic;
  
  if(svpwm_options.current_to_be_measured == AB)
  {
    adc_value_ia = mc_get_ia();
80003e6c:	cf ae       	rcall	80003c60 <mc_get_ib>
80003e6e:	ba 2c       	st.h	sp[0x4],r12
80003e70:	9a 38       	ld.sh	r8,sp[0x6]
    adc_value_ib = mc_get_ib();
80003e72:	9a 29       	ld.sh	r9,sp[0x4]
80003e74:	5c 38       	neg	r8
80003e76:	12 18       	sub	r8,r9
      else 
             if (svpwm_options.current_to_be_measured == BA)
             {
                adc_value_ib = mc_get_ib();
                adc_value_ia = mc_get_ia();
                adc_value_ic =zero_adc-adc_value_ia-adc_value_ib;
80003e78:	f0 c8 f9 70 	sub	r8,r8,-1680
80003e7c:	ba 18       	st.h	sp[0x2],r8
80003e7e:	6e 08       	ld.w	r8,r7[0x0]
80003e80:	cc cb       	rjmp	80003e18 <FOC_read_current+0x2c>
80003e82:	c0 1f       	rcall	80003c84 <mc_get_ia>
80003e84:	ba 3c       	st.h	sp[0x6],r12
                svpwm_options.current_to_be_measured == NONE;
80003e86:	cd be       	rcall	80003c3c <mc_get_ic>
80003e88:	ba 1c       	st.h	sp[0x2],r12
    svpwm_options.current_to_be_measured == NONE;
  }
  else 
      if(svpwm_options.current_to_be_measured == AC)
      {
        adc_value_ia = mc_get_ia();
80003e8a:	ce 6b       	rjmp	80003e56 <FOC_read_current+0x6a>
80003e8c:	ce ae       	rcall	80003c60 <mc_get_ib>
80003e8e:	ba 2c       	st.h	sp[0x4],r12
        adc_value_ic = mc_get_ic();
80003e90:	cf ae       	rcall	80003c84 <mc_get_ia>
80003e92:	ba 3c       	st.h	sp[0x6],r12
80003e94:	ce eb       	rjmp	80003e70 <FOC_read_current+0x84>
80003e96:	ce 5e       	rcall	80003c60 <mc_get_ib>
        svpwm_options.current_to_be_measured == NONE;
      }
      else 
             if (svpwm_options.current_to_be_measured == BA)
             {
                adc_value_ib = mc_get_ib();
80003e98:	ba 2c       	st.h	sp[0x4],r12
80003e9a:	cd 1e       	rcall	80003c3c <mc_get_ic>
80003e9c:	ba 1c       	st.h	sp[0x2],r12
                adc_value_ia = mc_get_ia();
80003e9e:	9a 28       	ld.sh	r8,sp[0x4]
80003ea0:	9a 19       	ld.sh	r9,sp[0x2]
80003ea2:	5c 38       	neg	r8
80003ea4:	12 18       	sub	r8,r9
                svpwm_options.current_to_be_measured == NONE;
             }
             else 
                   if (svpwm_options.current_to_be_measured == BC)
                   {
                      adc_value_ib = mc_get_ib();
80003ea6:	f0 c8 f9 70 	sub	r8,r8,-1680
80003eaa:	ba 38       	st.h	sp[0x6],r8
                      adc_value_ic = mc_get_ic();
80003eac:	6e 08       	ld.w	r8,r7[0x0]
80003eae:	cb 5b       	rjmp	80003e18 <FOC_read_current+0x2c>
80003eb0:	cc 6e       	rcall	80003c3c <mc_get_ic>
                      adc_value_ia =zero_adc-adc_value_ib-adc_value_ic;
80003eb2:	ba 1c       	st.h	sp[0x2],r12
80003eb4:	cd 6e       	rcall	80003c60 <mc_get_ib>
80003eb6:	ba 2c       	st.h	sp[0x4],r12
                          else 
                                if (svpwm_options.current_to_be_measured == CB)
                                {
                                    adc_value_ic = mc_get_ic();
                                    adc_value_ib = mc_get_ib();
                                    adc_value_ia =zero_adc-adc_value_ic-adc_value_ib;
80003eb8:	9a 18       	ld.sh	r8,sp[0x2]
80003eba:	9a 29       	ld.sh	r9,sp[0x4]
80003ebc:	5c 38       	neg	r8
80003ebe:	cf 3b       	rjmp	80003ea4 <FOC_read_current+0xb8>
                                    svpwm_options.current_to_be_measured == NONE;
80003ec0:	00 00       	add	r0,r0
80003ec2:	11 f4       	ld.ub	r4,r8[0x7]
                            svpwm_options.current_to_be_measured == NONE;
                         }
                          else 
                                if (svpwm_options.current_to_be_measured == CB)
                                {
                                    adc_value_ic = mc_get_ic();
80003ec4:	00 00       	add	r0,r0
80003ec6:	05 58       	ld.sh	r8,--r2
80003ec8:	00 00       	add	r0,r0
                                    adc_value_ib = mc_get_ib();
80003eca:	05 5c       	ld.sh	r12,--r2
80003ecc:	00 00       	add	r0,r0
80003ece:	05 60       	ld.uh	r0,--r2

80003ed0 <FOC_state_machine>:
                                    adc_value_ia =zero_adc-adc_value_ic-adc_value_ib;
80003ed0:	d4 31       	pushm	r0-r7,lr
80003ed2:	20 4d       	sub	sp,16
//! @brief This function executes FOC treatment 
//! This function is called at every tick reference.
//!
void FOC_state_machine(void)
{
  switch(FOC_state)
80003ed4:	fe fe 08 78 	ld.w	lr,pc[2168]
80003ed8:	7c 08       	ld.w	r8,lr[0x0]
80003eda:	58 18       	cp.w	r8,1
80003edc:	c2 80       	breq	80003f2c <FOC_state_machine+0x5c>
80003ede:	c0 53       	brcs	80003ee8 <FOC_state_machine+0x18>
80003ee0:	58 28       	cp.w	r8,2
80003ee2:	c7 d0       	breq	80003fdc <FOC_state_machine+0x10c>
      FOC_compute_svpwm();
      // Update Duty Cycle
      FOC_update_duty();
      break;
  }
}
80003ee4:	2f cd       	sub	sp,-16
80003ee6:	d8 32       	popm	r0-r7,pc
void FOC_state_machine(void)
{
  switch(FOC_state)
  {
    case FOC_state_ramp_up_init:
        FOC_Id_reg.Ki = Ki_id;
80003ee8:	fe f9 08 68 	ld.w	r9,pc[2152]
80003eec:	e0 6b 7c c4 	mov	r11,31940
80003ef0:	ea 1b 00 9b 	orh	r11,0x9b
80003ef4:	93 6b       	st.w	r9[0x18],r11
        FOC_Id_reg.Kp = Kp_id;
80003ef6:	e0 6a d7 08 	mov	r10,55048
80003efa:	ea 1a 70 a3 	orh	r10,0x70a3
80003efe:	93 7a       	st.w	r9[0x1c],r10
        FOC_Iq_reg.Ki = Ki_iq;
80003f00:	fe f8 08 54 	ld.w	r8,pc[2132]
80003f04:	91 6b       	st.w	r8[0x18],r11
        FOC_Iq_reg.Kp = Kp_iq;
80003f06:	91 7a       	st.w	r8[0x1c],r10
        FOC_Speed_reg.Ki = Ki_speed;
80003f08:	fe fb 08 50 	ld.w	r11,pc[2128]
80003f0c:	e0 68 06 3e 	mov	r8,1598
80003f10:	97 68       	st.w	r11[0x18],r8
        FOC_Speed_reg.Kp = Kp_speed;
80003f12:	ea 79 4e e4 	mov	r9,741092
80003f16:	97 79       	st.w	r11[0x1c],r9
        FOC_rampup_step = FOC_rampup_step_alignement_init;
80003f18:	30 0a       	mov	r10,0
80003f1a:	fe f8 08 42 	ld.w	r8,pc[2114]
80003f1e:	91 0a       	st.w	r8[0x0],r10
        FOC_state = FOC_state_ramp_up;
80003f20:	30 19       	mov	r9,1
80003f22:	fe fc 08 2a 	ld.w	r12,pc[2090]
80003f26:	99 09       	st.w	r12[0x0],r9
      FOC_compute_svpwm();
      // Update Duty Cycle
      FOC_update_duty();
      break;
  }
}
80003f28:	2f cd       	sub	sp,-16
80003f2a:	d8 32       	popm	r0-r7,pc
/*! \name Start Motor sequence
 */
//! @{
static unsigned char FOC_start_motor(void)
{
  switch(FOC_rampup_step)
80003f2c:	fe f1 08 30 	ld.w	r1,pc[2096]
80003f30:	62 0a       	ld.w	r10,r1[0x0]
80003f32:	58 2a       	cp.w	r10,2
80003f34:	e0 80 02 84 	breq	8000443c <FOC_state_machine+0x56c>
80003f38:	e0 8b 01 64 	brhi	80004200 <FOC_state_machine+0x330>
80003f3c:	58 0a       	cp.w	r10,0
80003f3e:	e0 81 02 e8 	brne	8000450e <FOC_state_machine+0x63e>
  {
    case FOC_rampup_step_alignement_init:
        FOC_rampup_step_alignement_counter = 0;
80003f42:	fe f8 08 1e 	ld.w	r8,pc[2078]
80003f46:	91 0a       	st.w	r8[0x0],r10
        FOC_rampup_step_openloop_counter   = 0;
80003f48:	fe f9 08 1c 	ld.w	r9,pc[2076]
80003f4c:	93 0a       	st.w	r9[0x0],r10
        FOC_rampup_step_fieldreg_counter   = 0;
80003f4e:	fe f8 08 1a 	ld.w	r8,pc[2074]
80003f52:	91 0a       	st.w	r8[0x0],r10
        FOC_rampup_step_torquereg_counter  = 0;
80003f54:	fe f9 08 18 	ld.w	r9,pc[2072]
80003f58:	93 0a       	st.w	r9[0x0],r10
        MC_BLDC_motor.Idref = 0;
80003f5a:	fe f5 08 16 	ld.w	r5,pc[2070]
        MC_BLDC_motor.Iqref = IQREF_RAMPUP;
80003f5e:	e0 6b 55 55 	mov	r11,21845
80003f62:	ea 1b 05 55 	orh	r11,0x555
    case FOC_rampup_step_alignement_init:
        FOC_rampup_step_alignement_counter = 0;
        FOC_rampup_step_openloop_counter   = 0;
        FOC_rampup_step_fieldreg_counter   = 0;
        FOC_rampup_step_torquereg_counter  = 0;
        MC_BLDC_motor.Idref = 0;
80003f66:	8b 3a       	st.w	r5[0xc],r10
        MC_BLDC_motor.Iqref = IQREF_RAMPUP;
80003f68:	8b 5b       	st.w	r5[0x14],r11
        Vqref=(int)((R*(long long int)MC_BLDC_motor.Iqref)>>31)+(187904750*2);        
80003f6a:	e0 6b f5 c2 	mov	r11,62914
80003f6e:	ea 1b 1c 28 	orh	r11,0x1c28
80003f72:	fe fe 08 02 	ld.w	lr,pc[2050]
80003f76:	6a 53       	ld.w	r3,r5[0x14]
80003f78:	e6 0b 04 42 	muls.d	r2,r3,r11
80003f7c:	e0 6b 65 dc 	mov	r11,26076
80003f80:	ea 1b 16 66 	orh	r11,0x1666
80003f84:	e4 0c 16 1f 	lsr	r12,r2,0x1f
80003f88:	f9 e3 10 1c 	or	r12,r12,r3<<0x1
80003f8c:	16 0c       	add	r12,r11
        park_inv(Vdref,Vqref,2,&(svpwm_options.Valpha),&(svpwm_options.Vbeta));
80003f8e:	fe f7 07 ea 	ld.w	r7,pc[2026]
80003f92:	18 9b       	mov	r11,r12
80003f94:	ee c8 ff f8 	sub	r8,r7,-8
        FOC_rampup_step_openloop_counter   = 0;
        FOC_rampup_step_fieldreg_counter   = 0;
        FOC_rampup_step_torquereg_counter  = 0;
        MC_BLDC_motor.Idref = 0;
        MC_BLDC_motor.Iqref = IQREF_RAMPUP;
        Vqref=(int)((R*(long long int)MC_BLDC_motor.Iqref)>>31)+(187904750*2);        
80003f98:	9d 0c       	st.w	lr[0x0],r12
        park_inv(Vdref,Vqref,2,&(svpwm_options.Valpha),&(svpwm_options.Vbeta));
80003f9a:	30 2a       	mov	r10,2
80003f9c:	ee c9 ff fc 	sub	r9,r7,-4
80003fa0:	fe f6 07 dc 	ld.w	r6,pc[2012]
80003fa4:	6c 0c       	ld.w	r12,r6[0x0]
80003fa6:	fe b0 f9 e7 	rcall	80003374 <park_inv>

}

static void FOC_compute_svpwm(void)
{
     svpwm(&svpwm_options);
80003faa:	0e 9c       	mov	r12,r7
80003fac:	fe b0 fa 4f 	rcall	8000344a <svpwm>
}
static void FOC_update_duty(void)
{
  if ( MC_BLDC_motor.mc_motor_direction == MC_CW)
80003fb0:	6a 18       	ld.w	r8,r5[0x4]
80003fb2:	58 08       	cp.w	r8,0
80003fb4:	e0 80 03 8b 	breq	800046ca <FOC_state_machine+0x7fa>
                            svpwm_options.duty4,
                            svpwm_options.duty5);
   }
   else
   {
      mc_update_duty_cycle( svpwm_options.duty2,
80003fb8:	6e 88       	ld.w	r8,r7[0x20]
80003fba:	5c 78       	castu.h	r8
80003fbc:	1a d8       	st.w	--sp,r8
80003fbe:	6e 78       	ld.w	r8,r7[0x1c]
80003fc0:	6e 49       	ld.w	r9,r7[0x10]
80003fc2:	5c 78       	castu.h	r8
80003fc4:	6e 3a       	ld.w	r10,r7[0xc]
80003fc6:	5c 79       	castu.h	r9
80003fc8:	6e 6b       	ld.w	r11,r7[0x18]
80003fca:	5c 7a       	castu.h	r10
80003fcc:	6e 5c       	ld.w	r12,r7[0x14]
80003fce:	5c 7b       	castu.h	r11
80003fd0:	5c 7c       	castu.h	r12
80003fd2:	c0 de       	rcall	80003bec <mc_update_duty_cycle>
80003fd4:	2f fd       	sub	sp,-4
80003fd6:	30 18       	mov	r8,1
        MC_BLDC_motor.Iqref = IQREF_RAMPUP;
        Vqref=(int)((R*(long long int)MC_BLDC_motor.Iqref)>>31)+(187904750*2);        
        park_inv(Vdref,Vqref,2,&(svpwm_options.Valpha),&(svpwm_options.Vbeta));
        FOC_compute_svpwm();
        FOC_update_duty();
        FOC_rampup_step = FOC_rampup_step_alignement;
80003fd8:	83 08       	st.w	r1[0x0],r8
80003fda:	c8 5b       	rjmp	80003ee4 <FOC_state_machine+0x14>
80003fdc:	c0 8f       	rcall	80003dec <FOC_read_current>
      if (FOC_start_motor()==1)
        FOC_state = FOC_state_regulation;
      break;
    case FOC_state_regulation:
      // Current Measurement
      FOC_read_current();
80003fde:	fe f7 07 92 	ld.w	r7,pc[1938]
  FOC_Iq_reg.IP_REG_discharge = prev_Vq - Vq; 
}

static void FOC_update_teta_speed(void)
{
     hall_estimator_update_teta_and_speed(&(MC_BLDC_motor.Tetam), &(MC_BLDC_motor.Speedm));
80003fe2:	ee cb ff e8 	sub	r11,r7,-24
80003fe6:	ee cc ff de 	sub	r12,r7,-34
80003fea:	fe b0 f8 69 	rcall	800030bc <hall_estimator_update_teta_and_speed>
80003fee:	fe fb 07 92 	ld.w	r11,pc[1938]
}
static void FOC_compute_clarke(void)
{
     concordia(ia,ib,ic,&ialpha,&ibeta);
80003ff2:	fe fc 07 92 	ld.w	r12,pc[1938]
80003ff6:	76 0a       	ld.w	r10,r11[0x0]
80003ff8:	fe f5 07 90 	ld.w	r5,pc[1936]
80003ffc:	78 0b       	ld.w	r11,r12[0x0]
80003ffe:	fe f3 07 8e 	ld.w	r3,pc[1934]
80004002:	0a 98       	mov	r8,r5
80004004:	06 99       	mov	r9,r3
80004006:	fe f6 07 8a 	ld.w	r6,pc[1930]
8000400a:	6c 0c       	ld.w	r12,r6[0x0]
8000400c:	fe b0 f8 3c 	rcall	80003084 <concordia>
80004010:	ef 0a 00 22 	ld.sh	r10,r7[34]
}
static void FOC_compute_park(void)
{
    park(ialpha,ibeta,MC_BLDC_motor.Tetam,&(MC_BLDC_motor.Idm),&(MC_BLDC_motor.Iqm));
80004014:	ee c8 ff f0 	sub	r8,r7,-16
80004018:	ee c9 ff f8 	sub	r9,r7,-8
8000401c:	6a 0b       	ld.w	r11,r5[0x0]
8000401e:	66 0c       	ld.w	r12,r3[0x0]
80004020:	5c 7a       	castu.h	r10
80004022:	fe b0 f9 5d 	rcall	800032dc <park>
80004026:	fe f8 07 6e 	ld.w	r8,pc[1902]
      // Compute Clarke Transformation
      FOC_compute_clarke();
      // Compute Park Transformation
      FOC_compute_park();      
      // In case of speed regulation: regulate torque
      if (FOC_tick_speed)
8000402a:	90 09       	ld.sh	r9,r8[0x0]
8000402c:	58 09       	cp.w	r9,0
8000402e:	e0 81 00 b9 	brne	800041a0 <FOC_state_machine+0x2d0>
80004032:	fe fa 07 22 	ld.w	r10,pc[1826]
80004036:	50 1a       	stdsp	sp[0x4],r10
80004038:	6e 28       	ld.w	r8,r7[0x8]
8000403a:	fe fc 07 16 	ld.w	r12,pc[1814]
    FOC_Iq_reg.IP_REG_lasterror = MC_BLDC_motor.Iqref - MC_BLDC_motor.Iqm;
}
static void FOC_regulate_field(void)
{
    // REgulate Id
    FOC_Id_reg.IP_REG_mes = MC_BLDC_motor.Idm;
8000403e:	50 0c       	stdsp	sp[0x0],r12
80004040:	99 18       	st.w	r12[0x4],r8
80004042:	6e 38       	ld.w	r8,r7[0xc]
80004044:	40 0c       	lddsp	r12,sp[0x0]
    FOC_Id_reg.IP_REG_ref = MC_BLDC_motor.Idref;
80004046:	99 28       	st.w	r12[0x8],r8
    IP_REG_compute(&FOC_Id_reg);
80004048:	fe b0 f9 e2 	rcall	8000340c <IP_REG_compute>
8000404c:	40 0b       	lddsp	r11,sp[0x0]
8000404e:	76 39       	ld.w	r9,r11[0xc]
    Vdref = FOC_Id_reg.IP_REG_output;
80004050:	6e 48       	ld.w	r8,r7[0x10]
80004052:	40 1a       	lddsp	r10,sp[0x4]
    // REgulate Iq
    FOC_Iq_reg.IP_REG_mes = MC_BLDC_motor.Iqm;
80004054:	95 18       	st.w	r10[0x4],r8
80004056:	6e 58       	ld.w	r8,r7[0x14]
80004058:	fe f6 07 24 	ld.w	r6,pc[1828]
{
    // REgulate Id
    FOC_Id_reg.IP_REG_mes = MC_BLDC_motor.Idm;
    FOC_Id_reg.IP_REG_ref = MC_BLDC_motor.Idref;
    IP_REG_compute(&FOC_Id_reg);
    Vdref = FOC_Id_reg.IP_REG_output;
8000405c:	95 28       	st.w	r10[0x8],r8
8000405e:	8d 09       	st.w	r6[0x0],r9
    // REgulate Iq
    FOC_Iq_reg.IP_REG_mes = MC_BLDC_motor.Iqm;
    FOC_Iq_reg.IP_REG_ref = MC_BLDC_motor.Iqref;
80004060:	fe fc 06 f4 	ld.w	r12,pc[1780]
    IP_REG_compute(&FOC_Iq_reg);
80004064:	fe b0 f9 d4 	rcall	8000340c <IP_REG_compute>
80004068:	e8 68 5b 18 	mov	r8,547608
  int prev_Vd;
  int prev_Vq;
  
  // Vd= Vdref-Speed.Lc.Iq
  // Vq= Vqref+omega.Lc.Id+(Speed/p).kcn
  Vd=Vdref- (int)((((long long int)Lc* (long long int)MC_BLDC_motor.Iqm)>>31)*MC_BLDC_motor.Speedm);
8000406c:	40 19       	lddsp	r9,sp[0x4]
8000406e:	72 35       	ld.w	r5,r9[0xc]
    Vdref = FOC_Id_reg.IP_REG_output;
    // REgulate Iq
    FOC_Iq_reg.IP_REG_mes = MC_BLDC_motor.Iqm;
    FOC_Iq_reg.IP_REG_ref = MC_BLDC_motor.Iqref;
    IP_REG_compute(&FOC_Iq_reg);
    Vqref = FOC_Iq_reg.IP_REG_output;
80004070:	6e 43       	ld.w	r3,r7[0x10]
80004072:	ef 0b 00 18 	ld.sh	r11,r7[24]
  int prev_Vd;
  int prev_Vq;
  
  // Vd= Vdref-Speed.Lc.Iq
  // Vq= Vqref+omega.Lc.Id+(Speed/p).kcn
  Vd=Vdref- (int)((((long long int)Lc* (long long int)MC_BLDC_motor.Iqm)>>31)*MC_BLDC_motor.Speedm);
80004076:	e6 08 04 42 	muls.d	r2,r3,r8
8000407a:	6e 21       	ld.w	r1,r7[0x8]
8000407c:	e2 08 04 40 	muls.d	r0,r1,r8
  Vq= Vqref+ (int)((((long long int)Lc* (long long int)MC_BLDC_motor.Idm)>>31)*MC_BLDC_motor.Speedm)+Kcn*(MC_BLDC_motor.Speedm/P);
80004080:	e2 08 14 1f 	asr	r8,r1,0x1f
80004084:	6c 0e       	ld.w	lr,r6[0x0]
80004086:	5c 7b       	castu.h	r11
  int prev_Vd;
  int prev_Vq;
  
  // Vd= Vdref-Speed.Lc.Iq
  // Vq= Vqref+omega.Lc.Id+(Speed/p).kcn
  Vd=Vdref- (int)((((long long int)Lc* (long long int)MC_BLDC_motor.Iqm)>>31)*MC_BLDC_motor.Speedm);
80004088:	50 38       	stdsp	sp[0xc],r8
8000408a:	e4 09 16 1f 	lsr	r9,r2,0x1f
8000408e:	f3 e3 10 19 	or	r9,r9,r3<<0x1
80004092:	f2 0b 06 48 	mulu.d	r8,r9,r11
80004096:	fe fa 06 de 	ld.w	r10,pc[1758]
    Vdref = FOC_Id_reg.IP_REG_output;
    // REgulate Iq
    FOC_Iq_reg.IP_REG_mes = MC_BLDC_motor.Iqm;
    FOC_Iq_reg.IP_REG_ref = MC_BLDC_motor.Iqref;
    IP_REG_compute(&FOC_Iq_reg);
    Vqref = FOC_Iq_reg.IP_REG_output;
8000409a:	fc 08 01 06 	sub	r6,lr,r8
  int prev_Vd;
  int prev_Vq;
  
  // Vd= Vdref-Speed.Lc.Iq
  // Vq= Vqref+omega.Lc.Id+(Speed/p).kcn
  Vd=Vdref- (int)((((long long int)Lc* (long long int)MC_BLDC_motor.Iqm)>>31)*MC_BLDC_motor.Speedm);
8000409e:	e0 68 f0 06 	mov	r8,61446
  Vq= Vqref+ (int)((((long long int)Lc* (long long int)MC_BLDC_motor.Idm)>>31)*MC_BLDC_motor.Speedm)+Kcn*(MC_BLDC_motor.Speedm/P);
800040a2:	ea 18 00 16 	orh	r8,0x16
800040a6:	ef 0c 00 18 	ld.sh	r12,r7[24]
800040aa:	95 05       	st.w	r10[0x0],r5
800040ac:	5c 7c       	castu.h	r12
    Vdref = FOC_Id_reg.IP_REG_output;
    // REgulate Iq
    FOC_Iq_reg.IP_REG_mes = MC_BLDC_motor.Iqm;
    FOC_Iq_reg.IP_REG_ref = MC_BLDC_motor.Iqref;
    IP_REG_compute(&FOC_Iq_reg);
    Vqref = FOC_Iq_reg.IP_REG_output;
800040ae:	fe f4 06 ea 	ld.w	r4,pc[1770]
  int prev_Vd;
  int prev_Vq;
  
  // Vd= Vdref-Speed.Lc.Iq
  // Vq= Vqref+omega.Lc.Id+(Speed/p).kcn
  Vd=Vdref- (int)((((long long int)Lc* (long long int)MC_BLDC_motor.Iqm)>>31)*MC_BLDC_motor.Speedm);
800040b2:	ef 0a 00 18 	ld.sh	r10,r7[24]
  Vq= Vqref+ (int)((((long long int)Lc* (long long int)MC_BLDC_motor.Idm)>>31)*MC_BLDC_motor.Speedm)+Kcn*(MC_BLDC_motor.Speedm/P);
800040b6:	e0 09 16 1f 	lsr	r9,r0,0x1f
800040ba:	f5 da c0 4e 	bfextu	r10,r10,0x2,0xe
800040be:	f3 e1 10 19 	or	r9,r9,r1<<0x1
800040c2:	b1 3a       	mul	r10,r8
800040c4:	fe f3 06 d8 	ld.w	r3,pc[1752]
800040c8:	f2 0c 06 48 	mulu.d	r8,r9,r12
800040cc:	0a 0a       	add	r10,r5
800040ce:	89 06       	st.w	r4[0x0],r6
800040d0:	f4 08 00 05 	add	r5,r10,r8
800040d4:	87 05       	st.w	r3[0x0],r5
800040d6:	30 08       	mov	r8,0
800040d8:	e0 6c cc cc 	mov	r12,52428

  prev_Vd = Vd;
  prev_Vq = Vq;
  
  // if abs(Vd)>1/sqrt(8) (V.fixe) so Vd=1/sqrt(8)
  if (Vd >rayon_limitation)
800040dc:	ea 1c 2c cc 	orh	r12,0x2ccc
800040e0:	18 36       	cp.w	r6,r12
800040e2:	e0 89 00 7a 	brgt	800041d6 <FOC_state_machine+0x306>
800040e6:	e0 6b 33 34 	mov	r11,13108
  {
     Vd=rayon_limitation;
     Vq=0;
  }
  else if(Vd <-rayon_limitation)
800040ea:	ea 1b d3 33 	orh	r11,0xd333
800040ee:	16 36       	cp.w	r6,r11
800040f0:	e0 85 01 a2 	brlt	80004434 <FOC_state_machine+0x564>
800040f4:	ec 08 14 1f 	asr	r8,r6,0x1f
    }
 else 
 {
   int Vdcarre;
   int test;
   Vdcarre=(int) (((long long int)Vd * (long long int)Vd)>>31);
800040f8:	ad 38       	mul	r8,r6
800040fa:	ec 06 06 4a 	mulu.d	r10,r6,r6
800040fe:	ea 0c 14 1f 	asr	r12,r5,0x1f
   //test = 268435456 -Vqcarre;
    test=rayon_carre_limitation -(int) (((long long int)Vq*(long long int)Vq)>>31);
80004102:	f6 08 00 1b 	add	r11,r11,r8<<0x1
    }
 else 
 {
   int Vdcarre;
   int test;
   Vdcarre=(int) (((long long int)Vd * (long long int)Vd)>>31);
80004106:	ab 3c       	mul	r12,r5
80004108:	ea 05 06 48 	mulu.d	r8,r5,r5
   //test = 268435456 -Vqcarre;
    test=rayon_carre_limitation -(int) (((long long int)Vq*(long long int)Vq)>>31);
   if (Vdcarre>test)  // if vd^2+vq^2 >1/8
8000410c:	f2 0c 00 19 	add	r9,r9,r12<<0x1
80004110:	f4 0e 16 1f 	lsr	lr,r10,0x1f
    }
 else 
 {
   int Vdcarre;
   int test;
   Vdcarre=(int) (((long long int)Vd * (long long int)Vd)>>31);
80004114:	f0 0a 16 1f 	lsr	r10,r8,0x1f
   //test = 268435456 -Vqcarre;
    test=rayon_carre_limitation -(int) (((long long int)Vq*(long long int)Vq)>>31);
   if (Vdcarre>test)  // if vd^2+vq^2 >1/8
80004118:	fd eb 10 1e 	or	lr,lr,r11<<0x1
    }
 else 
 {
   int Vdcarre;
   int test;
   Vdcarre=(int) (((long long int)Vd * (long long int)Vd)>>31);
8000411c:	f5 e9 10 1a 	or	r10,r10,r9<<0x1
   //test = 268435456 -Vqcarre;
    test=rayon_carre_limitation -(int) (((long long int)Vq*(long long int)Vq)>>31);
   if (Vdcarre>test)  // if vd^2+vq^2 >1/8
80004120:	e0 69 14 7a 	mov	r9,5242
80004124:	ea 19 0f ae 	orh	r9,0xfae
80004128:	f2 0a 01 0a 	sub	r10,r9,r10
8000412c:	14 3e       	cp.w	lr,r10
8000412e:	e0 8a 00 0c 	brle	80004146 <FOC_state_machine+0x276>
80004132:	58 05       	cp.w	r5,0
80004134:	e0 8a 02 ef 	brle	80004712 <FOC_state_machine+0x842>
   {
    if  (Vq>0)
80004138:	12 9c       	mov	r12,r9
8000413a:	e0 6b 01 2c 	mov	r11,300
    {
      //*Vq=sqrt( 268435456- *Vd^2 );
      //test=268435456- Vdcarre;
      test=rayon_carre_limitation- Vdcarre;
      Vq=sqrtt(test,erreur_max);
8000413e:	1c 1c       	sub	r12,lr
80004140:	e0 a0 04 84 	rcall	80004a48 <sqrtt>
80004144:	87 0c       	st.w	r3[0x0],r12
80004146:	68 0c       	ld.w	r12,r4[0x0]
80004148:	ec 0c 01 08 	sub	r8,r6,r12
      test=rayon_carre_limitation- Vdcarre;
      Vq=-sqrtt(test,erreur_max);
    }
   }
 }
  FOC_Id_reg.IP_REG_discharge = prev_Vd - Vd;
8000414c:	40 0e       	lddsp	lr,sp[0x0]
8000414e:	66 0b       	ld.w	r11,r3[0x0]
80004150:	9d 58       	st.w	lr[0x14],r8
  FOC_Iq_reg.IP_REG_discharge = prev_Vq - Vq; 
80004152:	ea 0b 01 08 	sub	r8,r5,r11
80004156:	40 1a       	lddsp	r10,sp[0x4]
80004158:	fe f6 06 20 	ld.w	r6,pc[1568]
}
static void FOC_compute_inv_park(void)
{
    // Compute new Vd and Vq values
    FOC_computeVdVq();
    park_inv(Vd,Vq,MC_BLDC_motor.Tetam,&(svpwm_options.Valpha),&(svpwm_options.Vbeta));
8000415c:	95 58       	st.w	r10[0x14],r8
8000415e:	ec c9 ff fc 	sub	r9,r6,-4
80004162:	ec c8 ff f8 	sub	r8,r6,-8
80004166:	ef 0a 00 22 	ld.sh	r10,r7[34]
8000416a:	5c 7a       	castu.h	r10
8000416c:	fe b0 f9 04 	rcall	80003374 <park_inv>
80004170:	0c 9c       	mov	r12,r6
80004172:	fe b0 f9 6c 	rcall	8000344a <svpwm>

}

static void FOC_compute_svpwm(void)
{
     svpwm(&svpwm_options);
80004176:	6e 18       	ld.w	r8,r7[0x4]
80004178:	58 08       	cp.w	r8,0
}
static void FOC_update_duty(void)
{
  if ( MC_BLDC_motor.mc_motor_direction == MC_CW)
8000417a:	c3 10       	breq	800041dc <FOC_state_machine+0x30c>
8000417c:	6c 88       	ld.w	r8,r6[0x20]
8000417e:	5c 78       	castu.h	r8
                            svpwm_options.duty4,
                            svpwm_options.duty5);
   }
   else
   {
      mc_update_duty_cycle( svpwm_options.duty2,
80004180:	1a d8       	st.w	--sp,r8
80004182:	6c 78       	ld.w	r8,r6[0x1c]
80004184:	6c 49       	ld.w	r9,r6[0x10]
80004186:	5c 78       	castu.h	r8
80004188:	6c 3a       	ld.w	r10,r6[0xc]
8000418a:	5c 79       	castu.h	r9
8000418c:	6c 6b       	ld.w	r11,r6[0x18]
8000418e:	5c 7a       	castu.h	r10
80004190:	6c 5c       	ld.w	r12,r6[0x14]
80004192:	5c 7b       	castu.h	r11
80004194:	5c 7c       	castu.h	r12
80004196:	fe b0 fd 2b 	rcall	80003bec <mc_update_duty_cycle>
8000419a:	2f fd       	sub	sp,-4
8000419c:	2f cd       	sub	sp,-16
8000419e:	d8 32       	popm	r0-r7,pc
      FOC_compute_svpwm();
      // Update Duty Cycle
      FOC_update_duty();
      break;
  }
}
800041a0:	ef 08 00 18 	ld.sh	r8,r7[24]
}

static void FOC_regulate_torque(void)
{
    // REgulate Speed
    FOC_Speed_reg.IP_REG_mes = (MC_BLDC_motor.Speedm)*(transf_v);
800041a4:	ec 79 1b 71 	mov	r9,858993
800041a8:	5c 78       	castu.h	r8
800041aa:	b3 38       	mul	r8,r9
800041ac:	fe f6 05 ac 	ld.w	r6,pc[1452]
800041b0:	8d 18       	st.w	r6[0x4],r8
800041b2:	6e 78       	ld.w	r8,r7[0x1c]
800041b4:	0c 9c       	mov	r12,r6
    FOC_Speed_reg.IP_REG_ref = MC_BLDC_motor.Speedref;
800041b6:	8d 28       	st.w	r6[0x8],r8
    IP_REG_compute(&FOC_Speed_reg);
800041b8:	fe b0 f9 2a 	rcall	8000340c <IP_REG_compute>
800041bc:	6c 38       	ld.w	r8,r6[0xc]
800041be:	f0 08 10 68 	mul	r8,r8,104
    MC_BLDC_motor.Iqref = FOC_Speed_reg.IP_REG_output*104; //(2500/24)
800041c2:	8f 58       	st.w	r7[0x14],r8
800041c4:	fe f9 05 90 	ld.w	r9,pc[1424]
    FOC_Iq_reg.IP_REG_lasterror = MC_BLDC_motor.Iqref - MC_BLDC_motor.Iqm;
800041c8:	50 19       	stdsp	sp[0x4],r9
800041ca:	6e 58       	ld.w	r8,r7[0x14]
800041cc:	40 1e       	lddsp	lr,sp[0x4]
800041ce:	6e 49       	ld.w	r9,r7[0x10]
800041d0:	12 18       	sub	r8,r9
800041d2:	9d 48       	st.w	lr[0x10],r8
800041d4:	c3 2b       	rjmp	80004038 <FOC_state_machine+0x168>
800041d6:	87 08       	st.w	r3[0x0],r8
800041d8:	89 0c       	st.w	r4[0x0],r12
  
  // if abs(Vd)>1/sqrt(8) (V.fixe) so Vd=1/sqrt(8)
  if (Vd >rayon_limitation)
  {
     Vd=rayon_limitation;
     Vq=0;
800041da:	cb 6b       	rjmp	80004146 <FOC_state_machine+0x276>
  prev_Vq = Vq;
  
  // if abs(Vd)>1/sqrt(8) (V.fixe) so Vd=1/sqrt(8)
  if (Vd >rayon_limitation)
  {
     Vd=rayon_limitation;
800041dc:	6c 88       	ld.w	r8,r6[0x20]
800041de:	5c 78       	castu.h	r8
}
static void FOC_update_duty(void)
{
  if ( MC_BLDC_motor.mc_motor_direction == MC_CW)
  {
      mc_update_duty_cycle( svpwm_options.duty0,
800041e0:	1a d8       	st.w	--sp,r8
800041e2:	6c 78       	ld.w	r8,r6[0x1c]
800041e4:	6c 69       	ld.w	r9,r6[0x18]
800041e6:	5c 78       	castu.h	r8
800041e8:	6c 5a       	ld.w	r10,r6[0x14]
800041ea:	5c 79       	castu.h	r9
800041ec:	6c 4b       	ld.w	r11,r6[0x10]
800041ee:	5c 7a       	castu.h	r10
800041f0:	6c 3c       	ld.w	r12,r6[0xc]
800041f2:	5c 7b       	castu.h	r11
800041f4:	5c 7c       	castu.h	r12
800041f6:	fe b0 fc fb 	rcall	80003bec <mc_update_duty_cycle>
800041fa:	2f fd       	sub	sp,-4
800041fc:	2f cd       	sub	sp,-16
800041fe:	d8 32       	popm	r0-r7,pc
      FOC_compute_svpwm();
      // Update Duty Cycle
      FOC_update_duty();
      break;
  }
}
80004200:	58 3a       	cp.w	r10,3
80004202:	e0 80 01 99 	breq	80004534 <FOC_state_machine+0x664>
/*! \name Start Motor sequence
 */
//! @{
static unsigned char FOC_start_motor(void)
{
  switch(FOC_rampup_step)
80004206:	58 4a       	cp.w	r10,4
80004208:	fe 91 fe 6e 	brne	80003ee4 <FOC_state_machine+0x14>
8000420c:	fe f9 05 60 	ld.w	r9,pc[1376]
      }
    break;


    case FOC_rampup_step_torquereg_loop:
      FOC_rampup_step_torquereg_counter++; 
80004210:	72 08       	ld.w	r8,r9[0x0]
80004212:	2f f8       	sub	r8,-1
80004214:	93 08       	st.w	r9[0x0],r8
80004216:	fe b0 fd eb 	rcall	80003dec <FOC_read_current>
      FOC_read_current();
8000421a:	fe f7 05 56 	ld.w	r7,pc[1366]
  FOC_Iq_reg.IP_REG_discharge = prev_Vq - Vq; 
}

static void FOC_update_teta_speed(void)
{
     hall_estimator_update_teta_and_speed(&(MC_BLDC_motor.Tetam), &(MC_BLDC_motor.Speedm));
8000421e:	ee cb ff e8 	sub	r11,r7,-24
80004222:	ee cc ff de 	sub	r12,r7,-34
80004226:	fe b0 f7 4b 	rcall	800030bc <hall_estimator_update_teta_and_speed>
8000422a:	fe fb 05 56 	ld.w	r11,pc[1366]
}
static void FOC_compute_clarke(void)
{
     concordia(ia,ib,ic,&ialpha,&ibeta);
8000422e:	fe fc 05 56 	ld.w	r12,pc[1366]
80004232:	fe f5 05 56 	ld.w	r5,pc[1366]
80004236:	fe f3 05 56 	ld.w	r3,pc[1366]
8000423a:	0a 98       	mov	r8,r5
8000423c:	06 99       	mov	r9,r3
8000423e:	76 0a       	ld.w	r10,r11[0x0]
80004240:	fe f6 05 50 	ld.w	r6,pc[1360]
80004244:	78 0b       	ld.w	r11,r12[0x0]
80004246:	6c 0c       	ld.w	r12,r6[0x0]
80004248:	fe b0 f7 1e 	rcall	80003084 <concordia>
8000424c:	fe f8 05 04 	ld.w	r8,pc[1284]
    FOC_Iq_reg.IP_REG_lasterror = MC_BLDC_motor.Iqref - MC_BLDC_motor.Iqm;
}
static void FOC_regulate_field(void)
{
    // REgulate Id
    FOC_Id_reg.IP_REG_mes = MC_BLDC_motor.Idm;
80004250:	6a 0b       	ld.w	r11,r5[0x0]
80004252:	66 0c       	ld.w	r12,r3[0x0]
{
     concordia(ia,ib,ic,&ialpha,&ibeta);
}
static void FOC_compute_park(void)
{
    park(ialpha,ibeta,MC_BLDC_motor.Tetam,&(MC_BLDC_motor.Idm),&(MC_BLDC_motor.Iqm));
80004254:	ee c9 ff f8 	sub	r9,r7,-8
80004258:	50 08       	stdsp	sp[0x0],r8
8000425a:	ee c8 ff f0 	sub	r8,r7,-16
8000425e:	ef 0a 00 22 	ld.sh	r10,r7[34]
80004262:	5c 7a       	castu.h	r10
80004264:	fe b0 f8 3c 	rcall	800032dc <park>
80004268:	6e 28       	ld.w	r8,r7[0x8]
8000426a:	40 0e       	lddsp	lr,sp[0x0]
    FOC_Iq_reg.IP_REG_lasterror = MC_BLDC_motor.Iqref - MC_BLDC_motor.Iqm;
}
static void FOC_regulate_field(void)
{
    // REgulate Id
    FOC_Id_reg.IP_REG_mes = MC_BLDC_motor.Idm;
8000426c:	9d 18       	st.w	lr[0x4],r8
8000426e:	fe fc 04 e6 	ld.w	r12,pc[1254]
    FOC_Id_reg.IP_REG_ref = MC_BLDC_motor.Idref;
    IP_REG_compute(&FOC_Id_reg);
    Vdref = FOC_Id_reg.IP_REG_output;
    // REgulate Iq
    FOC_Iq_reg.IP_REG_mes = MC_BLDC_motor.Iqm;
80004272:	50 1c       	stdsp	sp[0x4],r12
80004274:	6e 38       	ld.w	r8,r7[0xc]
80004276:	9d 28       	st.w	lr[0x8],r8
}
static void FOC_regulate_field(void)
{
    // REgulate Id
    FOC_Id_reg.IP_REG_mes = MC_BLDC_motor.Idm;
    FOC_Id_reg.IP_REG_ref = MC_BLDC_motor.Idref;
80004278:	40 0c       	lddsp	r12,sp[0x0]
8000427a:	fe b0 f8 c9 	rcall	8000340c <IP_REG_compute>
    IP_REG_compute(&FOC_Id_reg);
8000427e:	40 0b       	lddsp	r11,sp[0x0]
80004280:	76 39       	ld.w	r9,r11[0xc]
    Vdref = FOC_Id_reg.IP_REG_output;
80004282:	6e 48       	ld.w	r8,r7[0x10]
80004284:	40 1a       	lddsp	r10,sp[0x4]
    // REgulate Iq
    FOC_Iq_reg.IP_REG_mes = MC_BLDC_motor.Iqm;
80004286:	95 18       	st.w	r10[0x4],r8
80004288:	fe f8 04 f4 	ld.w	r8,pc[1268]
{
    // REgulate Id
    FOC_Id_reg.IP_REG_mes = MC_BLDC_motor.Idm;
    FOC_Id_reg.IP_REG_ref = MC_BLDC_motor.Idref;
    IP_REG_compute(&FOC_Id_reg);
    Vdref = FOC_Id_reg.IP_REG_output;
8000428c:	91 09       	st.w	r8[0x0],r9
8000428e:	6e 58       	ld.w	r8,r7[0x14]
80004290:	95 28       	st.w	r10[0x8],r8
    // REgulate Iq
    FOC_Iq_reg.IP_REG_mes = MC_BLDC_motor.Iqm;
    FOC_Iq_reg.IP_REG_ref = MC_BLDC_motor.Iqref;
80004292:	40 1c       	lddsp	r12,sp[0x4]
80004294:	fe b0 f8 bc 	rcall	8000340c <IP_REG_compute>
    IP_REG_compute(&FOC_Iq_reg);
80004298:	40 1c       	lddsp	r12,sp[0x4]
8000429a:	e8 68 5b 18 	mov	r8,547608
  int prev_Vd;
  int prev_Vq;
  
  // Vd= Vdref-Speed.Lc.Iq
  // Vq= Vqref+omega.Lc.Id+(Speed/p).kcn
  Vd=Vdref- (int)((((long long int)Lc* (long long int)MC_BLDC_motor.Iqm)>>31)*MC_BLDC_motor.Speedm);
8000429e:	fe fe 04 d6 	ld.w	lr,pc[1238]
    Vdref = FOC_Id_reg.IP_REG_output;
    // REgulate Iq
    FOC_Iq_reg.IP_REG_mes = MC_BLDC_motor.Iqm;
    FOC_Iq_reg.IP_REG_ref = MC_BLDC_motor.Iqref;
    IP_REG_compute(&FOC_Iq_reg);
    Vqref = FOC_Iq_reg.IP_REG_output;
800042a2:	50 2e       	stdsp	sp[0x8],lr
800042a4:	78 31       	ld.w	r1,r12[0xc]
800042a6:	6e 4b       	ld.w	r11,r7[0x10]
800042a8:	ef 0c 00 18 	ld.sh	r12,r7[24]
  int prev_Vd;
  int prev_Vq;
  
  // Vd= Vdref-Speed.Lc.Iq
  // Vq= Vqref+omega.Lc.Id+(Speed/p).kcn
  Vd=Vdref- (int)((((long long int)Lc* (long long int)MC_BLDC_motor.Iqm)>>31)*MC_BLDC_motor.Speedm);
800042ac:	f6 08 04 4a 	muls.d	r10,r11,r8
800042b0:	6e 23       	ld.w	r3,r7[0x8]
800042b2:	f4 09 16 1f 	lsr	r9,r10,0x1f
800042b6:	e6 08 04 42 	muls.d	r2,r3,r8
  Vq= Vqref+ (int)((((long long int)Lc* (long long int)MC_BLDC_motor.Idm)>>31)*MC_BLDC_motor.Speedm)+Kcn*(MC_BLDC_motor.Speedm/P);
800042ba:	f3 eb 10 19 	or	r9,r9,r11<<0x1
  int prev_Vd;
  int prev_Vq;
  
  // Vd= Vdref-Speed.Lc.Iq
  // Vq= Vqref+omega.Lc.Id+(Speed/p).kcn
  Vd=Vdref- (int)((((long long int)Lc* (long long int)MC_BLDC_motor.Iqm)>>31)*MC_BLDC_motor.Speedm);
800042be:	5c 7c       	castu.h	r12
800042c0:	f2 0c 06 48 	mulu.d	r8,r9,r12
800042c4:	ef 06 00 18 	ld.sh	r6,r7[24]
  Vq= Vqref+ (int)((((long long int)Lc* (long long int)MC_BLDC_motor.Idm)>>31)*MC_BLDC_motor.Speedm)+Kcn*(MC_BLDC_motor.Speedm/P);
800042c8:	fe fb 04 b4 	ld.w	r11,pc[1204]
  int prev_Vd;
  int prev_Vq;
  
  // Vd= Vdref-Speed.Lc.Iq
  // Vq= Vqref+omega.Lc.Id+(Speed/p).kcn
  Vd=Vdref- (int)((((long long int)Lc* (long long int)MC_BLDC_motor.Iqm)>>31)*MC_BLDC_motor.Speedm);
800042cc:	5c 76       	castu.h	r6
800042ce:	76 0a       	ld.w	r10,r11[0x0]
  Vq= Vqref+ (int)((((long long int)Lc* (long long int)MC_BLDC_motor.Idm)>>31)*MC_BLDC_motor.Speedm)+Kcn*(MC_BLDC_motor.Speedm/P);
800042d0:	f4 08 01 05 	sub	r5,r10,r8
  int prev_Vd;
  int prev_Vq;
  
  // Vd= Vdref-Speed.Lc.Iq
  // Vq= Vqref+omega.Lc.Id+(Speed/p).kcn
  Vd=Vdref- (int)((((long long int)Lc* (long long int)MC_BLDC_motor.Iqm)>>31)*MC_BLDC_motor.Speedm);
800042d4:	e0 68 f0 06 	mov	r8,61446
  Vq= Vqref+ (int)((((long long int)Lc* (long long int)MC_BLDC_motor.Idm)>>31)*MC_BLDC_motor.Speedm)+Kcn*(MC_BLDC_motor.Speedm/P);
800042d8:	ea 18 00 16 	orh	r8,0x16
800042dc:	e6 00 14 1f 	asr	r0,r3,0x1f
800042e0:	fe f4 04 b8 	ld.w	r4,pc[1208]
  int prev_Vd;
  int prev_Vq;
  
  // Vd= Vdref-Speed.Lc.Iq
  // Vq= Vqref+omega.Lc.Id+(Speed/p).kcn
  Vd=Vdref- (int)((((long long int)Lc* (long long int)MC_BLDC_motor.Iqm)>>31)*MC_BLDC_motor.Speedm);
800042e4:	ef 0a 00 18 	ld.sh	r10,r7[24]
  Vq= Vqref+ (int)((((long long int)Lc* (long long int)MC_BLDC_motor.Idm)>>31)*MC_BLDC_motor.Speedm)+Kcn*(MC_BLDC_motor.Speedm/P);
800042e8:	e4 09 16 1f 	lsr	r9,r2,0x1f
800042ec:	f5 da c0 4e 	bfextu	r10,r10,0x2,0xe
800042f0:	f3 e3 10 19 	or	r9,r9,r3<<0x1
800042f4:	b1 3a       	mul	r10,r8
800042f6:	fe f3 04 a6 	ld.w	r3,pc[1190]
800042fa:	02 0a       	add	r10,r1
800042fc:	f2 06 06 48 	mulu.d	r8,r9,r6
80004300:	9d 01       	st.w	lr[0x0],r1
80004302:	f4 08 00 06 	add	r6,r10,r8
80004306:	89 05       	st.w	r4[0x0],r5
80004308:	87 06       	st.w	r3[0x0],r6
  int prev_Vd;
  int prev_Vq;
  
  // Vd= Vdref-Speed.Lc.Iq
  // Vq= Vqref+omega.Lc.Id+(Speed/p).kcn
  Vd=Vdref- (int)((((long long int)Lc* (long long int)MC_BLDC_motor.Iqm)>>31)*MC_BLDC_motor.Speedm);
8000430a:	30 08       	mov	r8,0
  Vq= Vqref+ (int)((((long long int)Lc* (long long int)MC_BLDC_motor.Idm)>>31)*MC_BLDC_motor.Speedm)+Kcn*(MC_BLDC_motor.Speedm/P);
8000430c:	e0 6a cc cc 	mov	r10,52428

  prev_Vd = Vd;
  prev_Vq = Vq;
  
  // if abs(Vd)>1/sqrt(8) (V.fixe) so Vd=1/sqrt(8)
  if (Vd >rayon_limitation)
80004310:	ea 1a 2c cc 	orh	r10,0x2ccc
80004314:	14 35       	cp.w	r5,r10
80004316:	e0 89 01 b4 	brgt	8000467e <FOC_state_machine+0x7ae>
8000431a:	e0 69 33 34 	mov	r9,13108
  {
     Vd=rayon_limitation;
     Vq=0;
  }
  else if(Vd <-rayon_limitation)
8000431e:	ea 19 d3 33 	orh	r9,0xd333
80004322:	12 35       	cp.w	r5,r9
80004324:	e0 85 02 03 	brlt	8000472a <FOC_state_machine+0x85a>
80004328:	ea 08 14 1f 	asr	r8,r5,0x1f
    }
 else 
 {
   int Vdcarre;
   int test;
   Vdcarre=(int) (((long long int)Vd * (long long int)Vd)>>31);
8000432c:	ab 38       	mul	r8,r5
8000432e:	ea 05 06 4a 	mulu.d	r10,r5,r5
80004332:	f6 08 00 1b 	add	r11,r11,r8<<0x1
80004336:	ec 06 06 48 	mulu.d	r8,r6,r6
   //test = 268435456 -Vqcarre;
    test=rayon_carre_limitation -(int) (((long long int)Vq*(long long int)Vq)>>31);
   if (Vdcarre>test)  // if vd^2+vq^2 >1/8
8000433a:	f4 0e 16 1f 	lsr	lr,r10,0x1f
    }
 else 
 {
   int Vdcarre;
   int test;
   Vdcarre=(int) (((long long int)Vd * (long long int)Vd)>>31);
8000433e:	ec 0c 14 1f 	asr	r12,r6,0x1f
   //test = 268435456 -Vqcarre;
    test=rayon_carre_limitation -(int) (((long long int)Vq*(long long int)Vq)>>31);
80004342:	f0 0a 16 1f 	lsr	r10,r8,0x1f
   if (Vdcarre>test)  // if vd^2+vq^2 >1/8
80004346:	ad 3c       	mul	r12,r6
80004348:	e0 68 14 7a 	mov	r8,5242
8000434c:	ea 18 0f ae 	orh	r8,0xfae
80004350:	f2 0c 00 19 	add	r9,r9,r12<<0x1
80004354:	fd eb 10 1e 	or	lr,lr,r11<<0x1
    }
 else 
 {
   int Vdcarre;
   int test;
   Vdcarre=(int) (((long long int)Vd * (long long int)Vd)>>31);
80004358:	f5 e9 10 1a 	or	r10,r10,r9<<0x1
   //test = 268435456 -Vqcarre;
    test=rayon_carre_limitation -(int) (((long long int)Vq*(long long int)Vq)>>31);
   if (Vdcarre>test)  // if vd^2+vq^2 >1/8
8000435c:	f0 0a 01 0a 	sub	r10,r8,r10
80004360:	14 3e       	cp.w	lr,r10
80004362:	e0 8a 00 0c 	brle	8000437a <FOC_state_machine+0x4aa>
80004366:	58 06       	cp.w	r6,0
80004368:	e0 8a 01 e5 	brle	80004732 <FOC_state_machine+0x862>
   {
    if  (Vq>0)
8000436c:	10 9c       	mov	r12,r8
8000436e:	e0 6b 01 2c 	mov	r11,300
    {
      //*Vq=sqrt( 268435456- *Vd^2 );
      //test=268435456- Vdcarre;
      test=rayon_carre_limitation- Vdcarre;
      Vq=sqrtt(test,erreur_max);
80004372:	1c 1c       	sub	r12,lr
80004374:	e0 a0 03 6a 	rcall	80004a48 <sqrtt>
80004378:	87 0c       	st.w	r3[0x0],r12
8000437a:	40 0e       	lddsp	lr,sp[0x0]
8000437c:	68 08       	ld.w	r8,r4[0x0]
      test=rayon_carre_limitation- Vdcarre;
      Vq=-sqrtt(test,erreur_max);
    }
   }
 }
  FOC_Id_reg.IP_REG_discharge = prev_Vd - Vd;
8000437e:	ea 08 01 08 	sub	r8,r5,r8
80004382:	9d 58       	st.w	lr[0x14],r8
80004384:	66 09       	ld.w	r9,r3[0x0]
80004386:	40 1c       	lddsp	r12,sp[0x4]
  FOC_Iq_reg.IP_REG_discharge = prev_Vq - Vq; 
80004388:	ec 09 01 09 	sub	r9,r6,r9
8000438c:	fe fe 03 f0 	ld.w	lr,pc[1008]
      FOC_update_teta_speed();
      FOC_compute_clarke();
      FOC_compute_park();
      FOC_regulate_field();
      FOC_computeVdVq();
      park_inv(Vdref,Vqref,MC_BLDC_motor.Tetam,&(svpwm_options.Valpha),&(svpwm_options.Vbeta));
80004390:	99 59       	st.w	r12[0x14],r9
80004392:	40 2a       	lddsp	r10,sp[0x8]
      Vq=-sqrtt(test,erreur_max);
    }
   }
 }
  FOC_Id_reg.IP_REG_discharge = prev_Vd - Vd;
  FOC_Iq_reg.IP_REG_discharge = prev_Vq - Vq; 
80004394:	fe f6 03 e4 	ld.w	r6,pc[996]
      FOC_update_teta_speed();
      FOC_compute_clarke();
      FOC_compute_park();
      FOC_regulate_field();
      FOC_computeVdVq();
      park_inv(Vdref,Vqref,MC_BLDC_motor.Tetam,&(svpwm_options.Valpha),&(svpwm_options.Vbeta));
80004398:	74 0b       	ld.w	r11,r10[0x0]
8000439a:	ec c8 ff f8 	sub	r8,r6,-8
8000439e:	7c 0c       	ld.w	r12,lr[0x0]
800043a0:	ef 0a 00 22 	ld.sh	r10,r7[34]
800043a4:	ec c9 ff fc 	sub	r9,r6,-4
800043a8:	5c 7a       	castu.h	r10
800043aa:	fe b0 f7 e5 	rcall	80003374 <park_inv>
800043ae:	0c 9c       	mov	r12,r6
800043b0:	fe b0 f8 4d 	rcall	8000344a <svpwm>

}

static void FOC_compute_svpwm(void)
{
     svpwm(&svpwm_options);
800043b4:	6e 18       	ld.w	r8,r7[0x4]
800043b6:	58 08       	cp.w	r8,0
}
static void FOC_update_duty(void)
{
  if ( MC_BLDC_motor.mc_motor_direction == MC_CW)
800043b8:	e0 80 01 9b 	breq	800046ee <FOC_state_machine+0x81e>
800043bc:	6c 88       	ld.w	r8,r6[0x20]
800043be:	5c 78       	castu.h	r8
                            svpwm_options.duty4,
                            svpwm_options.duty5);
   }
   else
   {
      mc_update_duty_cycle( svpwm_options.duty2,
800043c0:	1a d8       	st.w	--sp,r8
800043c2:	6c 78       	ld.w	r8,r6[0x1c]
800043c4:	6c 49       	ld.w	r9,r6[0x10]
800043c6:	5c 78       	castu.h	r8
800043c8:	6c 3a       	ld.w	r10,r6[0xc]
800043ca:	5c 79       	castu.h	r9
800043cc:	6c 6b       	ld.w	r11,r6[0x18]
800043ce:	5c 7a       	castu.h	r10
800043d0:	6c 5c       	ld.w	r12,r6[0x14]
800043d2:	5c 7b       	castu.h	r11
800043d4:	5c 7c       	castu.h	r12
800043d6:	fe b0 fc 0b 	rcall	80003bec <mc_update_duty_cycle>
800043da:	2f fd       	sub	sp,-4
800043dc:	fe fc 03 90 	ld.w	r12,pc[912]
      FOC_regulate_field();
      FOC_computeVdVq();
      park_inv(Vdref,Vqref,MC_BLDC_motor.Tetam,&(svpwm_options.Valpha),&(svpwm_options.Vbeta));
      FOC_compute_svpwm();
      FOC_update_duty();
      if (FOC_rampup_step_torquereg_counter == 10000) {
800043e0:	78 08       	ld.w	r8,r12[0x0]
800043e2:	e0 48 27 10 	cp.w	r8,10000
800043e6:	fe 91 fd 7f 	brne	80003ee4 <FOC_state_machine+0x14>
800043ea:	ef 08 00 18 	ld.sh	r8,r7[24]
        MC_BLDC_motor.Speedref=MC_BLDC_motor.Speedm*transf_v;   
800043ee:	ec 79 1b 71 	mov	r9,858993
800043f2:	5c 78       	castu.h	r8
800043f4:	b3 38       	mul	r8,r9
800043f6:	8f 78       	st.w	r7[0x1c],r8
800043f8:	fe fc 03 60 	ld.w	r12,pc[864]
        FOC_Speed_reg.IP_REG_lasterror=0;  
800043fc:	30 08       	mov	r8,0
800043fe:	99 48       	st.w	r12[0x10],r8
80004400:	6e 79       	ld.w	r9,r7[0x1c]
80004402:	78 73       	ld.w	r3,r12[0x1c]
        FOC_Speed_reg.IP_REG_feedback=(int)(((long long int)MC_BLDC_motor.Speedref*(long long int)FOC_Speed_reg.Kp)>>31) + (MC_BLDC_motor.Iqref/104);
80004404:	6e 5b       	ld.w	r11,r7[0x14]
80004406:	e6 09 04 42 	muls.d	r2,r3,r9
8000440a:	e0 69 ec 4f 	mov	r9,60495
8000440e:	ea 19 4e c4 	orh	r9,0x4ec4
80004412:	e4 0a 16 1f 	lsr	r10,r2,0x1f
80004416:	f6 09 04 48 	muls.d	r8,r11,r9
8000441a:	f5 e3 10 1a 	or	r10,r10,r3<<0x1
8000441e:	bf 5b       	asr	r11,0x1f
80004420:	a5 59       	asr	r9,0x5
80004422:	16 19       	sub	r9,r11
80004424:	14 09       	add	r9,r10
80004426:	99 09       	st.w	r12[0x0],r9
80004428:	30 2a       	mov	r10,2
8000442a:	fe fb 03 22 	ld.w	r11,pc[802]
        FOC_rampup_step = FOC_rampup_step_alignement_init;
        FOC_state = FOC_state_ramp_up;
      break;
    case FOC_state_ramp_up:
      if (FOC_start_motor()==1)
        FOC_state = FOC_state_regulation;
8000442e:	97 0a       	st.w	r11[0x0],r10
80004430:	fe 9f fd 5a 	bral	80003ee4 <FOC_state_machine+0x14>
80004434:	87 08       	st.w	r3[0x0],r8
80004436:	89 0b       	st.w	r4[0x0],r11
     Vq=0;
  }
  else if(Vd <-rayon_limitation)
    {
     Vd=-rayon_limitation;
     Vq=0;
80004438:	fe 9f fe 87 	bral	80004146 <FOC_state_machine+0x276>
     Vd=rayon_limitation;
     Vq=0;
  }
  else if(Vd <-rayon_limitation)
    {
     Vd=-rayon_limitation;
8000443c:	fe f3 03 28 	ld.w	r3,pc[808]
          FOC_rampup_step = FOC_rampup_step_openloop;
      }
      break;

    case FOC_rampup_step_openloop:
      FOC_rampup_step_openloop_counter++;
80004440:	66 08       	ld.w	r8,r3[0x0]
80004442:	2f f8       	sub	r8,-1
80004444:	fe f7 03 2c 	ld.w	r7,pc[812]
  FOC_Iq_reg.IP_REG_discharge = prev_Vq - Vq; 
}

static void FOC_update_teta_speed(void)
{
     hall_estimator_update_teta_and_speed(&(MC_BLDC_motor.Tetam), &(MC_BLDC_motor.Speedm));
80004448:	87 08       	st.w	r3[0x0],r8
8000444a:	ee cb ff e8 	sub	r11,r7,-24
8000444e:	ee cc ff de 	sub	r12,r7,-34
80004452:	fe b0 f6 35 	rcall	800030bc <hall_estimator_update_teta_and_speed>
80004456:	66 0c       	ld.w	r12,r3[0x0]
80004458:	e0 6b 60 b7 	mov	r11,24759
      break;

    case FOC_rampup_step_openloop:
      FOC_rampup_step_openloop_counter++;
      FOC_update_teta_speed();
      MC_BLDC_motor.Tetam=(unsigned short)(FOC_rampup_step_openloop_counter-360*(int)(FOC_rampup_step_openloop_counter/360));
8000445c:	ea 1b b6 0b 	orh	r11,0xb60b
80004460:	f8 0b 04 4a 	muls.d	r10,r12,r11
80004464:	e0 6a 01 68 	mov	r10,360
80004468:	66 05       	ld.w	r5,r3[0x0]
8000446a:	f8 06 14 1f 	asr	r6,r12,0x1f
8000446e:	16 0c       	add	r12,r11
80004470:	a9 4c       	asr	r12,0x8
80004472:	18 16       	sub	r6,r12
80004474:	b5 36       	mul	r6,r10
80004476:	fe fa 02 fe 	ld.w	r10,pc[766]
      park_inv(Vdref,Vqref,MC_BLDC_motor.Tetam,&(svpwm_options.Valpha),&(svpwm_options.Vbeta));
8000447a:	0a 06       	add	r6,r5
8000447c:	fe f4 02 fc 	ld.w	r4,pc[764]
80004480:	ef 56 00 22 	st.h	r7[34],r6
      break;

    case FOC_rampup_step_openloop:
      FOC_rampup_step_openloop_counter++;
      FOC_update_teta_speed();
      MC_BLDC_motor.Tetam=(unsigned short)(FOC_rampup_step_openloop_counter-360*(int)(FOC_rampup_step_openloop_counter/360));
80004484:	e8 c8 ff f8 	sub	r8,r4,-8
      park_inv(Vdref,Vqref,MC_BLDC_motor.Tetam,&(svpwm_options.Valpha),&(svpwm_options.Vbeta));
80004488:	74 0b       	ld.w	r11,r10[0x0]
8000448a:	e8 c9 ff fc 	sub	r9,r4,-4
8000448e:	ef 0a 00 22 	ld.sh	r10,r7[34]
80004492:	fe f6 02 ea 	ld.w	r6,pc[746]
80004496:	5c 7a       	castu.h	r10
80004498:	6c 0c       	ld.w	r12,r6[0x0]
8000449a:	fe b0 f7 6d 	rcall	80003374 <park_inv>
8000449e:	08 9c       	mov	r12,r4
800044a0:	fe b0 f7 d5 	rcall	8000344a <svpwm>

}

static void FOC_compute_svpwm(void)
{
     svpwm(&svpwm_options);
800044a4:	6e 18       	ld.w	r8,r7[0x4]
800044a6:	58 08       	cp.w	r8,0
}
static void FOC_update_duty(void)
{
  if ( MC_BLDC_motor.mc_motor_direction == MC_CW)
800044a8:	e0 80 01 00 	breq	800046a8 <FOC_state_machine+0x7d8>
800044ac:	68 88       	ld.w	r8,r4[0x20]
800044ae:	5c 78       	castu.h	r8
                            svpwm_options.duty4,
                            svpwm_options.duty5);
   }
   else
   {
      mc_update_duty_cycle( svpwm_options.duty2,
800044b0:	1a d8       	st.w	--sp,r8
800044b2:	68 78       	ld.w	r8,r4[0x1c]
800044b4:	68 49       	ld.w	r9,r4[0x10]
800044b6:	5c 78       	castu.h	r8
800044b8:	68 3a       	ld.w	r10,r4[0xc]
800044ba:	5c 79       	castu.h	r9
800044bc:	68 6b       	ld.w	r11,r4[0x18]
800044be:	5c 7a       	castu.h	r10
800044c0:	68 5c       	ld.w	r12,r4[0x14]
800044c2:	5c 7b       	castu.h	r11
800044c4:	5c 7c       	castu.h	r12
800044c6:	fe b0 fb 93 	rcall	80003bec <mc_update_duty_cycle>
800044ca:	2f fd       	sub	sp,-4
800044cc:	66 08       	ld.w	r8,r3[0x0]
800044ce:	e0 48 17 70 	cp.w	r8,6000
      FOC_update_teta_speed();
      MC_BLDC_motor.Tetam=(unsigned short)(FOC_rampup_step_openloop_counter-360*(int)(FOC_rampup_step_openloop_counter/360));
      park_inv(Vdref,Vqref,MC_BLDC_motor.Tetam,&(svpwm_options.Valpha),&(svpwm_options.Vbeta));
      FOC_compute_svpwm();
      FOC_update_duty();
      if (FOC_rampup_step_openloop_counter == 6000) {
800044d2:	fe 91 fd 09 	brne	80003ee4 <FOC_state_machine+0x14>
800044d6:	ef 0c 00 22 	ld.sh	r12,r7[34]
          hall_estimator_init_teta(MC_BLDC_motor.Tetam);
800044da:	5c 7c       	castu.h	r12
800044dc:	fe b0 f6 1e 	rcall	80003118 <hall_estimator_init_teta>
800044e0:	e0 69 13 88 	mov	r9,5000
          FOC_rampup_step_fieldreg_counter = 5000;
800044e4:	fe f8 02 84 	ld.w	r8,pc[644]
800044e8:	91 09       	st.w	r8[0x0],r9
800044ea:	fe fb 02 66 	ld.w	r11,pc[614]
          FOC_Id_reg.IP_REG_discharge = 0;
800044ee:	30 08       	mov	r8,0
800044f0:	97 58       	st.w	r11[0x14],r8
800044f2:	fe fa 02 62 	ld.w	r10,pc[610]
          FOC_Iq_reg.IP_REG_discharge = 0;          
800044f6:	95 58       	st.w	r10[0x14],r8
800044f8:	6e 59       	ld.w	r9,r7[0x14]
800044fa:	6e 48       	ld.w	r8,r7[0x10]
          FOC_Iq_reg.IP_REG_lasterror=MC_BLDC_motor.Iqref-MC_BLDC_motor.Iqm;
800044fc:	10 19       	sub	r9,r8
800044fe:	95 49       	st.w	r10[0x10],r9
80004500:	6e 28       	ld.w	r8,r7[0x8]
80004502:	5c 38       	neg	r8
          FOC_Id_reg.IP_REG_lasterror=-MC_BLDC_motor.Idm;
80004504:	97 48       	st.w	r11[0x10],r8
80004506:	30 39       	mov	r9,3
80004508:	83 09       	st.w	r1[0x0],r9
          FOC_rampup_step = FOC_rampup_step_fieldreg_loop;
8000450a:	fe 9f fc ed 	bral	80003ee4 <FOC_state_machine+0x14>
8000450e:	58 1a       	cp.w	r10,1
80004510:	fe 91 fc ea 	brne	80003ee4 <FOC_state_machine+0x14>
/*! \name Start Motor sequence
 */
//! @{
static unsigned char FOC_start_motor(void)
{
  switch(FOC_rampup_step)
80004514:	fe f8 02 4c 	ld.w	r8,pc[588]
        FOC_update_duty();
        FOC_rampup_step = FOC_rampup_step_alignement;
      break;

    case FOC_rampup_step_alignement:
      FOC_rampup_step_alignement_counter++;
80004518:	70 09       	ld.w	r9,r8[0x0]
8000451a:	2f f9       	sub	r9,-1
8000451c:	91 09       	st.w	r8[0x0],r9
8000451e:	70 0a       	ld.w	r10,r8[0x0]
80004520:	e0 4a 13 88 	cp.w	r10,5000
      if (FOC_rampup_step_alignement_counter == 5000) { 
80004524:	fe 91 fc e0 	brne	80003ee4 <FOC_state_machine+0x14>
80004528:	fe b0 f6 10 	rcall	80003148 <hall_estimator_init>
          hall_estimator_init();
8000452c:	30 28       	mov	r8,2
8000452e:	83 08       	st.w	r1[0x0],r8
          FOC_rampup_step = FOC_rampup_step_openloop;
80004530:	fe 9f fc da 	bral	80003ee4 <FOC_state_machine+0x14>
80004534:	fe fb 02 40 	ld.w	r11,pc[576]
      }
      break;

    case FOC_rampup_step_fieldreg_loop:
      FOC_rampup_step_fieldreg_counter++;
      Vqref=(int)((R*(long long int)MC_BLDC_motor.Iqref)>>31)+(187904750>>1);
80004538:	50 2b       	stdsp	sp[0x8],r11
8000453a:	fe f7 02 36 	ld.w	r7,pc[566]
8000453e:	fe f0 02 2a 	ld.w	r0,pc[554]
          FOC_rampup_step = FOC_rampup_step_fieldreg_loop;
      }
      break;

    case FOC_rampup_step_fieldreg_loop:
      FOC_rampup_step_fieldreg_counter++;
80004542:	e0 6b f5 c2 	mov	r11,62914
      Vqref=(int)((R*(long long int)MC_BLDC_motor.Iqref)>>31)+(187904750>>1);
80004546:	ea 1b 1c 28 	orh	r11,0x1c28
8000454a:	60 0a       	ld.w	r10,r0[0x0]
8000454c:	2f fa       	sub	r10,-1
          FOC_rampup_step = FOC_rampup_step_fieldreg_loop;
      }
      break;

    case FOC_rampup_step_fieldreg_loop:
      FOC_rampup_step_fieldreg_counter++;
8000454e:	81 0a       	st.w	r0[0x0],r10
80004550:	6e 59       	ld.w	r9,r7[0x14]
80004552:	f2 0b 04 48 	muls.d	r8,r9,r11
      Vqref=(int)((R*(long long int)MC_BLDC_motor.Iqref)>>31)+(187904750>>1);
80004556:	e0 6b 99 77 	mov	r11,39287
8000455a:	ea 1b 05 99 	orh	r11,0x599
8000455e:	f0 0a 16 1f 	lsr	r10,r8,0x1f
80004562:	f5 e9 10 1a 	or	r10,r10,r9<<0x1
80004566:	40 29       	lddsp	r9,sp[0x8]
80004568:	16 0a       	add	r10,r11
8000456a:	93 0a       	st.w	r9[0x0],r10
8000456c:	fe b0 fc 40 	rcall	80003dec <FOC_read_current>
      FOC_read_current();
80004570:	ee cb ff e8 	sub	r11,r7,-24
  FOC_Iq_reg.IP_REG_discharge = prev_Vq - Vq; 
}

static void FOC_update_teta_speed(void)
{
     hall_estimator_update_teta_and_speed(&(MC_BLDC_motor.Tetam), &(MC_BLDC_motor.Speedm));
80004574:	ee cc ff de 	sub	r12,r7,-34
80004578:	fe b0 f5 a2 	rcall	800030bc <hall_estimator_update_teta_and_speed>
8000457c:	fe fb 02 04 	ld.w	r11,pc[516]
}
static void FOC_compute_clarke(void)
{
     concordia(ia,ib,ic,&ialpha,&ibeta);
80004580:	fe fc 02 04 	ld.w	r12,pc[516]
80004584:	fe f5 02 04 	ld.w	r5,pc[516]
80004588:	fe f3 02 04 	ld.w	r3,pc[516]
8000458c:	0a 98       	mov	r8,r5
8000458e:	06 99       	mov	r9,r3
80004590:	76 0a       	ld.w	r10,r11[0x0]
80004592:	fe f6 01 fe 	ld.w	r6,pc[510]
80004596:	78 0b       	ld.w	r11,r12[0x0]
80004598:	6c 0c       	ld.w	r12,r6[0x0]
8000459a:	fe b0 f5 75 	rcall	80003084 <concordia>
8000459e:	4e de       	lddpc	lr,80004750 <FOC_state_machine+0x880>
800045a0:	6a 0b       	ld.w	r11,r5[0x0]
      FOC_read_current();
      FOC_update_teta_speed();
      FOC_compute_clarke();
      FOC_compute_park();
      // REgulate Id
      FOC_Id_reg.IP_REG_mes = MC_BLDC_motor.Idm;
800045a2:	66 0c       	ld.w	r12,r3[0x0]
{
     concordia(ia,ib,ic,&ialpha,&ibeta);
}
static void FOC_compute_park(void)
{
    park(ialpha,ibeta,MC_BLDC_motor.Tetam,&(MC_BLDC_motor.Idm),&(MC_BLDC_motor.Iqm));
800045a4:	ee c9 ff f8 	sub	r9,r7,-8
800045a8:	50 0e       	stdsp	sp[0x0],lr
800045aa:	ee c8 ff f0 	sub	r8,r7,-16
800045ae:	ef 0a 00 22 	ld.sh	r10,r7[34]
800045b2:	5c 7a       	castu.h	r10
800045b4:	fe b0 f6 94 	rcall	800032dc <park>
800045b8:	6e 28       	ld.w	r8,r7[0x8]
800045ba:	40 0c       	lddsp	r12,sp[0x0]
      FOC_read_current();
      FOC_update_teta_speed();
      FOC_compute_clarke();
      FOC_compute_park();
      // REgulate Id
      FOC_Id_reg.IP_REG_mes = MC_BLDC_motor.Idm;
800045bc:	99 18       	st.w	r12[0x4],r8
800045be:	4e 6b       	lddpc	r11,80004754 <FOC_state_machine+0x884>
800045c0:	50 1b       	stdsp	sp[0x4],r11
      FOC_Id_reg.IP_REG_ref = MC_BLDC_motor.Idref;
      IP_REG_compute(&FOC_Id_reg);
      Vdref = FOC_Id_reg.IP_REG_output;
      // REgulate Iq
      FOC_Iq_reg.IP_REG_mes = MC_BLDC_motor.Iqref;
800045c2:	6e 38       	ld.w	r8,r7[0xc]
800045c4:	99 28       	st.w	r12[0x8],r8
      FOC_update_teta_speed();
      FOC_compute_clarke();
      FOC_compute_park();
      // REgulate Id
      FOC_Id_reg.IP_REG_mes = MC_BLDC_motor.Idm;
      FOC_Id_reg.IP_REG_ref = MC_BLDC_motor.Idref;
800045c6:	40 0c       	lddsp	r12,sp[0x0]
800045c8:	fe b0 f7 22 	rcall	8000340c <IP_REG_compute>
      IP_REG_compute(&FOC_Id_reg);
800045cc:	40 0a       	lddsp	r10,sp[0x0]
800045ce:	74 39       	ld.w	r9,r10[0xc]
      Vdref = FOC_Id_reg.IP_REG_output;
800045d0:	6e 58       	ld.w	r8,r7[0x14]
800045d2:	40 1e       	lddsp	lr,sp[0x4]
      // REgulate Iq
      FOC_Iq_reg.IP_REG_mes = MC_BLDC_motor.Iqref;
800045d4:	9d 18       	st.w	lr[0x4],r8
800045d6:	6e 58       	ld.w	r8,r7[0x14]
800045d8:	4e 93       	lddpc	r3,8000477c <FOC_state_machine+0x8ac>
      FOC_Iq_reg.IP_REG_ref = MC_BLDC_motor.Iqref;
800045da:	9d 28       	st.w	lr[0x8],r8
      FOC_compute_park();
      // REgulate Id
      FOC_Id_reg.IP_REG_mes = MC_BLDC_motor.Idm;
      FOC_Id_reg.IP_REG_ref = MC_BLDC_motor.Idref;
      IP_REG_compute(&FOC_Id_reg);
      Vdref = FOC_Id_reg.IP_REG_output;
800045dc:	87 09       	st.w	r3[0x0],r9
      // REgulate Iq
      FOC_Iq_reg.IP_REG_mes = MC_BLDC_motor.Iqref;
      FOC_Iq_reg.IP_REG_ref = MC_BLDC_motor.Iqref;
800045de:	40 1c       	lddsp	r12,sp[0x4]
      FOC_compute_park();
      // REgulate Id
      FOC_Id_reg.IP_REG_mes = MC_BLDC_motor.Idm;
      FOC_Id_reg.IP_REG_ref = MC_BLDC_motor.Idref;
      IP_REG_compute(&FOC_Id_reg);
      Vdref = FOC_Id_reg.IP_REG_output;
800045e0:	fe b0 f7 16 	rcall	8000340c <IP_REG_compute>
      // REgulate Iq
      FOC_Iq_reg.IP_REG_mes = MC_BLDC_motor.Iqref;
      FOC_Iq_reg.IP_REG_ref = MC_BLDC_motor.Iqref;
      IP_REG_compute(&FOC_Iq_reg);
800045e4:	40 1c       	lddsp	r12,sp[0x4]
800045e6:	40 2e       	lddsp	lr,sp[0x8]
      Vq = FOC_Iq_reg.IP_REG_output;
800045e8:	78 35       	ld.w	r5,r12[0xc]
      park_inv(Vdref,Vqref,MC_BLDC_motor.Tetam,&(svpwm_options.Valpha),&(svpwm_options.Vbeta));
800045ea:	4e 44       	lddpc	r4,80004778 <FOC_state_machine+0x8a8>
      Vdref = FOC_Id_reg.IP_REG_output;
      // REgulate Iq
      FOC_Iq_reg.IP_REG_mes = MC_BLDC_motor.Iqref;
      FOC_Iq_reg.IP_REG_ref = MC_BLDC_motor.Iqref;
      IP_REG_compute(&FOC_Iq_reg);
      Vq = FOC_Iq_reg.IP_REG_output;
800045ec:	ef 0a 00 22 	ld.sh	r10,r7[34]
      park_inv(Vdref,Vqref,MC_BLDC_motor.Tetam,&(svpwm_options.Valpha),&(svpwm_options.Vbeta));
800045f0:	e8 c8 ff f8 	sub	r8,r4,-8
800045f4:	5c 7a       	castu.h	r10
800045f6:	e8 c9 ff fc 	sub	r9,r4,-4
800045fa:	7c 0b       	ld.w	r11,lr[0x0]
800045fc:	66 0c       	ld.w	r12,r3[0x0]
800045fe:	4e 86       	lddpc	r6,8000479c <FOC_state_machine+0x8cc>
80004600:	8d 05       	st.w	r6[0x0],r5
      Vdref = FOC_Id_reg.IP_REG_output;
      // REgulate Iq
      FOC_Iq_reg.IP_REG_mes = MC_BLDC_motor.Iqref;
      FOC_Iq_reg.IP_REG_ref = MC_BLDC_motor.Iqref;
      IP_REG_compute(&FOC_Iq_reg);
      Vq = FOC_Iq_reg.IP_REG_output;
80004602:	fe b0 f6 b9 	rcall	80003374 <park_inv>
      park_inv(Vdref,Vqref,MC_BLDC_motor.Tetam,&(svpwm_options.Valpha),&(svpwm_options.Vbeta));
80004606:	08 9c       	mov	r12,r4
80004608:	fe b0 f7 21 	rcall	8000344a <svpwm>

}

static void FOC_compute_svpwm(void)
{
     svpwm(&svpwm_options);
8000460c:	6e 18       	ld.w	r8,r7[0x4]
8000460e:	58 08       	cp.w	r8,0
}
static void FOC_update_duty(void)
{
  if ( MC_BLDC_motor.mc_motor_direction == MC_CW)
80004610:	c3 b0       	breq	80004686 <FOC_state_machine+0x7b6>
80004612:	68 88       	ld.w	r8,r4[0x20]
80004614:	5c 78       	castu.h	r8
                            svpwm_options.duty4,
                            svpwm_options.duty5);
   }
   else
   {
      mc_update_duty_cycle( svpwm_options.duty2,
80004616:	1a d8       	st.w	--sp,r8
80004618:	68 78       	ld.w	r8,r4[0x1c]
8000461a:	68 49       	ld.w	r9,r4[0x10]
8000461c:	5c 78       	castu.h	r8
8000461e:	68 3a       	ld.w	r10,r4[0xc]
80004620:	5c 79       	castu.h	r9
80004622:	68 6b       	ld.w	r11,r4[0x18]
80004624:	5c 7a       	castu.h	r10
80004626:	68 5c       	ld.w	r12,r4[0x14]
80004628:	5c 7b       	castu.h	r11
8000462a:	5c 7c       	castu.h	r12
8000462c:	fe b0 fa e0 	rcall	80003bec <mc_update_duty_cycle>
80004630:	2f fd       	sub	sp,-4
80004632:	60 08       	ld.w	r8,r0[0x0]
80004634:	e0 48 27 10 	cp.w	r8,10000
      IP_REG_compute(&FOC_Iq_reg);
      Vq = FOC_Iq_reg.IP_REG_output;
      park_inv(Vdref,Vqref,MC_BLDC_motor.Tetam,&(svpwm_options.Valpha),&(svpwm_options.Vbeta));
      FOC_compute_svpwm();
      FOC_update_duty();
      if (FOC_rampup_step_fieldreg_counter == 10000) {
80004638:	fe 91 fc 56 	brne	80003ee4 <FOC_state_machine+0x14>
8000463c:	e0 68 aa aa 	mov	r8,43690
          MC_BLDC_motor.Iqref = IQREF_REGULAR;
80004640:	ea 18 02 aa 	orh	r8,0x2aa
80004644:	8f 58       	st.w	r7[0x14],r8
80004646:	6e 59       	ld.w	r9,r7[0x14]
80004648:	40 1c       	lddsp	r12,sp[0x4]
          FOC_Iq_reg.IP_REG_lasterror = MC_BLDC_motor.Iqref-MC_BLDC_motor.Iqm;
8000464a:	6e 48       	ld.w	r8,r7[0x10]
8000464c:	10 19       	sub	r9,r8
8000464e:	99 49       	st.w	r12[0x10],r9
80004650:	6e 28       	ld.w	r8,r7[0x8]
80004652:	40 0b       	lddsp	r11,sp[0x0]
          FOC_Id_reg.IP_REG_lasterror = -MC_BLDC_motor.Idm;
80004654:	5c 38       	neg	r8
80004656:	97 48       	st.w	r11[0x10],r8
80004658:	40 2a       	lddsp	r10,sp[0x8]
8000465a:	74 09       	ld.w	r9,r10[0x0]
          FOC_Iq_reg.IP_REG_feedback = (Vqref>>4);
8000465c:	a5 49       	asr	r9,0x4
8000465e:	99 09       	st.w	r12[0x0],r9
80004660:	30 08       	mov	r8,0
80004662:	97 58       	st.w	r11[0x14],r8
          FOC_Id_reg.IP_REG_discharge = 0;
80004664:	99 58       	st.w	r12[0x14],r8
80004666:	4b d9       	lddpc	r9,80004758 <FOC_state_machine+0x888>
          FOC_Iq_reg.IP_REG_discharge = 0;
80004668:	93 58       	st.w	r9[0x14],r8
          FOC_Speed_reg.IP_REG_discharge = 0;
8000466a:	e0 6a be 62 	mov	r10,48738
          FOC_Iq_reg.Ki = (163040327>>5);
8000466e:	ea 1a 00 4d 	orh	r10,0x4d
80004672:	99 6a       	st.w	r12[0x18],r10
80004674:	97 6a       	st.w	r11[0x18],r10
80004676:	30 48       	mov	r8,4
          FOC_Id_reg.Ki = (163040327>>5);            
80004678:	83 08       	st.w	r1[0x0],r8
          FOC_rampup_step = FOC_rampup_step_torquereg_loop;
8000467a:	fe 9f fc 35 	bral	80003ee4 <FOC_state_machine+0x14>
8000467e:	87 08       	st.w	r3[0x0],r8
80004680:	89 0a       	st.w	r4[0x0],r10
  
  // if abs(Vd)>1/sqrt(8) (V.fixe) so Vd=1/sqrt(8)
  if (Vd >rayon_limitation)
  {
     Vd=rayon_limitation;
     Vq=0;
80004682:	fe 9f fe 7c 	bral	8000437a <FOC_state_machine+0x4aa>
  prev_Vq = Vq;
  
  // if abs(Vd)>1/sqrt(8) (V.fixe) so Vd=1/sqrt(8)
  if (Vd >rayon_limitation)
  {
     Vd=rayon_limitation;
80004686:	68 88       	ld.w	r8,r4[0x20]
80004688:	5c 78       	castu.h	r8
}
static void FOC_update_duty(void)
{
  if ( MC_BLDC_motor.mc_motor_direction == MC_CW)
  {
      mc_update_duty_cycle( svpwm_options.duty0,
8000468a:	1a d8       	st.w	--sp,r8
8000468c:	68 78       	ld.w	r8,r4[0x1c]
8000468e:	68 69       	ld.w	r9,r4[0x18]
80004690:	5c 78       	castu.h	r8
80004692:	68 5a       	ld.w	r10,r4[0x14]
80004694:	5c 79       	castu.h	r9
80004696:	68 4b       	ld.w	r11,r4[0x10]
80004698:	5c 7a       	castu.h	r10
8000469a:	68 3c       	ld.w	r12,r4[0xc]
8000469c:	5c 7b       	castu.h	r11
8000469e:	5c 7c       	castu.h	r12
800046a0:	fe b0 fa a6 	rcall	80003bec <mc_update_duty_cycle>
800046a4:	2f fd       	sub	sp,-4
800046a6:	cc 6b       	rjmp	80004632 <FOC_state_machine+0x762>
800046a8:	68 88       	ld.w	r8,r4[0x20]
800046aa:	5c 78       	castu.h	r8
800046ac:	1a d8       	st.w	--sp,r8
800046ae:	68 78       	ld.w	r8,r4[0x1c]
800046b0:	68 69       	ld.w	r9,r4[0x18]
800046b2:	5c 78       	castu.h	r8
800046b4:	68 5a       	ld.w	r10,r4[0x14]
800046b6:	5c 79       	castu.h	r9
800046b8:	68 4b       	ld.w	r11,r4[0x10]
800046ba:	5c 7a       	castu.h	r10
800046bc:	68 3c       	ld.w	r12,r4[0xc]
800046be:	5c 7b       	castu.h	r11
800046c0:	5c 7c       	castu.h	r12
800046c2:	fe b0 fa 95 	rcall	80003bec <mc_update_duty_cycle>
800046c6:	2f fd       	sub	sp,-4
800046c8:	c0 2b       	rjmp	800044cc <FOC_state_machine+0x5fc>
800046ca:	6e 88       	ld.w	r8,r7[0x20]
800046cc:	5c 78       	castu.h	r8
800046ce:	1a d8       	st.w	--sp,r8
800046d0:	6e 78       	ld.w	r8,r7[0x1c]
800046d2:	6e 69       	ld.w	r9,r7[0x18]
800046d4:	5c 78       	castu.h	r8
800046d6:	6e 5a       	ld.w	r10,r7[0x14]
800046d8:	5c 79       	castu.h	r9
800046da:	6e 4b       	ld.w	r11,r7[0x10]
800046dc:	5c 7a       	castu.h	r10
800046de:	6e 3c       	ld.w	r12,r7[0xc]
800046e0:	5c 7b       	castu.h	r11
800046e2:	5c 7c       	castu.h	r12
800046e4:	fe b0 fa 84 	rcall	80003bec <mc_update_duty_cycle>
800046e8:	2f fd       	sub	sp,-4
800046ea:	fe 9f fc 76 	bral	80003fd6 <FOC_state_machine+0x106>
800046ee:	6c 88       	ld.w	r8,r6[0x20]
800046f0:	5c 78       	castu.h	r8
800046f2:	1a d8       	st.w	--sp,r8
800046f4:	6c 78       	ld.w	r8,r6[0x1c]
800046f6:	6c 69       	ld.w	r9,r6[0x18]
800046f8:	5c 78       	castu.h	r8
800046fa:	6c 5a       	ld.w	r10,r6[0x14]
800046fc:	5c 79       	castu.h	r9
800046fe:	6c 4b       	ld.w	r11,r6[0x10]
80004700:	5c 7a       	castu.h	r10
80004702:	6c 3c       	ld.w	r12,r6[0xc]
80004704:	5c 7b       	castu.h	r11
80004706:	5c 7c       	castu.h	r12
80004708:	fe b0 fa 72 	rcall	80003bec <mc_update_duty_cycle>
8000470c:	2f fd       	sub	sp,-4
8000470e:	fe 9f fe 67 	bral	800043dc <FOC_state_machine+0x50c>
80004712:	e0 6c 14 7a 	mov	r12,5242
      Vq=sqrtt(test,erreur_max);
    }
    else //*Vq= -sqrt( 268435456- *Vd^2 ); 
    {
      test=rayon_carre_limitation- Vdcarre;
      Vq=-sqrtt(test,erreur_max);
80004716:	ea 1c 0f ae 	orh	r12,0xfae
8000471a:	e0 6b 01 2c 	mov	r11,300
8000471e:	1c 1c       	sub	r12,lr
80004720:	c9 4d       	rcall	80004a48 <sqrtt>
80004722:	5c 3c       	neg	r12
80004724:	87 0c       	st.w	r3[0x0],r12
80004726:	fe 9f fd 10 	bral	80004146 <FOC_state_machine+0x276>
8000472a:	87 08       	st.w	r3[0x0],r8
8000472c:	89 09       	st.w	r4[0x0],r9
8000472e:	fe 9f fe 26 	bral	8000437a <FOC_state_machine+0x4aa>
     Vd=rayon_limitation;
     Vq=0;
  }
  else if(Vd <-rayon_limitation)
    {
     Vd=-rayon_limitation;
80004732:	e0 6c 14 7a 	mov	r12,5242
80004736:	ea 1c 0f ae 	orh	r12,0xfae
      Vq=sqrtt(test,erreur_max);
    }
    else //*Vq= -sqrt( 268435456- *Vd^2 ); 
    {
      test=rayon_carre_limitation- Vdcarre;
      Vq=-sqrtt(test,erreur_max);
8000473a:	e0 6b 01 2c 	mov	r11,300
8000473e:	1c 1c       	sub	r12,lr
80004740:	c8 4d       	rcall	80004a48 <sqrtt>
80004742:	5c 3c       	neg	r12
80004744:	87 0c       	st.w	r3[0x0],r12
80004746:	fe 9f fe 1a 	bral	8000437a <FOC_state_machine+0x4aa>
8000474a:	d7 03       	nop
8000474c:	00 00       	add	r0,r0
8000474e:	11 f0       	ld.ub	r0,r8[0x7]
80004750:	00 00       	add	r0,r0
80004752:	12 5c       	eor	r12,r9
80004754:	00 00       	add	r0,r0
80004756:	12 3c       	cp.w	r12,r9
80004758:	00 00       	add	r0,r0
8000475a:	12 1c       	sub	r12,r9
8000475c:	00 00       	add	r0,r0
8000475e:	12 18       	sub	r8,r9
80004760:	00 00       	add	r0,r0
80004762:	05 84       	ld.ub	r4,r2[0x0]
80004764:	00 00       	add	r0,r0
80004766:	05 64       	ld.uh	r4,--r2
80004768:	00 00       	add	r0,r0
8000476a:	05 70       	ld.ub	r0,--r2
8000476c:	00 00       	add	r0,r0
8000476e:	05 78       	ld.ub	r8,--r2
80004770:	00 00       	add	r0,r0
80004772:	07 b0       	ld.ub	r0,r3[0x3]
80004774:	00 00       	add	r0,r0
80004776:	05 8c       	ld.ub	r12,r2[0x0]
80004778:	00 00       	add	r0,r0
8000477a:	11 f4       	ld.ub	r4,r8[0x7]
8000477c:	00 00       	add	r0,r0
8000477e:	05 80       	ld.ub	r0,r2[0x0]
80004780:	00 00       	add	r0,r0
80004782:	05 60       	ld.uh	r0,--r2
80004784:	00 00       	add	r0,r0
80004786:	05 5c       	ld.sh	r12,--r2
80004788:	00 00       	add	r0,r0
8000478a:	05 68       	ld.uh	r8,--r2
8000478c:	00 00       	add	r0,r0
8000478e:	05 88       	ld.ub	r8,r2[0x0]
80004790:	00 00       	add	r0,r0
80004792:	05 58       	ld.sh	r8,--r2
80004794:	00 00       	add	r0,r0
80004796:	05 6c       	ld.uh	r12,--r2
80004798:	00 00       	add	r0,r0
8000479a:	05 7c       	ld.ub	r12,--r2
8000479c:	00 00       	add	r0,r0
8000479e:	05 74       	ld.ub	r4,--r2

800047a0 <uart_usb_init>:
//_____ D E C L A R A T I O N S ____________________________________________


void uart_usb_init(void)
{
  dev_rx_cnt=0 ;
800047a0:	30 08       	mov	r8,0
800047a2:	48 39       	lddpc	r9,800047ac <uart_usb_init+0xc>
  dev_tx_cnt=0 ;
800047a4:	48 3a       	lddpc	r10,800047b0 <uart_usb_init+0x10>
//_____ D E C L A R A T I O N S ____________________________________________


void uart_usb_init(void)
{
  dev_rx_cnt=0 ;
800047a6:	b2 88       	st.b	r9[0x0],r8
  dev_tx_cnt=0 ;
800047a8:	b4 88       	st.b	r10[0x0],r8
}
800047aa:	5e fc       	retal	r12
800047ac:	00 00       	add	r0,r0
800047ae:	12 9b       	mov	r11,r9
800047b0:	00 00       	add	r0,r0
800047b2:	12 9a       	mov	r10,r9

800047b4 <uart_usb_test_hit>:
// Functions that manage characters input through USB
//

Bool uart_usb_test_hit(void)
{
  if( dev_rx_cnt==0 )
800047b4:	49 1a       	lddpc	r10,800047f8 <uart_usb_test_hit+0x44>
800047b6:	30 08       	mov	r8,0
800047b8:	15 89       	ld.ub	r9,r10[0x0]
800047ba:	f0 09 18 00 	cp.b	r9,r8
800047be:	c1 c1       	brne	800047f6 <uart_usb_test_hit+0x42>
  {
    if( Is_usb_out_received(RX_EP) )
800047c0:	fe 68 01 38 	mov	r8,-130760
800047c4:	70 0c       	ld.w	r12,r8[0x0]
800047c6:	e2 1c 00 02 	andl	r12,0x2,COH
800047ca:	5e 0c       	reteq	r12
    {
      dev_rx_cnt = Usb_byte_count(RX_EP);
800047cc:	70 08       	ld.w	r8,r8[0x0]
800047ce:	f9 d8 c2 88 	bfextu	r12,r8,0x14,0x8
800047d2:	b4 8c       	st.b	r10[0x0],r12
      Usb_reset_endpoint_fifo_access(RX_EP);
800047d4:	30 09       	mov	r9,0
800047d6:	ea 19 d0 02 	orh	r9,0xd002
800047da:	48 98       	lddpc	r8,800047fc <uart_usb_test_hit+0x48>
800047dc:	91 29       	st.w	r8[0x8],r9
      if( dev_rx_cnt==0 )
800047de:	58 0c       	cp.w	r12,0
800047e0:	c0 b1       	brne	800047f6 <uart_usb_test_hit+0x42>
      {
        Usb_ack_out_received_free(RX_EP);
800047e2:	30 29       	mov	r9,2
800047e4:	fe 68 01 68 	mov	r8,-130712
800047e8:	91 09       	st.w	r8[0x0],r9
800047ea:	e0 69 40 00 	mov	r9,16384
800047ee:	fe 68 02 28 	mov	r8,-130520
800047f2:	91 09       	st.w	r8[0x0],r9
800047f4:	5e fc       	retal	r12
        return FALSE;
800047f6:	5e ff       	retal	1
800047f8:	00 00       	add	r0,r0
800047fa:	12 9b       	mov	r11,r9
800047fc:	00 00       	add	r0,r0
800047fe:	06 6c       	and	r12,r3

80004800 <uart_usb_tx_ready>:
// Functions that manage characters output through USB
//

Bool uart_usb_tx_ready(void)
{
  if( !Is_usb_write_enabled(TX_EP) )
80004800:	fe 68 01 34 	mov	r8,-130764
80004804:	70 0c       	ld.w	r12,r8[0x0]
    return FALSE;

  return TRUE;
}
80004806:	f9 dc c2 01 	bfextu	r12,r12,0x10,0x1
8000480a:	5e fc       	retal	r12

8000480c <uart_usb_readmessage>:
}

#define RXBUF_SIZE        (5*6)
char rxbuf[RXBUF_SIZE];
void uart_usb_readmessage(frame_message *msg_rx_vref)
{
8000480c:	eb cd 40 60 	pushm	r5-r6,lr

  Usb_reset_endpoint_fifo_access(RX_EP);     
80004810:	49 28       	lddpc	r8,80004858 <uart_usb_readmessage+0x4c>
80004812:	30 09       	mov	r9,0
80004814:	ea 19 d0 02 	orh	r9,0xd002
}

#define RXBUF_SIZE        (5*6)
char rxbuf[RXBUF_SIZE];
void uart_usb_readmessage(frame_message *msg_rx_vref)
{
80004818:	18 95       	mov	r5,r12

  Usb_reset_endpoint_fifo_access(RX_EP);     
  usb_read_ep_rxpacket(RX_EP, &rxbuf, RXBUF_SIZE, NULL);
8000481a:	49 16       	lddpc	r6,8000485c <uart_usb_readmessage+0x50>
#define RXBUF_SIZE        (5*6)
char rxbuf[RXBUF_SIZE];
void uart_usb_readmessage(frame_message *msg_rx_vref)
{

  Usb_reset_endpoint_fifo_access(RX_EP);     
8000481c:	91 29       	st.w	r8[0x8],r9
  usb_read_ep_rxpacket(RX_EP, &rxbuf, RXBUF_SIZE, NULL);
8000481e:	31 ea       	mov	r10,30
80004820:	30 09       	mov	r9,0
80004822:	0c 9b       	mov	r11,r6
80004824:	30 2c       	mov	r12,2
80004826:	fe b0 ed 63 	rcall	800022ec <usb_read_ep_rxpacket>
  
  msg_rx_vref->data[0] = rxbuf[2];
8000482a:	0d a8       	ld.ub	r8,r6[0x2]
8000482c:	aa a8       	st.b	r5[0x2],r8
  msg_rx_vref->data[1] = rxbuf[3];
8000482e:	0d b9       	ld.ub	r9,r6[0x3]
80004830:	aa b9       	st.b	r5[0x3],r9
  msg_rx_vref->data[2] = rxbuf[4];
80004832:	0d c8       	ld.ub	r8,r6[0x4]
80004834:	aa c8       	st.b	r5[0x4],r8
  msg_rx_vref->data[3] = rxbuf[5];  
80004836:	0d d9       	ld.ub	r9,r6[0x5]
80004838:	aa d9       	st.b	r5[0x5],r9
  
  dev_rx_cnt = 0;  
  Usb_ack_out_received_free(RX_EP);
8000483a:	30 2a       	mov	r10,2
8000483c:	fe 68 01 68 	mov	r8,-130712
80004840:	91 0a       	st.w	r8[0x0],r10
  msg_rx_vref->data[0] = rxbuf[2];
  msg_rx_vref->data[1] = rxbuf[3];
  msg_rx_vref->data[2] = rxbuf[4];
  msg_rx_vref->data[3] = rxbuf[5];  
  
  dev_rx_cnt = 0;  
80004842:	30 09       	mov	r9,0
80004844:	48 78       	lddpc	r8,80004860 <uart_usb_readmessage+0x54>
80004846:	b0 89       	st.b	r8[0x0],r9
  Usb_ack_out_received_free(RX_EP);
80004848:	e0 6a 40 00 	mov	r10,16384
8000484c:	fe 68 02 28 	mov	r8,-130520
80004850:	91 0a       	st.w	r8[0x0],r10
}
80004852:	e3 cd 80 60 	ldm	sp++,r5-r6,pc
80004856:	d7 03       	nop
80004858:	00 00       	add	r0,r0
8000485a:	06 6c       	and	r12,r3
8000485c:	00 00       	add	r0,r0
8000485e:	12 7c       	tst	r12,r9
80004860:	00 00       	add	r0,r0
80004862:	12 9b       	mov	r11,r9

80004864 <uart_usb_sendmessage>:
                          frame_message *msgvref,
                          frame_message *msg_speedm,                          
                          frame_message *msg_speedest,
                          frame_message *msg_tetam,
                          frame_message *msg_tetaest)
{
80004864:	eb cd 40 6e 	pushm	r1-r3,r5-r6,lr

      Usb_reset_endpoint_fifo_access(TX_EP);    
80004868:	30 03       	mov	r3,0
8000486a:	ea 13 d0 01 	orh	r3,0xd001
8000486e:	4f 4e       	lddpc	lr,80004a3c <uart_usb_sendmessage+0x1d8>
80004870:	9d 13       	st.w	lr[0x4],r3
      txbuf[0] = msgidm->cmd;
80004872:	4f 46       	lddpc	r6,80004a40 <uart_usb_sendmessage+0x1dc>
80004874:	19 85       	ld.ub	r5,r12[0x0]
80004876:	ac 85       	st.b	r6[0x0],r5
      txbuf[1] = msgidm->dlc;
80004878:	19 9e       	ld.ub	lr,r12[0x1]
8000487a:	ac 9e       	st.b	r6[0x1],lr
      txbuf[2] = msgidm->data[0];
8000487c:	19 a5       	ld.ub	r5,r12[0x2]
8000487e:	ac a5       	st.b	r6[0x2],r5
      txbuf[3] = msgidm->data[1];
80004880:	19 be       	ld.ub	lr,r12[0x3]
80004882:	ac be       	st.b	r6[0x3],lr
      txbuf[4] = msgidm->data[2];
80004884:	19 c5       	ld.ub	r5,r12[0x4]
80004886:	ac c5       	st.b	r6[0x4],r5
      txbuf[5] = msgidm->data[3];  
80004888:	19 de       	ld.ub	lr,r12[0x5]
8000488a:	ac de       	st.b	r6[0x5],lr
      txbuf[6] = msgidref->cmd;
8000488c:	17 8c       	ld.ub	r12,r11[0x0]
8000488e:	ac ec       	st.b	r6[0x6],r12
      txbuf[7] = msgidref->dlc;
80004890:	17 9e       	ld.ub	lr,r11[0x1]
80004892:	ac fe       	st.b	r6[0x7],lr
      txbuf[8] = msgidref->data[0];
80004894:	17 ac       	ld.ub	r12,r11[0x2]
80004896:	ed 6c 00 08 	st.b	r6[8],r12
      txbuf[9] = msgidref->data[1];
8000489a:	17 be       	ld.ub	lr,r11[0x3]
8000489c:	ed 6e 00 09 	st.b	r6[9],lr
      txbuf[10] = msgidref->data[2];
800048a0:	17 cc       	ld.ub	r12,r11[0x4]
800048a2:	ed 6c 00 0a 	st.b	r6[10],r12
      txbuf[11] = msgidref->data[3]; 
800048a6:	17 de       	ld.ub	lr,r11[0x5]
800048a8:	ed 6e 00 0b 	st.b	r6[11],lr
      txbuf[12] = msgiqm->cmd;
800048ac:	15 8b       	ld.ub	r11,r10[0x0]
800048ae:	ed 6b 00 0c 	st.b	r6[12],r11
                          frame_message *msgvref,
                          frame_message *msg_speedm,                          
                          frame_message *msg_speedest,
                          frame_message *msg_tetam,
                          frame_message *msg_tetaest)
{
800048b2:	fa cb ff e8 	sub	r11,sp,-24
      txbuf[8] = msgidref->data[0];
      txbuf[9] = msgidref->data[1];
      txbuf[10] = msgidref->data[2];
      txbuf[11] = msgidref->data[3]; 
      txbuf[12] = msgiqm->cmd;
      txbuf[13] = msgiqm->dlc;
800048b6:	15 9c       	ld.ub	r12,r10[0x1]
                          frame_message *msgvref,
                          frame_message *msg_speedm,                          
                          frame_message *msg_speedest,
                          frame_message *msg_tetam,
                          frame_message *msg_tetaest)
{
800048b8:	76 0e       	ld.w	lr,r11[0x0]
800048ba:	76 15       	ld.w	r5,r11[0x4]
800048bc:	76 23       	ld.w	r3,r11[0x8]
800048be:	76 41       	ld.w	r1,r11[0x10]
800048c0:	76 32       	ld.w	r2,r11[0xc]
      txbuf[8] = msgidref->data[0];
      txbuf[9] = msgidref->data[1];
      txbuf[10] = msgidref->data[2];
      txbuf[11] = msgidref->data[3]; 
      txbuf[12] = msgiqm->cmd;
      txbuf[13] = msgiqm->dlc;
800048c2:	ed 6c 00 0d 	st.b	r6[13],r12
      txbuf[14] = msgiqm->data[0];
800048c6:	15 ab       	ld.ub	r11,r10[0x2]
800048c8:	ed 6b 00 0e 	st.b	r6[14],r11
      txbuf[15] = msgiqm->data[1];
800048cc:	15 bc       	ld.ub	r12,r10[0x3]
800048ce:	ed 6c 00 0f 	st.b	r6[15],r12
      txbuf[16] = msgiqm->data[2];
800048d2:	15 cb       	ld.ub	r11,r10[0x4]
800048d4:	ed 6b 00 10 	st.b	r6[16],r11
      txbuf[17] = msgiqm->data[3];   
800048d8:	15 dc       	ld.ub	r12,r10[0x5]
800048da:	ed 6c 00 11 	st.b	r6[17],r12
      txbuf[18] = msgiqref->cmd;
800048de:	13 8a       	ld.ub	r10,r9[0x0]
800048e0:	ed 6a 00 12 	st.b	r6[18],r10
      txbuf[19] = msgiqref->dlc;
800048e4:	13 9b       	ld.ub	r11,r9[0x1]
800048e6:	ed 6b 00 13 	st.b	r6[19],r11
      txbuf[20] = msgiqref->data[0];
800048ea:	13 aa       	ld.ub	r10,r9[0x2]
800048ec:	ed 6a 00 14 	st.b	r6[20],r10
      txbuf[21] = msgiqref->data[1];
800048f0:	13 bb       	ld.ub	r11,r9[0x3]
800048f2:	ed 6b 00 15 	st.b	r6[21],r11
      txbuf[22] = msgiqref->data[2];
800048f6:	13 ca       	ld.ub	r10,r9[0x4]
800048f8:	ed 6a 00 16 	st.b	r6[22],r10
      txbuf[23] = msgiqref->data[3];      
800048fc:	13 db       	ld.ub	r11,r9[0x5]
800048fe:	ed 6b 00 17 	st.b	r6[23],r11
      txbuf[24] = msgvm->cmd;
80004902:	11 89       	ld.ub	r9,r8[0x0]
80004904:	ed 69 00 18 	st.b	r6[24],r9
      txbuf[25] = msgvm->dlc;
80004908:	11 9a       	ld.ub	r10,r8[0x1]
8000490a:	ed 6a 00 19 	st.b	r6[25],r10
      txbuf[26] = msgvm->data[0];
8000490e:	11 a9       	ld.ub	r9,r8[0x2]
80004910:	ed 69 00 1a 	st.b	r6[26],r9
      txbuf[27] = msgvm->data[1];
80004914:	11 ba       	ld.ub	r10,r8[0x3]
80004916:	ed 6a 00 1b 	st.b	r6[27],r10
      txbuf[28] = msgvm->data[2];
8000491a:	11 c9       	ld.ub	r9,r8[0x4]
8000491c:	ed 69 00 1c 	st.b	r6[28],r9
      txbuf[29] = msgvm->data[3];     
80004920:	11 da       	ld.ub	r10,r8[0x5]
80004922:	ed 6a 00 1d 	st.b	r6[29],r10
      txbuf[30] = msgvref->cmd;
80004926:	1d 88       	ld.ub	r8,lr[0x0]
80004928:	ed 68 00 1e 	st.b	r6[30],r8
      txbuf[31] = msgvref->dlc;
8000492c:	1d 99       	ld.ub	r9,lr[0x1]
8000492e:	ed 69 00 1f 	st.b	r6[31],r9
      txbuf[32] = msgvref->data[0];
80004932:	1d a8       	ld.ub	r8,lr[0x2]
80004934:	ed 68 00 20 	st.b	r6[32],r8
      txbuf[33] = msgvref->data[1];
80004938:	1d b9       	ld.ub	r9,lr[0x3]
8000493a:	ed 69 00 21 	st.b	r6[33],r9
      txbuf[34] = msgvref->data[2];
8000493e:	1d c8       	ld.ub	r8,lr[0x4]
80004940:	ed 68 00 22 	st.b	r6[34],r8
      txbuf[35] = msgvref->data[3];    
80004944:	1d d9       	ld.ub	r9,lr[0x5]
80004946:	ed 69 00 23 	st.b	r6[35],r9
      txbuf[36] = msg_speedm->cmd;
8000494a:	0b 88       	ld.ub	r8,r5[0x0]
8000494c:	ed 68 00 24 	st.b	r6[36],r8
      txbuf[37] = msg_speedm->dlc;
80004950:	0b 99       	ld.ub	r9,r5[0x1]
80004952:	ed 69 00 25 	st.b	r6[37],r9
      txbuf[38] = msg_speedm->data[0];
80004956:	0b a8       	ld.ub	r8,r5[0x2]
80004958:	ed 68 00 26 	st.b	r6[38],r8
      txbuf[39] = msg_speedm->data[1];
8000495c:	0b b9       	ld.ub	r9,r5[0x3]
8000495e:	ed 69 00 27 	st.b	r6[39],r9
      txbuf[40] = msg_speedm->data[2];
80004962:	0b c8       	ld.ub	r8,r5[0x4]
80004964:	ed 68 00 28 	st.b	r6[40],r8
      txbuf[41] = msg_speedm->data[3];       
80004968:	0b d9       	ld.ub	r9,r5[0x5]
8000496a:	ed 69 00 29 	st.b	r6[41],r9
      txbuf[42] = msg_speedest->cmd;
8000496e:	07 88       	ld.ub	r8,r3[0x0]
80004970:	ed 68 00 2a 	st.b	r6[42],r8
      txbuf[43] = msg_speedest->dlc;
80004974:	07 99       	ld.ub	r9,r3[0x1]
80004976:	ed 69 00 2b 	st.b	r6[43],r9
      txbuf[44] = msg_speedest->data[0];
8000497a:	07 a8       	ld.ub	r8,r3[0x2]
8000497c:	ed 68 00 2c 	st.b	r6[44],r8
      txbuf[45] = msg_speedest->data[1];
80004980:	07 b9       	ld.ub	r9,r3[0x3]
80004982:	ed 69 00 2d 	st.b	r6[45],r9
      txbuf[46] = msg_speedest->data[2];
80004986:	07 c8       	ld.ub	r8,r3[0x4]
80004988:	ed 68 00 2e 	st.b	r6[46],r8
      txbuf[47] = msg_speedest->data[3];        
8000498c:	07 d8       	ld.ub	r8,r3[0x5]
8000498e:	ed 68 00 2f 	st.b	r6[47],r8
      txbuf[48] = msg_tetam->cmd;
80004992:	05 88       	ld.ub	r8,r2[0x0]
80004994:	ed 68 00 30 	st.b	r6[48],r8
      txbuf[49] = msg_tetam->dlc;
80004998:	05 99       	ld.ub	r9,r2[0x1]
8000499a:	ed 69 00 31 	st.b	r6[49],r9
      txbuf[50] = msg_tetam->data[0];
8000499e:	05 a8       	ld.ub	r8,r2[0x2]
800049a0:	ed 68 00 32 	st.b	r6[50],r8
      txbuf[51] = msg_tetam->data[1];
800049a4:	05 b8       	ld.ub	r8,r2[0x3]
800049a6:	ed 68 00 33 	st.b	r6[51],r8
      txbuf[52] = msg_tetam->data[2];
800049aa:	05 c8       	ld.ub	r8,r2[0x4]
800049ac:	ed 68 00 34 	st.b	r6[52],r8
      txbuf[53] = msg_tetam->data[3];  
800049b0:	05 de       	ld.ub	lr,r2[0x5]
800049b2:	ed 6e 00 35 	st.b	r6[53],lr
      txbuf[54] = msg_tetaest->cmd;
800049b6:	03 88       	ld.ub	r8,r1[0x0]
800049b8:	ed 68 00 36 	st.b	r6[54],r8
      txbuf[55] = msg_tetaest->dlc;
800049bc:	03 9e       	ld.ub	lr,r1[0x1]
800049be:	ed 6e 00 37 	st.b	r6[55],lr
      txbuf[56] = msg_tetaest->data[0];
800049c2:	03 a8       	ld.ub	r8,r1[0x2]
800049c4:	ed 68 00 38 	st.b	r6[56],r8
      txbuf[57] = msg_tetaest->data[1];
800049c8:	03 be       	ld.ub	lr,r1[0x3]
800049ca:	ed 6e 00 39 	st.b	r6[57],lr
      txbuf[58] = msg_tetaest->data[2];
800049ce:	03 c8       	ld.ub	r8,r1[0x4]
800049d0:	ed 68 00 3a 	st.b	r6[58],r8
      txbuf[59] = msg_tetaest->data[3];       
      dev_tx_cnt = TXBUF_SIZE-1;
800049d4:	33 b8       	mov	r8,59
      txbuf[54] = msg_tetaest->cmd;
      txbuf[55] = msg_tetaest->dlc;
      txbuf[56] = msg_tetaest->data[0];
      txbuf[57] = msg_tetaest->data[1];
      txbuf[58] = msg_tetaest->data[2];
      txbuf[59] = msg_tetaest->data[3];       
800049d6:	03 d5       	ld.ub	r5,r1[0x5]
      dev_tx_cnt = TXBUF_SIZE-1;
800049d8:	49 b3       	lddpc	r3,80004a44 <uart_usb_sendmessage+0x1e0>
      usb_write_ep_txpacket(TX_EP, &txbuf, TXBUF_SIZE, NULL);
800049da:	30 09       	mov	r9,0
      txbuf[55] = msg_tetaest->dlc;
      txbuf[56] = msg_tetaest->data[0];
      txbuf[57] = msg_tetaest->data[1];
      txbuf[58] = msg_tetaest->data[2];
      txbuf[59] = msg_tetaest->data[3];       
      dev_tx_cnt = TXBUF_SIZE-1;
800049dc:	a6 88       	st.b	r3[0x0],r8
      usb_write_ep_txpacket(TX_EP, &txbuf, TXBUF_SIZE, NULL);
800049de:	0c 9b       	mov	r11,r6
800049e0:	33 ca       	mov	r10,60
800049e2:	30 1c       	mov	r12,1
      txbuf[54] = msg_tetaest->cmd;
      txbuf[55] = msg_tetaest->dlc;
      txbuf[56] = msg_tetaest->data[0];
      txbuf[57] = msg_tetaest->data[1];
      txbuf[58] = msg_tetaest->data[2];
      txbuf[59] = msg_tetaest->data[3];       
800049e4:	ed 65 00 3b 	st.b	r6[59],r5
      dev_tx_cnt = TXBUF_SIZE-1;
      usb_write_ep_txpacket(TX_EP, &txbuf, TXBUF_SIZE, NULL);
800049e8:	fe b0 eb 84 	rcall	800020f0 <usb_write_ep_txpacket>


void uart_usb_flush (void)
{
  Bool zlp=FALSE;
  if( dev_tx_cnt!=0 )
800049ec:	07 89       	ld.ub	r9,r3[0x0]
800049ee:	30 08       	mov	r8,0
800049f0:	f0 09 18 00 	cp.b	r9,r8
800049f4:	c2 10       	breq	80004a36 <uart_usb_sendmessage+0x1d2>
  {
    if(!Is_usb_write_enabled(TX_EP))              // Endpoint full, need ZLP
800049f6:	fe 6a 01 34 	mov	r10,-130764
800049fa:	74 08       	ld.w	r8,r10[0x0]
800049fc:	ed b8 00 10 	bld	r8,0x10
80004a00:	c0 e0       	breq	80004a1c <uart_usb_sendmessage+0x1b8>
       zlp=TRUE;

    Usb_ack_in_ready_send(TX_EP);
80004a02:	30 19       	mov	r9,1
80004a04:	fe 68 01 64 	mov	r8,-130716
80004a08:	91 09       	st.w	r8[0x0],r9
80004a0a:	e0 69 40 00 	mov	r9,16384
80004a0e:	fe 68 02 24 	mov	r8,-130524
80004a12:	91 09       	st.w	r8[0x0],r9

    if( zlp==TRUE )
    {
       while( !Is_usb_write_enabled(TX_EP) );     // Wait Endpoint ready...
80004a14:	74 08       	ld.w	r8,r10[0x0]
80004a16:	ed b8 00 10 	bld	r8,0x10
80004a1a:	cf d1       	brne	80004a14 <uart_usb_sendmessage+0x1b0>
       Usb_ack_in_ready_send(TX_EP);              // ...and Send ZLP
80004a1c:	fe 68 01 64 	mov	r8,-130716
80004a20:	30 19       	mov	r9,1
80004a22:	91 09       	st.w	r8[0x0],r9
80004a24:	e0 6a 40 00 	mov	r10,16384
80004a28:	fe 68 02 24 	mov	r8,-130524
80004a2c:	91 0a       	st.w	r8[0x0],r10
    }
    dev_tx_cnt = 0;
80004a2e:	30 08       	mov	r8,0
80004a30:	a6 88       	st.b	r3[0x0],r8
80004a32:	e3 cd 80 6e 	ldm	sp++,r1-r3,r5-r6,pc
80004a36:	e3 cd 80 6e 	ldm	sp++,r1-r3,r5-r6,pc
80004a3a:	d7 03       	nop
80004a3c:	00 00       	add	r0,r0
80004a3e:	06 6c       	and	r12,r3
80004a40:	00 00       	add	r0,r0
80004a42:	12 9c       	mov	r12,r9
80004a44:	00 00       	add	r0,r0
80004a46:	12 9a       	mov	r10,r9

80004a48 <sqrtt>:

#include <avr32/io.h>
#include "compiler.h"

int sqrtt(int x,int err)
{
80004a48:	eb cd 40 e0 	pushm	r5-r7,lr
80004a4c:	16 95       	mov	r5,r11
  int xg=0; 
  int xd=(x>>1);
  long long int xcarre=x;
80004a4e:	18 96       	mov	r6,r12
80004a50:	f8 07 14 1f 	asr	r7,r12,0x1f
80004a54:	30 0b       	mov	r11,0
#include "compiler.h"

int sqrtt(int x,int err)
{
  int xg=0; 
  int xd=(x>>1);
80004a56:	f8 0e 14 01 	asr	lr,r12,0x1
  long long int xcarre=x;
80004a5a:	16 9c       	mov	r12,r11
80004a5c:	c1 58       	rjmp	80004a86 <sqrtt+0x3e>
  int xm=0;
  long long int xcal=0;
  // on prend l'erreur max=300
  while ((xd-xg)>err)
  {
    xm= ( xd>>1)+(xg>>1);
80004a5e:	f8 09 14 01 	asr	r9,r12,0x1
80004a62:	fc 08 14 01 	asr	r8,lr,0x1
80004a66:	f2 08 00 0b 	add	r11,r9,r8
    xcal= (long long int)xm*(long long int)xm;
      if (xcal>xcarre)
80004a6a:	f6 0b 06 48 	mulu.d	r8,r11,r11
  long long int xcal=0;
  // on prend l'erreur max=300
  while ((xd-xg)>err)
  {
    xm= ( xd>>1)+(xg>>1);
    xcal= (long long int)xm*(long long int)xm;
80004a6e:	f6 0a 14 1f 	asr	r10,r11,0x1f
      if (xcal>xcarre)
80004a72:	b7 3a       	mul	r10,r11
80004a74:	f2 0a 00 19 	add	r9,r9,r10<<0x1
80004a78:	10 36       	cp.w	r6,r8
80004a7a:	f2 07 13 00 	cpc	r7,r9
80004a7e:	f6 0e 17 50 	movlt	lr,r11
80004a82:	f6 0c 17 40 	movge	r12,r11
  int xd=(x>>1);
  long long int xcarre=x;
  int xm=0;
  long long int xcal=0;
  // on prend l'erreur max=300
  while ((xd-xg)>err)
80004a86:	fc 0c 01 08 	sub	r8,lr,r12
80004a8a:	0a 38       	cp.w	r8,r5
80004a8c:	fe 99 ff e9 	brgt	80004a5e <sqrtt+0x16>
80004a90:	f6 08 15 0f 	lsl	r8,r11,0xf
80004a94:	f6 0a 15 0b 	lsl	r10,r11,0xb
80004a98:	f6 0c 15 0e 	lsl	r12,r11,0xe
80004a9c:	f6 09 15 08 	lsl	r9,r11,0x8
80004aa0:	10 0c       	add	r12,r8
80004aa2:	f6 08 15 09 	lsl	r8,r11,0x9
80004aa6:	12 1c       	sub	r12,r9
80004aa8:	10 1c       	sub	r12,r8
        xg=xm;

  }
   // transforamtion vers la virgule fixe. xm=xm*2^15.5
   return ((xm<<15)-(xm<<11)+(xm<<14)-(xm<<9)-(xm<<8)); 
}
80004aaa:	14 1c       	sub	r12,r10
80004aac:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

80004ab0 <adc_configure>:
80004ab0:	58 0c       	cp.w	r12,0
80004ab2:	c0 a0       	breq	80004ac6 <adc_configure+0x16>
80004ab4:	78 18       	ld.w	r8,r12[0x4]
80004ab6:	ea 18 0f 00 	orh	r8,0xf00
80004aba:	99 18       	st.w	r12[0x4],r8
80004abc:	78 19       	ld.w	r9,r12[0x4]
80004abe:	ea 19 00 1f 	orh	r9,0x1f
80004ac2:	99 19       	st.w	r12[0x4],r9
80004ac4:	5e fc       	retal	r12
80004ac6:	c0 08       	rjmp	80004ac6 <adc_configure+0x16>

80004ac8 <adc_start>:
80004ac8:	58 0c       	cp.w	r12,0
80004aca:	c0 40       	breq	80004ad2 <adc_start+0xa>
80004acc:	30 28       	mov	r8,2
80004ace:	99 08       	st.w	r12[0x0],r8
80004ad0:	5e fc       	retal	r12
80004ad2:	c0 08       	rjmp	80004ad2 <adc_start+0xa>

80004ad4 <adc_enable>:
80004ad4:	58 0c       	cp.w	r12,0
80004ad6:	c0 c0       	breq	80004aee <adc_enable+0x1a>
80004ad8:	30 78       	mov	r8,7
80004ada:	f0 0b 19 00 	cp.h	r11,r8
80004ade:	e0 8b 00 07 	brhi	80004aec <adc_enable+0x18>
80004ae2:	30 18       	mov	r8,1
80004ae4:	f0 0b 09 48 	lsl	r8,r8,r11
80004ae8:	99 48       	st.w	r12[0x10],r8
80004aea:	5e fc       	retal	r12
80004aec:	c0 08       	rjmp	80004aec <adc_enable+0x18>
80004aee:	c0 08       	rjmp	80004aee <adc_enable+0x1a>

80004af0 <adc_get_value>:
80004af0:	58 0c       	cp.w	r12,0
80004af2:	c1 30       	breq	80004b18 <adc_get_value+0x28>
80004af4:	30 78       	mov	r8,7
80004af6:	f0 0b 19 00 	cp.h	r11,r8
80004afa:	e0 8b 00 0e 	brhi	80004b16 <adc_get_value+0x26>
80004afe:	30 18       	mov	r8,1
80004b00:	f0 0b 09 49 	lsl	r9,r8,r11
80004b04:	78 78       	ld.w	r8,r12[0x1c]
80004b06:	f3 e8 00 08 	and	r8,r9,r8
80004b0a:	cf d0       	breq	80004b04 <adc_get_value+0x14>
80004b0c:	f8 c8 ff d0 	sub	r8,r12,-48
80004b10:	f0 0b 03 2c 	ld.w	r12,r8[r11<<0x2]
80004b14:	5e fc       	retal	r12
80004b16:	c0 08       	rjmp	80004b16 <adc_get_value+0x26>
80004b18:	c0 08       	rjmp	80004b18 <adc_get_value+0x28>

80004b1a <adc_disable>:
80004b1a:	58 0c       	cp.w	r12,0
80004b1c:	c1 30       	breq	80004b42 <adc_disable+0x28>
80004b1e:	30 78       	mov	r8,7
80004b20:	f0 0b 19 00 	cp.h	r11,r8
80004b24:	e0 8b 00 0e 	brhi	80004b40 <adc_disable+0x26>
80004b28:	78 68       	ld.w	r8,r12[0x18]
80004b2a:	30 19       	mov	r9,1
80004b2c:	f2 0b 09 4b 	lsl	r11,r9,r11
80004b30:	f7 e8 00 08 	and	r8,r11,r8
80004b34:	5e 0c       	reteq	r12
80004b36:	78 58       	ld.w	r8,r12[0x14]
80004b38:	f7 e8 10 08 	or	r8,r11,r8
80004b3c:	99 58       	st.w	r12[0x14],r8
80004b3e:	5e fc       	retal	r12
80004b40:	c0 08       	rjmp	80004b40 <adc_disable+0x26>
80004b42:	c0 08       	rjmp	80004b42 <adc_disable+0x28>

80004b44 <gpio_enable_pin_pull_up>:
80004b44:	30 18       	mov	r8,1
80004b46:	f0 0c 09 48 	lsl	r8,r8,r12
80004b4a:	a5 9c       	lsr	r12,0x5
80004b4c:	a9 6c       	lsl	r12,0x8
80004b4e:	e0 2c f0 00 	sub	r12,61440
80004b52:	f9 48 00 74 	st.w	r12[116],r8
80004b56:	5e fc       	retal	r12

80004b58 <gpio_enable_pin_interrupt>:
80004b58:	30 19       	mov	r9,1
80004b5a:	f2 0c 09 48 	lsl	r8,r9,r12
80004b5e:	a5 9c       	lsr	r12,0x5
80004b60:	a9 6c       	lsl	r12,0x8
80004b62:	e0 2c f0 00 	sub	r12,61440
80004b66:	f9 48 00 c4 	st.w	r12[196],r8
80004b6a:	12 3b       	cp.w	r11,r9
80004b6c:	c0 c0       	breq	80004b84 <gpio_enable_pin_interrupt+0x2c>
80004b6e:	c0 82       	brcc	80004b7e <gpio_enable_pin_interrupt+0x26>
80004b70:	f9 48 00 a8 	st.w	r12[168],r8
80004b74:	f9 48 00 b8 	st.w	r12[184],r8
80004b78:	f9 48 00 94 	st.w	r12[148],r8
80004b7c:	5e fd       	retal	0
80004b7e:	58 2b       	cp.w	r11,2
80004b80:	c0 90       	breq	80004b92 <gpio_enable_pin_interrupt+0x3a>
80004b82:	5e f9       	retal	r9
80004b84:	f9 48 00 a4 	st.w	r12[164],r8
80004b88:	f9 48 00 b8 	st.w	r12[184],r8
80004b8c:	f9 48 00 94 	st.w	r12[148],r8
80004b90:	5e fd       	retal	0
80004b92:	f9 48 00 a8 	st.w	r12[168],r8
80004b96:	f9 48 00 b4 	st.w	r12[180],r8
80004b9a:	f9 48 00 94 	st.w	r12[148],r8
80004b9e:	5e fd       	retal	0

80004ba0 <gpio_disable_pin_interrupt>:
80004ba0:	30 18       	mov	r8,1
80004ba2:	f0 0c 09 48 	lsl	r8,r8,r12
80004ba6:	a5 9c       	lsr	r12,0x5
80004ba8:	a9 6c       	lsl	r12,0x8
80004baa:	e0 2c f0 00 	sub	r12,61440
80004bae:	f9 48 00 98 	st.w	r12[152],r8
80004bb2:	5e fc       	retal	r12

80004bb4 <gpio_get_pin_interrupt_flag>:
80004bb4:	f8 08 16 05 	lsr	r8,r12,0x5
80004bb8:	a9 68       	lsl	r8,0x8
80004bba:	e0 28 f0 00 	sub	r8,61440
80004bbe:	f0 f9 00 d0 	ld.w	r9,r8[208]
80004bc2:	f2 0c 0a 49 	lsr	r9,r9,r12
80004bc6:	f9 d9 c0 01 	bfextu	r12,r9,0x0,0x1
80004bca:	5e fc       	retal	r12

80004bcc <gpio_clear_pin_interrupt_flag>:
80004bcc:	30 18       	mov	r8,1
80004bce:	f0 0c 09 48 	lsl	r8,r8,r12
80004bd2:	a5 9c       	lsr	r12,0x5
80004bd4:	a9 6c       	lsl	r12,0x8
80004bd6:	e0 2c f0 00 	sub	r12,61440
80004bda:	f9 48 00 d8 	st.w	r12[216],r8
80004bde:	5e fc       	retal	r12

80004be0 <gpio_enable_module>:
80004be0:	eb cd 40 c0 	pushm	r6-r7,lr
80004be4:	16 97       	mov	r7,r11
80004be6:	58 0b       	cp.w	r11,0
80004be8:	c3 f0       	breq	80004c66 <gpio_enable_module+0x86>
80004bea:	30 06       	mov	r6,0
80004bec:	0c 9e       	mov	lr,r6
80004bee:	c0 d8       	rjmp	80004c08 <gpio_enable_module+0x28>
80004bf0:	30 18       	mov	r8,1
80004bf2:	f0 0b 09 48 	lsl	r8,r8,r11
80004bf6:	93 68       	st.w	r9[0x18],r8
80004bf8:	93 a8       	st.w	r9[0x28],r8
80004bfa:	93 28       	st.w	r9[0x8],r8
80004bfc:	2f fe       	sub	lr,-1
80004bfe:	30 08       	mov	r8,0
80004c00:	10 46       	or	r6,r8
80004c02:	0e 3e       	cp.w	lr,r7
80004c04:	c1 c0       	breq	80004c3c <gpio_enable_module+0x5c>
80004c06:	2f ec       	sub	r12,-2
80004c08:	19 8b       	ld.ub	r11,r12[0x0]
80004c0a:	f6 08 16 05 	lsr	r8,r11,0x5
80004c0e:	19 9a       	ld.ub	r10,r12[0x1]
80004c10:	f0 09 15 08 	lsl	r9,r8,0x8
80004c14:	30 18       	mov	r8,1
80004c16:	e0 29 f0 00 	sub	r9,61440
80004c1a:	f0 0a 18 00 	cp.b	r10,r8
80004c1e:	c1 20       	breq	80004c42 <gpio_enable_module+0x62>
80004c20:	ce 83       	brcs	80004bf0 <gpio_enable_module+0x10>
80004c22:	30 28       	mov	r8,2
80004c24:	f0 0a 18 00 	cp.b	r10,r8
80004c28:	c1 90       	breq	80004c5a <gpio_enable_module+0x7a>
80004c2a:	30 38       	mov	r8,3
80004c2c:	f0 0a 18 00 	cp.b	r10,r8
80004c30:	c0 f0       	breq	80004c4e <gpio_enable_module+0x6e>
80004c32:	30 18       	mov	r8,1
80004c34:	2f fe       	sub	lr,-1
80004c36:	10 46       	or	r6,r8
80004c38:	0e 3e       	cp.w	lr,r7
80004c3a:	ce 61       	brne	80004c06 <gpio_enable_module+0x26>
80004c3c:	0c 9c       	mov	r12,r6
80004c3e:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80004c42:	30 18       	mov	r8,1
80004c44:	f0 0b 09 48 	lsl	r8,r8,r11
80004c48:	93 58       	st.w	r9[0x14],r8
80004c4a:	93 a8       	st.w	r9[0x28],r8
80004c4c:	cd 7b       	rjmp	80004bfa <gpio_enable_module+0x1a>
80004c4e:	30 18       	mov	r8,1
80004c50:	f0 0b 09 48 	lsl	r8,r8,r11
80004c54:	93 58       	st.w	r9[0x14],r8
80004c56:	93 98       	st.w	r9[0x24],r8
80004c58:	cd 1b       	rjmp	80004bfa <gpio_enable_module+0x1a>
80004c5a:	30 18       	mov	r8,1
80004c5c:	f0 0b 09 48 	lsl	r8,r8,r11
80004c60:	93 68       	st.w	r9[0x18],r8
80004c62:	93 98       	st.w	r9[0x24],r8
80004c64:	cc bb       	rjmp	80004bfa <gpio_enable_module+0x1a>
80004c66:	16 96       	mov	r6,r11
80004c68:	0c 9c       	mov	r12,r6
80004c6a:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80004c6e:	d7 03       	nop

80004c70 <_int_handler_table>:
80004c70:	00 00 00 01 00 00 05 90 00 00 00 0b 00 00 05 94     ................
80004c80:	00 00 00 06 00 00 05 c0 00 00 00 07 00 00 05 d8     ................
80004c90:	00 00 00 01 00 00 05 f4 00 00 00 01 00 00 05 f8     ................
80004ca0:	00 00 00 01 00 00 05 fc 00 00 00 01 00 00 06 00     ................
80004cb0:	00 00 00 00 00 00 06 04 00 00 00 01 00 00 06 08     ................
80004cc0:	00 00 00 00 00 00 06 0c 00 00 00 01 00 00 06 10     ................
80004cd0:	00 00 00 01 00 00 06 14 00 00 00 01 00 00 06 18     ................
80004ce0:	00 00 00 03 00 00 06 1c 00 00 00 01 00 00 06 28     ...............(
80004cf0:	00 00 00 00 00 00 06 2c 00 00 00 01 00 00 06 30     .......,.......0

80004d00 <_unhandled_interrupt>:
80004d00:	c0 08       	rjmp	80004d00 <_unhandled_interrupt>
80004d02:	d7 03       	nop

80004d04 <INTC_init_interrupts>:
80004d04:	eb cd 40 80 	pushm	r7,lr
80004d08:	fe ce 00 98 	sub	lr,pc,152
80004d0c:	fe c8 9d d0 	sub	r8,pc,-25136
80004d10:	30 0a       	mov	r10,0
80004d12:	70 07       	ld.w	r7,r8[0x0]
80004d14:	7c 0c       	ld.w	r12,lr[0x0]
80004d16:	14 9b       	mov	r11,r10
80004d18:	18 3a       	cp.w	r10,r12
80004d1a:	c0 e3       	brcs	80004d36 <INTC_init_interrupts+0x32>
80004d1c:	fe 78 08 00 	mov	r8,-63488
80004d20:	f0 0b 09 27 	st.w	r8[r11<<0x2],r7
80004d24:	2f fb       	sub	r11,-1
80004d26:	59 1b       	cp.w	r11,17
80004d28:	e0 8b 00 11 	brhi	80004d4a <INTC_init_interrupts+0x46>
80004d2c:	fc 0b 03 3c 	ld.w	r12,lr[r11<<0x3]
80004d30:	30 0a       	mov	r10,0
80004d32:	18 3a       	cp.w	r10,r12
80004d34:	cf 42       	brcc	80004d1c <INTC_init_interrupts+0x18>
80004d36:	fc 0b 00 38 	add	r8,lr,r11<<0x3
80004d3a:	70 19       	ld.w	r9,r8[0x4]
80004d3c:	fe c8 00 3c 	sub	r8,pc,60
80004d40:	f2 0a 00 29 	add	r9,r9,r10<<0x2
80004d44:	2f fa       	sub	r10,-1
80004d46:	93 08       	st.w	r9[0x0],r8
80004d48:	ce 8b       	rjmp	80004d18 <INTC_init_interrupts+0x14>
80004d4a:	e3 cd 80 80 	ldm	sp++,r7,pc
80004d4e:	d7 03       	nop

80004d50 <INTC_register_interrupt>:
80004d50:	d4 01       	pushm	lr
80004d52:	fe c8 00 e2 	sub	r8,pc,226
80004d56:	fd db c0 05 	bfextu	lr,r11,0x0,0x5
80004d5a:	a5 9b       	lsr	r11,0x5
80004d5c:	f0 0b 00 38 	add	r8,r8,r11<<0x3
80004d60:	70 19       	ld.w	r9,r8[0x4]
80004d62:	f2 0e 00 2e 	add	lr,r9,lr<<0x2
80004d66:	9d 0c       	st.w	lr[0x0],r12
80004d68:	f5 da c0 02 	bfextu	r10,r10,0x0,0x2
80004d6c:	fe c8 9e 30 	sub	r8,pc,-25040
80004d70:	fe 79 08 00 	mov	r9,-63488
80004d74:	f0 0a 03 2c 	ld.w	r12,r8[r10<<0x2]
80004d78:	f2 0b 09 2c 	st.w	r9[r11<<0x2],r12
80004d7c:	d8 02       	popm	pc
80004d7e:	d7 03       	nop

80004d80 <_get_interrupt_handler>:
80004d80:	f8 0c 11 03 	rsub	r12,r12,3
80004d84:	a3 6c       	lsl	r12,0x2
80004d86:	e0 2c f8 00 	sub	r12,63488
80004d8a:	f8 fa 02 00 	ld.w	r10,r12[512]
80004d8e:	f4 08 15 02 	lsl	r8,r10,0x2
80004d92:	e0 28 f8 00 	sub	r8,63488
80004d96:	f0 fc 01 00 	ld.w	r12,r8[256]
80004d9a:	58 0c       	cp.w	r12,0
80004d9c:	5e 0c       	reteq	r12
80004d9e:	f8 08 12 00 	clz	r8,r12
80004da2:	fe c9 01 32 	sub	r9,pc,306
80004da6:	f0 08 11 1f 	rsub	r8,r8,31
80004daa:	f2 0a 00 39 	add	r9,r9,r10<<0x3
80004dae:	72 1a       	ld.w	r10,r9[0x4]
80004db0:	f4 08 03 2c 	ld.w	r12,r10[r8<<0x2]
80004db4:	5e fc       	retal	r12
80004db6:	d7 03       	nop

80004db8 <pm_cksel>:
80004db8:	eb cd 40 e0 	pushm	r5-r7,lr
80004dbc:	fa c5 ff f0 	sub	r5,sp,-16
80004dc0:	18 97       	mov	r7,r12
80004dc2:	6a 16       	ld.w	r6,r5[0x4]
80004dc4:	6a 0e       	ld.w	lr,r5[0x0]
80004dc6:	ed d6 c0 03 	bfextu	r6,r6,0x0,0x3
80004dca:	fd de c0 01 	bfextu	lr,lr,0x0,0x1
80004dce:	30 0c       	mov	r12,0
80004dd0:	f9 d6 d0 03 	bfins	r12,r6,0x0,0x3
80004dd4:	f9 de d0 e1 	bfins	r12,lr,0x7,0x1
80004dd8:	f9 d6 d1 03 	bfins	r12,r6,0x8,0x3
80004ddc:	f9 de d1 e1 	bfins	r12,lr,0xf,0x1
80004de0:	f9 da d2 03 	bfins	r12,r10,0x10,0x3
80004de4:	f9 db d2 e1 	bfins	r12,r11,0x17,0x1
80004de8:	f9 d8 d3 03 	bfins	r12,r8,0x18,0x3
80004dec:	f9 d9 d3 e1 	bfins	r12,r9,0x1f,0x1
80004df0:	8f 1c       	st.w	r7[0x4],r12
80004df2:	6f 58       	ld.w	r8,r7[0x54]
80004df4:	ed b8 00 05 	bld	r8,0x5
80004df8:	cf d1       	brne	80004df2 <pm_cksel+0x3a>
80004dfa:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

80004dfe <pm_gc_setup>:
80004dfe:	d4 01       	pushm	lr
80004e00:	f8 0b 00 2b 	add	r11,r12,r11<<0x2
80004e04:	40 1e       	lddsp	lr,sp[0x4]
80004e06:	30 0c       	mov	r12,0
80004e08:	f9 d9 d0 01 	bfins	r12,r9,0x0,0x1
80004e0c:	f9 da d0 21 	bfins	r12,r10,0x1,0x1
80004e10:	f9 d8 d0 81 	bfins	r12,r8,0x4,0x1
80004e14:	f9 de d1 08 	bfins	r12,lr,0x8,0x8
80004e18:	f7 4c 00 60 	st.w	r11[96],r12
80004e1c:	d8 02       	popm	pc

80004e1e <pm_gc_enable>:
80004e1e:	f8 0b 00 2b 	add	r11,r12,r11<<0x2
80004e22:	77 88       	ld.w	r8,r11[0x60]
80004e24:	a3 a8       	sbr	r8,0x2
80004e26:	f7 48 00 60 	st.w	r11[96],r8
80004e2a:	5e fc       	retal	r12

80004e2c <pm_pll_setup>:
80004e2c:	d4 01       	pushm	lr
80004e2e:	f8 0b 00 2b 	add	r11,r12,r11<<0x2
80004e32:	40 1e       	lddsp	lr,sp[0x4]
80004e34:	30 0c       	mov	r12,0
80004e36:	f9 d8 d0 21 	bfins	r12,r8,0x1,0x1
80004e3a:	f9 d9 d1 04 	bfins	r12,r9,0x8,0x4
80004e3e:	f9 da d2 04 	bfins	r12,r10,0x10,0x4
80004e42:	f9 de d3 06 	bfins	r12,lr,0x18,0x6
80004e46:	97 8c       	st.w	r11[0x20],r12
80004e48:	d8 02       	popm	pc

80004e4a <pm_pll_set_option>:
80004e4a:	f8 0b 00 2b 	add	r11,r12,r11<<0x2
80004e4e:	f5 e9 10 19 	or	r9,r10,r9<<0x1
80004e52:	f3 e8 10 29 	or	r9,r9,r8<<0x2
80004e56:	76 88       	ld.w	r8,r11[0x20]
80004e58:	f1 d9 d0 43 	bfins	r8,r9,0x2,0x3
80004e5c:	97 88       	st.w	r11[0x20],r8
80004e5e:	5e fc       	retal	r12

80004e60 <pm_pll_enable>:
80004e60:	f8 0b 00 2b 	add	r11,r12,r11<<0x2
80004e64:	76 88       	ld.w	r8,r11[0x20]
80004e66:	a1 a8       	sbr	r8,0x0
80004e68:	97 88       	st.w	r11[0x20],r8
80004e6a:	5e fc       	retal	r12

80004e6c <pm_wait_for_pll0_locked>:
80004e6c:	79 58       	ld.w	r8,r12[0x54]
80004e6e:	ed b8 00 00 	bld	r8,0x0
80004e72:	cf d1       	brne	80004e6c <pm_wait_for_pll0_locked>
80004e74:	5e fc       	retal	r12

80004e76 <pm_wait_for_pll1_locked>:
80004e76:	79 58       	ld.w	r8,r12[0x54]
80004e78:	ed b8 00 01 	bld	r8,0x1
80004e7c:	cf d1       	brne	80004e76 <pm_wait_for_pll1_locked>
80004e7e:	5e fc       	retal	r12

80004e80 <pm_switch_to_clock>:
80004e80:	78 08       	ld.w	r8,r12[0x0]
80004e82:	f1 db d0 02 	bfins	r8,r11,0x0,0x2
80004e86:	99 08       	st.w	r12[0x0],r8
80004e88:	5e fc       	retal	r12

80004e8a <pm_switch_to_osc0>:
80004e8a:	ec 5b bb 9f 	cp.w	r11,899999
80004e8e:	e0 8b 00 18 	brhi	80004ebe <pm_switch_to_osc0+0x34>
80004e92:	30 4b       	mov	r11,4
80004e94:	78 a8       	ld.w	r8,r12[0x28]
80004e96:	f1 db d0 03 	bfins	r8,r11,0x0,0x3
80004e9a:	99 a8       	st.w	r12[0x28],r8
80004e9c:	78 a9       	ld.w	r9,r12[0x28]
80004e9e:	f3 da d1 03 	bfins	r9,r10,0x8,0x3
80004ea2:	99 a9       	st.w	r12[0x28],r9
80004ea4:	78 08       	ld.w	r8,r12[0x0]
80004ea6:	a3 a8       	sbr	r8,0x2
80004ea8:	99 08       	st.w	r12[0x0],r8
80004eaa:	79 58       	ld.w	r8,r12[0x54]
80004eac:	ed b8 00 07 	bld	r8,0x7
80004eb0:	cf d1       	brne	80004eaa <pm_switch_to_osc0+0x20>
80004eb2:	78 08       	ld.w	r8,r12[0x0]
80004eb4:	30 19       	mov	r9,1
80004eb6:	f1 d9 d0 02 	bfins	r8,r9,0x0,0x2
80004eba:	99 08       	st.w	r12[0x0],r8
80004ebc:	5e fc       	retal	r12
80004ebe:	e0 69 c6 bf 	mov	r9,50879
80004ec2:	ea 19 00 2d 	orh	r9,0x2d
80004ec6:	12 3b       	cp.w	r11,r9
80004ec8:	e0 88 00 0d 	brls	80004ee2 <pm_switch_to_osc0+0x58>
80004ecc:	e0 69 11 ff 	mov	r9,4607
80004ed0:	ea 19 00 7a 	orh	r9,0x7a
80004ed4:	12 3b       	cp.w	r11,r9
80004ed6:	f9 b8 0b 07 	movhi	r8,7
80004eda:	f9 b8 08 06 	movls	r8,6
80004ede:	10 9b       	mov	r11,r8
80004ee0:	cd ab       	rjmp	80004e94 <pm_switch_to_osc0+0xa>
80004ee2:	30 58       	mov	r8,5
80004ee4:	10 9b       	mov	r11,r8
80004ee6:	cd 7b       	rjmp	80004e94 <pm_switch_to_osc0+0xa>

80004ee8 <pm_configure_usb_clock>:
80004ee8:	eb cd 40 40 	pushm	r6,lr
80004eec:	30 19       	mov	r9,1
80004eee:	30 08       	mov	r8,0
80004ef0:	12 9b       	mov	r11,r9
80004ef2:	30 7a       	mov	r10,7
80004ef4:	fe 7c 0c 00 	mov	r12,-62464
80004ef8:	31 06       	mov	r6,16
80004efa:	1a d6       	st.w	--sp,r6
80004efc:	c9 8f       	rcall	80004e2c <pm_pll_setup>
80004efe:	30 19       	mov	r9,1
80004f00:	30 08       	mov	r8,0
80004f02:	12 9a       	mov	r10,r9
80004f04:	12 9b       	mov	r11,r9
80004f06:	fe 7c 0c 00 	mov	r12,-62464
80004f0a:	ca 0f       	rcall	80004e4a <pm_pll_set_option>
80004f0c:	30 1b       	mov	r11,1
80004f0e:	fe 7c 0c 00 	mov	r12,-62464
80004f12:	ca 7f       	rcall	80004e60 <pm_pll_enable>
80004f14:	fe 7c 0c 00 	mov	r12,-62464
80004f18:	ca ff       	rcall	80004e76 <pm_wait_for_pll1_locked>
80004f1a:	30 19       	mov	r9,1
80004f1c:	30 08       	mov	r8,0
80004f1e:	12 9a       	mov	r10,r9
80004f20:	1a d8       	st.w	--sp,r8
80004f22:	30 3b       	mov	r11,3
80004f24:	fe 7c 0c 00 	mov	r12,-62464
80004f28:	c6 bf       	rcall	80004dfe <pm_gc_setup>
80004f2a:	30 3b       	mov	r11,3
80004f2c:	fe 7c 0c 00 	mov	r12,-62464
80004f30:	c7 7f       	rcall	80004e1e <pm_gc_enable>
80004f32:	2f ed       	sub	sp,-8
80004f34:	e3 cd 80 40 	ldm	sp++,r6,pc

80004f38 <set_cpu_hz>:
80004f38:	48 28       	lddpc	r8,80004f40 <set_cpu_hz+0x8>
80004f3a:	91 0c       	st.w	r8[0x0],r12
80004f3c:	5e fc       	retal	r12
80004f3e:	d7 03       	nop
80004f40:	00 00       	add	r0,r0
80004f42:	00 24       	rsub	r4,r0

80004f44 <unimplemented_syscall>:
80004f44:	5e fe       	retal	-1

80004f46 <isatty>:
80004f46:	5e fd       	retal	0

80004f48 <_fstat>:
80004f48:	5e fe       	retal	-1

80004f4a <_init_argv>:
80004f4a:	5e fc       	retal	r12

80004f4c <_close>:
80004f4c:	d4 01       	pushm	lr
80004f4e:	48 2c       	lddpc	r12,80004f54 <_close+0x8>
80004f50:	cf af       	rcall	80004f44 <unimplemented_syscall>
80004f52:	d8 02       	popm	pc
80004f54:	80 00       	ld.sh	r0,r0[0x0]
80004f56:	bc a0       	st.b	lr[0x2],r0

80004f58 <_lseek>:
80004f58:	d4 01       	pushm	lr
80004f5a:	48 2c       	lddpc	r12,80004f60 <_lseek+0x8>
80004f5c:	cf 4f       	rcall	80004f44 <unimplemented_syscall>
80004f5e:	d8 02       	popm	pc
80004f60:	80 00       	ld.sh	r0,r0[0x0]
80004f62:	bc a8       	st.b	lr[0x2],r8

80004f64 <_write>:
80004f64:	eb cd 40 e0 	pushm	r5-r7,lr
80004f68:	16 95       	mov	r5,r11
80004f6a:	14 96       	mov	r6,r10
80004f6c:	20 1c       	sub	r12,1
80004f6e:	58 2c       	cp.w	r12,2
80004f70:	e0 8b 00 0f 	brhi	80004f8e <_write+0x2a>
80004f74:	58 0a       	cp.w	r10,0
80004f76:	e0 8a 00 09 	brle	80004f88 <_write+0x24>
80004f7a:	30 07       	mov	r7,0
80004f7c:	ee 05 07 0c 	ld.ub	r12,r7[r5]
80004f80:	c5 ec       	rcall	8000503c <usart_putc>
80004f82:	2f f7       	sub	r7,-1
80004f84:	0c 37       	cp.w	r7,r6
80004f86:	cf b1       	brne	80004f7c <_write+0x18>
80004f88:	0c 9c       	mov	r12,r6
80004f8a:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
80004f8e:	48 4c       	lddpc	r12,80004f9c <_write+0x38>
80004f90:	cd af       	rcall	80004f44 <unimplemented_syscall>
80004f92:	18 96       	mov	r6,r12
80004f94:	0c 9c       	mov	r12,r6
80004f96:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
80004f9a:	d7 03       	nop
80004f9c:	80 00       	ld.sh	r0,r0[0x0]
80004f9e:	bc b0       	st.b	lr[0x3],r0

80004fa0 <_read>:
80004fa0:	eb cd 40 e0 	pushm	r5-r7,lr
80004fa4:	16 95       	mov	r5,r11
80004fa6:	14 96       	mov	r6,r10
80004fa8:	58 0c       	cp.w	r12,0
80004faa:	c0 e1       	brne	80004fc6 <_read+0x26>
80004fac:	58 0a       	cp.w	r10,0
80004fae:	e0 8a 00 09 	brle	80004fc0 <_read+0x20>
80004fb2:	18 97       	mov	r7,r12
80004fb4:	c5 2c       	rcall	80005058 <usart_getc>
80004fb6:	ee 05 0b 0c 	st.b	r7[r5],r12
80004fba:	2f f7       	sub	r7,-1
80004fbc:	0c 37       	cp.w	r7,r6
80004fbe:	cf b1       	brne	80004fb4 <_read+0x14>
80004fc0:	0c 9c       	mov	r12,r6
80004fc2:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
80004fc6:	48 4c       	lddpc	r12,80004fd4 <_read+0x34>
80004fc8:	cb ef       	rcall	80004f44 <unimplemented_syscall>
80004fca:	18 96       	mov	r6,r12
80004fcc:	0c 9c       	mov	r12,r6
80004fce:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
80004fd2:	d7 03       	nop
80004fd4:	80 00       	ld.sh	r0,r0[0x0]
80004fd6:	bc cc       	st.b	lr[0x4],r12

80004fd8 <_exit>:
80004fd8:	eb cd 40 40 	pushm	r6,lr
80004fdc:	1a dc       	st.w	--sp,r12
80004fde:	48 8c       	lddpc	r12,80004ffc <_exit+0x24>
80004fe0:	e0 a0 05 9a 	rcall	80005b14 <printf>
80004fe4:	48 76       	lddpc	r6,80005000 <_exit+0x28>
80004fe6:	6c 08       	ld.w	r8,r6[0x0]
80004fe8:	70 2c       	ld.w	r12,r8[0x8]
80004fea:	e0 a0 02 51 	rcall	8000548c <fflush>
80004fee:	6c 08       	ld.w	r8,r6[0x0]
80004ff0:	70 3c       	ld.w	r12,r8[0xc]
80004ff2:	e0 a0 02 4d 	rcall	8000548c <fflush>
80004ff6:	2f fd       	sub	sp,-4
80004ff8:	c0 08       	rjmp	80004ff8 <_exit+0x20>
80004ffa:	d7 03       	nop
80004ffc:	80 00       	ld.sh	r0,r0[0x0]
80004ffe:	bc e4       	st.b	lr[0x6],r4
80005000:	00 00       	add	r0,r0
80005002:	01 1c       	ld.sh	r12,r0++

80005004 <_sbrk>:
80005004:	d4 01       	pushm	lr
80005006:	48 ba       	lddpc	r10,80005030 <_sbrk+0x2c>
80005008:	18 99       	mov	r9,r12
8000500a:	74 08       	ld.w	r8,r10[0x0]
8000500c:	58 08       	cp.w	r8,0
8000500e:	c0 e0       	breq	8000502a <_sbrk+0x26>
80005010:	74 0c       	ld.w	r12,r10[0x0]
80005012:	48 98       	lddpc	r8,80005034 <_sbrk+0x30>
80005014:	f8 09 00 09 	add	r9,r12,r9
80005018:	10 39       	cp.w	r9,r8
8000501a:	e0 8b 00 04 	brhi	80005022 <_sbrk+0x1e>
8000501e:	95 09       	st.w	r10[0x0],r9
80005020:	d8 02       	popm	pc
80005022:	c9 7d       	rcall	80005350 <__errno>
80005024:	30 c8       	mov	r8,12
80005026:	99 08       	st.w	r12[0x0],r8
80005028:	dc 0a       	popm	pc,r12=-1
8000502a:	48 48       	lddpc	r8,80005038 <_sbrk+0x34>
8000502c:	95 08       	st.w	r10[0x0],r8
8000502e:	cf 1b       	rjmp	80005010 <_sbrk+0xc>
80005030:	00 00       	add	r0,r0
80005032:	06 34       	cp.w	r4,r3
80005034:	00 00       	add	r0,r0
80005036:	70 00       	ld.w	r0,r8[0x0]
80005038:	00 00       	add	r0,r0
8000503a:	12 e0       	st.h	--r9,r0

8000503c <usart_putc>:
8000503c:	48 68       	lddpc	r8,80005054 <usart_putc+0x18>
8000503e:	70 0a       	ld.w	r10,r8[0x0]
80005040:	f4 c9 ff ec 	sub	r9,r10,-20
80005044:	72 08       	ld.w	r8,r9[0x0]
80005046:	ed b8 00 01 	bld	r8,0x1
8000504a:	cf d1       	brne	80005044 <usart_putc+0x8>
8000504c:	f4 c8 ff e4 	sub	r8,r10,-28
80005050:	95 7c       	st.w	r10[0x1c],r12
80005052:	5e fc       	retal	r12
80005054:	00 00       	add	r0,r0
80005056:	00 28       	rsub	r8,r0

80005058 <usart_getc>:
80005058:	48 68       	lddpc	r8,80005070 <usart_getc+0x18>
8000505a:	70 0a       	ld.w	r10,r8[0x0]
8000505c:	f4 c9 ff ec 	sub	r9,r10,-20
80005060:	72 08       	ld.w	r8,r9[0x0]
80005062:	ed b8 00 00 	bld	r8,0x0
80005066:	cf d1       	brne	80005060 <usart_getc+0x8>
80005068:	f4 c8 ff e8 	sub	r8,r10,-24
8000506c:	74 6c       	ld.w	r12,r10[0x18]
8000506e:	5e fc       	retal	r12
80005070:	00 00       	add	r0,r0
80005072:	00 28       	rsub	r8,r0

80005074 <__avr32_udiv64>:
80005074:	eb cd 40 ef 	pushm	r0-r3,r5-r7,lr
80005078:	1a 97       	mov	r7,sp
8000507a:	14 91       	mov	r1,r10
8000507c:	10 93       	mov	r3,r8
8000507e:	16 96       	mov	r6,r11
80005080:	10 95       	mov	r5,r8
80005082:	12 9e       	mov	lr,r9
80005084:	14 92       	mov	r2,r10
80005086:	58 09       	cp.w	r9,0
80005088:	c4 a1       	brne	8000511c <__avr32_udiv64+0xa8>
8000508a:	16 38       	cp.w	r8,r11
8000508c:	e0 8b 00 ab 	brhi	800051e2 <__avr32_udiv64+0x16e>
80005090:	58 08       	cp.w	r8,0
80005092:	c0 51       	brne	8000509c <__avr32_udiv64+0x28>
80005094:	30 19       	mov	r9,1
80005096:	f2 08 0d 08 	divu	r8,r9,r8
8000509a:	10 95       	mov	r5,r8
8000509c:	ea 0e 12 00 	clz	lr,r5
800050a0:	c5 51       	brne	8000514a <__avr32_udiv64+0xd6>
800050a2:	ec 05 01 0c 	sub	r12,r6,r5
800050a6:	e7 d5 c0 10 	bfextu	r3,r5,0x0,0x10
800050aa:	ea 06 16 10 	lsr	r6,r5,0x10
800050ae:	30 11       	mov	r1,1
800050b0:	f8 06 0d 08 	divu	r8,r12,r6
800050b4:	e4 0a 16 10 	lsr	r10,r2,0x10
800050b8:	10 9b       	mov	r11,r8
800050ba:	f5 e9 11 0a 	or	r10,r10,r9<<0x10
800050be:	f0 03 02 4e 	mul	lr,r8,r3
800050c2:	14 3e       	cp.w	lr,r10
800050c4:	e0 88 00 0e 	brls	800050e0 <__avr32_udiv64+0x6c>
800050c8:	20 1b       	sub	r11,1
800050ca:	0a 0a       	add	r10,r5
800050cc:	14 35       	cp.w	r5,r10
800050ce:	e0 8b 00 09 	brhi	800050e0 <__avr32_udiv64+0x6c>
800050d2:	f6 c8 00 01 	sub	r8,r11,1
800050d6:	f4 05 00 09 	add	r9,r10,r5
800050da:	14 3e       	cp.w	lr,r10
800050dc:	e0 8b 01 2e 	brhi	80005338 <__avr32_udiv64+0x2c4>
800050e0:	f4 0e 01 09 	sub	r9,r10,lr
800050e4:	f5 d2 c0 10 	bfextu	r10,r2,0x0,0x10
800050e8:	f2 06 0d 08 	divu	r8,r9,r6
800050ec:	f5 e9 11 0a 	or	r10,r10,r9<<0x10
800050f0:	10 9c       	mov	r12,r8
800050f2:	f0 03 02 49 	mul	r9,r8,r3
800050f6:	14 39       	cp.w	r9,r10
800050f8:	e0 88 00 0c 	brls	80005110 <__avr32_udiv64+0x9c>
800050fc:	20 1c       	sub	r12,1
800050fe:	0a 0a       	add	r10,r5
80005100:	14 35       	cp.w	r5,r10
80005102:	e0 8b 00 07 	brhi	80005110 <__avr32_udiv64+0x9c>
80005106:	f8 c8 00 01 	sub	r8,r12,1
8000510a:	14 39       	cp.w	r9,r10
8000510c:	f0 0c 17 b0 	movhi	r12,r8
80005110:	f9 eb 11 0c 	or	r12,r12,r11<<0x10
80005114:	02 9b       	mov	r11,r1
80005116:	18 9a       	mov	r10,r12
80005118:	e3 cd 80 ef 	ldm	sp++,r0-r3,r5-r7,pc
8000511c:	16 39       	cp.w	r9,r11
8000511e:	e0 88 00 07 	brls	8000512c <__avr32_udiv64+0xb8>
80005122:	30 0b       	mov	r11,0
80005124:	16 9c       	mov	r12,r11
80005126:	18 9a       	mov	r10,r12
80005128:	e3 cd 80 ef 	ldm	sp++,r0-r3,r5-r7,pc
8000512c:	f2 05 12 00 	clz	r5,r9
80005130:	e0 81 00 a3 	brne	80005276 <__avr32_udiv64+0x202>
80005134:	16 39       	cp.w	r9,r11
80005136:	5f 38       	srlo	r8
80005138:	14 33       	cp.w	r3,r10
8000513a:	5f 89       	srls	r9
8000513c:	12 48       	or	r8,r9
8000513e:	ea 08 18 00 	cp.b	r8,r5
80005142:	cf 00       	breq	80005122 <__avr32_udiv64+0xae>
80005144:	0a 9b       	mov	r11,r5
80005146:	30 1c       	mov	r12,1
80005148:	ce fb       	rjmp	80005126 <__avr32_udiv64+0xb2>
8000514a:	fc 09 11 20 	rsub	r9,lr,32
8000514e:	e2 09 0a 4a 	lsr	r10,r1,r9
80005152:	ec 0e 09 4b 	lsl	r11,r6,lr
80005156:	f5 eb 10 0b 	or	r11,r10,r11
8000515a:	f6 0a 16 10 	lsr	r10,r11,0x10
8000515e:	ea 0e 09 45 	lsl	r5,r5,lr
80005162:	ec 09 0a 49 	lsr	r9,r6,r9
80005166:	e7 d5 c0 10 	bfextu	r3,r5,0x0,0x10
8000516a:	ea 06 16 10 	lsr	r6,r5,0x10
8000516e:	f2 06 0d 08 	divu	r8,r9,r6
80005172:	f5 e9 11 0c 	or	r12,r10,r9<<0x10
80005176:	10 90       	mov	r0,r8
80005178:	f0 03 02 4a 	mul	r10,r8,r3
8000517c:	18 3a       	cp.w	r10,r12
8000517e:	e0 88 00 10 	brls	8000519e <__avr32_udiv64+0x12a>
80005182:	20 10       	sub	r0,1
80005184:	0a 0c       	add	r12,r5
80005186:	18 35       	cp.w	r5,r12
80005188:	e0 8b 00 0b 	brhi	8000519e <__avr32_udiv64+0x12a>
8000518c:	e0 c8 00 01 	sub	r8,r0,1
80005190:	f8 05 00 09 	add	r9,r12,r5
80005194:	18 3a       	cp.w	r10,r12
80005196:	e0 88 00 04 	brls	8000519e <__avr32_udiv64+0x12a>
8000519a:	10 90       	mov	r0,r8
8000519c:	12 9c       	mov	r12,r9
8000519e:	f8 0a 01 09 	sub	r9,r12,r10
800051a2:	f5 db c0 10 	bfextu	r10,r11,0x0,0x10
800051a6:	f2 06 0d 08 	divu	r8,r9,r6
800051aa:	f5 e9 11 0c 	or	r12,r10,r9<<0x10
800051ae:	10 9b       	mov	r11,r8
800051b0:	f0 03 02 4a 	mul	r10,r8,r3
800051b4:	18 3a       	cp.w	r10,r12
800051b6:	e0 88 00 10 	brls	800051d6 <__avr32_udiv64+0x162>
800051ba:	20 1b       	sub	r11,1
800051bc:	0a 0c       	add	r12,r5
800051be:	18 35       	cp.w	r5,r12
800051c0:	e0 8b 00 0b 	brhi	800051d6 <__avr32_udiv64+0x162>
800051c4:	f6 c8 00 01 	sub	r8,r11,1
800051c8:	f8 05 00 09 	add	r9,r12,r5
800051cc:	18 3a       	cp.w	r10,r12
800051ce:	e0 88 00 04 	brls	800051d6 <__avr32_udiv64+0x162>
800051d2:	10 9b       	mov	r11,r8
800051d4:	12 9c       	mov	r12,r9
800051d6:	e2 0e 09 42 	lsl	r2,r1,lr
800051da:	14 1c       	sub	r12,r10
800051dc:	f7 e0 11 01 	or	r1,r11,r0<<0x10
800051e0:	c6 8b       	rjmp	800050b0 <__avr32_udiv64+0x3c>
800051e2:	f0 0a 12 00 	clz	r10,r8
800051e6:	c0 d0       	breq	80005200 <__avr32_udiv64+0x18c>
800051e8:	f6 0a 09 49 	lsl	r9,r11,r10
800051ec:	f0 0a 09 45 	lsl	r5,r8,r10
800051f0:	e2 0a 09 42 	lsl	r2,r1,r10
800051f4:	f4 08 11 20 	rsub	r8,r10,32
800051f8:	e2 08 0a 48 	lsr	r8,r1,r8
800051fc:	f1 e9 10 06 	or	r6,r8,r9
80005200:	ea 03 16 10 	lsr	r3,r5,0x10
80005204:	e4 08 16 10 	lsr	r8,r2,0x10
80005208:	ec 03 0d 0a 	divu	r10,r6,r3
8000520c:	ed d5 c0 10 	bfextu	r6,r5,0x0,0x10
80005210:	14 9e       	mov	lr,r10
80005212:	f1 eb 11 0c 	or	r12,r8,r11<<0x10
80005216:	ad 3a       	mul	r10,r6
80005218:	18 3a       	cp.w	r10,r12
8000521a:	e0 88 00 10 	brls	8000523a <__avr32_udiv64+0x1c6>
8000521e:	20 1e       	sub	lr,1
80005220:	0a 0c       	add	r12,r5
80005222:	18 35       	cp.w	r5,r12
80005224:	e0 8b 00 0b 	brhi	8000523a <__avr32_udiv64+0x1c6>
80005228:	fc c8 00 01 	sub	r8,lr,1
8000522c:	f8 05 00 09 	add	r9,r12,r5
80005230:	18 3a       	cp.w	r10,r12
80005232:	e0 88 00 04 	brls	8000523a <__avr32_udiv64+0x1c6>
80005236:	10 9e       	mov	lr,r8
80005238:	12 9c       	mov	r12,r9
8000523a:	f8 0a 01 09 	sub	r9,r12,r10
8000523e:	f5 d2 c0 10 	bfextu	r10,r2,0x0,0x10
80005242:	f2 03 0d 08 	divu	r8,r9,r3
80005246:	f5 e9 11 0a 	or	r10,r10,r9<<0x10
8000524a:	10 9c       	mov	r12,r8
8000524c:	f0 06 02 49 	mul	r9,r8,r6
80005250:	14 39       	cp.w	r9,r10
80005252:	e0 88 00 0c 	brls	8000526a <__avr32_udiv64+0x1f6>
80005256:	20 1c       	sub	r12,1
80005258:	0a 0a       	add	r10,r5
8000525a:	14 35       	cp.w	r5,r10
8000525c:	e0 8b 00 07 	brhi	8000526a <__avr32_udiv64+0x1f6>
80005260:	f8 c8 00 01 	sub	r8,r12,1
80005264:	14 39       	cp.w	r9,r10
80005266:	f0 0c 17 b0 	movhi	r12,r8
8000526a:	f9 ee 11 0c 	or	r12,r12,lr<<0x10
8000526e:	30 0b       	mov	r11,0
80005270:	18 9a       	mov	r10,r12
80005272:	e3 cd 80 ef 	ldm	sp++,r0-r3,r5-r7,pc
80005276:	f2 05 09 4e 	lsl	lr,r9,r5
8000527a:	ea 09 11 20 	rsub	r9,r5,32
8000527e:	f4 09 0a 4a 	lsr	r10,r10,r9
80005282:	f6 05 09 4c 	lsl	r12,r11,r5
80005286:	f0 09 0a 4b 	lsr	r11,r8,r9
8000528a:	f5 ec 10 02 	or	r2,r10,r12
8000528e:	e4 0a 16 10 	lsr	r10,r2,0x10
80005292:	f7 ee 10 0e 	or	lr,r11,lr
80005296:	ec 09 0a 49 	lsr	r9,r6,r9
8000529a:	f0 05 09 40 	lsl	r0,r8,r5
8000529e:	fc 06 16 10 	lsr	r6,lr,0x10
800052a2:	e7 de c0 10 	bfextu	r3,lr,0x0,0x10
800052a6:	f2 06 0d 08 	divu	r8,r9,r6
800052aa:	f5 e9 11 0c 	or	r12,r10,r9<<0x10
800052ae:	10 9b       	mov	r11,r8
800052b0:	f0 03 02 4a 	mul	r10,r8,r3
800052b4:	18 3a       	cp.w	r10,r12
800052b6:	e0 88 00 10 	brls	800052d6 <__avr32_udiv64+0x262>
800052ba:	20 1b       	sub	r11,1
800052bc:	1c 0c       	add	r12,lr
800052be:	18 3e       	cp.w	lr,r12
800052c0:	e0 8b 00 0b 	brhi	800052d6 <__avr32_udiv64+0x262>
800052c4:	f6 c8 00 01 	sub	r8,r11,1
800052c8:	f8 0e 00 09 	add	r9,r12,lr
800052cc:	18 3a       	cp.w	r10,r12
800052ce:	e0 88 00 04 	brls	800052d6 <__avr32_udiv64+0x262>
800052d2:	10 9b       	mov	r11,r8
800052d4:	12 9c       	mov	r12,r9
800052d6:	f8 0a 01 09 	sub	r9,r12,r10
800052da:	f5 d2 c0 10 	bfextu	r10,r2,0x0,0x10
800052de:	f2 06 0d 08 	divu	r8,r9,r6
800052e2:	f5 e9 11 0a 	or	r10,r10,r9<<0x10
800052e6:	10 9c       	mov	r12,r8
800052e8:	f0 03 02 46 	mul	r6,r8,r3
800052ec:	14 36       	cp.w	r6,r10
800052ee:	e0 88 00 10 	brls	8000530e <__avr32_udiv64+0x29a>
800052f2:	20 1c       	sub	r12,1
800052f4:	1c 0a       	add	r10,lr
800052f6:	14 3e       	cp.w	lr,r10
800052f8:	e0 8b 00 0b 	brhi	8000530e <__avr32_udiv64+0x29a>
800052fc:	f4 0e 00 08 	add	r8,r10,lr
80005300:	f8 c9 00 01 	sub	r9,r12,1
80005304:	14 36       	cp.w	r6,r10
80005306:	e0 88 00 04 	brls	8000530e <__avr32_udiv64+0x29a>
8000530a:	12 9c       	mov	r12,r9
8000530c:	10 9a       	mov	r10,r8
8000530e:	f9 eb 11 0c 	or	r12,r12,r11<<0x10
80005312:	0c 1a       	sub	r10,r6
80005314:	f8 00 06 48 	mulu.d	r8,r12,r0
80005318:	10 9b       	mov	r11,r8
8000531a:	12 3a       	cp.w	r10,r9
8000531c:	c0 42       	brcc	80005324 <__avr32_udiv64+0x2b0>
8000531e:	20 1c       	sub	r12,1
80005320:	30 0b       	mov	r11,0
80005322:	c0 2b       	rjmp	80005126 <__avr32_udiv64+0xb2>
80005324:	12 3a       	cp.w	r10,r9
80005326:	5f 08       	sreq	r8
80005328:	e2 05 09 49 	lsl	r9,r1,r5
8000532c:	16 39       	cp.w	r9,r11
8000532e:	5f 3a       	srlo	r10
80005330:	14 68       	and	r8,r10
80005332:	cf 70       	breq	80005320 <__avr32_udiv64+0x2ac>
80005334:	20 1c       	sub	r12,1
80005336:	cf 5b       	rjmp	80005320 <__avr32_udiv64+0x2ac>
80005338:	10 9b       	mov	r11,r8
8000533a:	12 9a       	mov	r10,r9
8000533c:	cd 2a       	rjmp	800050e0 <__avr32_udiv64+0x6c>
8000533e:	d7 03       	nop

80005340 <atexit>:
80005340:	d4 01       	pushm	lr
80005342:	30 09       	mov	r9,0
80005344:	18 9b       	mov	r11,r12
80005346:	12 9a       	mov	r10,r9
80005348:	12 9c       	mov	r12,r9
8000534a:	e0 a0 16 7d 	rcall	80008044 <__register_exitproc>
8000534e:	d8 02       	popm	pc

80005350 <__errno>:
80005350:	48 28       	lddpc	r8,80005358 <__errno+0x8>
80005352:	70 0c       	ld.w	r12,r8[0x0]
80005354:	2f 4c       	sub	r12,-12
80005356:	5e fc       	retal	r12
80005358:	00 00       	add	r0,r0
8000535a:	01 1c       	ld.sh	r12,r0++

8000535c <exit>:
8000535c:	d4 21       	pushm	r4-r7,lr
8000535e:	30 0b       	mov	r11,0
80005360:	18 97       	mov	r7,r12
80005362:	e0 a0 16 c3 	rcall	800080e8 <__call_exitprocs>
80005366:	48 58       	lddpc	r8,80005378 <exit+0x1c>
80005368:	70 0c       	ld.w	r12,r8[0x0]
8000536a:	78 a9       	ld.w	r9,r12[0x28]
8000536c:	58 09       	cp.w	r9,0
8000536e:	c0 20       	breq	80005372 <exit+0x16>
80005370:	5d 19       	icall	r9
80005372:	0e 9c       	mov	r12,r7
80005374:	c3 2e       	rcall	80004fd8 <_exit>
80005376:	d7 03       	nop
80005378:	80 00       	ld.sh	r0,r0[0x0]
8000537a:	bd 4c       	asr	r12,0x1c

8000537c <_fflush_r>:
8000537c:	d4 21       	pushm	r4-r7,lr
8000537e:	16 97       	mov	r7,r11
80005380:	18 94       	mov	r4,r12
80005382:	76 48       	ld.w	r8,r11[0x10]
80005384:	58 08       	cp.w	r8,0
80005386:	c7 c0       	breq	8000547e <_fflush_r+0x102>
80005388:	58 0c       	cp.w	r12,0
8000538a:	c0 50       	breq	80005394 <_fflush_r+0x18>
8000538c:	78 68       	ld.w	r8,r12[0x18]
8000538e:	58 08       	cp.w	r8,0
80005390:	c0 21       	brne	80005394 <_fflush_r+0x18>
80005392:	ce 3c       	rcall	80005558 <__sinit>
80005394:	4b b8       	lddpc	r8,80005480 <_fflush_r+0x104>
80005396:	10 37       	cp.w	r7,r8
80005398:	c0 31       	brne	8000539e <_fflush_r+0x22>
8000539a:	68 07       	ld.w	r7,r4[0x0]
8000539c:	c0 a8       	rjmp	800053b0 <_fflush_r+0x34>
8000539e:	4b a8       	lddpc	r8,80005484 <_fflush_r+0x108>
800053a0:	10 37       	cp.w	r7,r8
800053a2:	c0 31       	brne	800053a8 <_fflush_r+0x2c>
800053a4:	68 17       	ld.w	r7,r4[0x4]
800053a6:	c0 58       	rjmp	800053b0 <_fflush_r+0x34>
800053a8:	4b 88       	lddpc	r8,80005488 <_fflush_r+0x10c>
800053aa:	10 37       	cp.w	r7,r8
800053ac:	c0 21       	brne	800053b0 <_fflush_r+0x34>
800053ae:	68 27       	ld.w	r7,r4[0x8]
800053b0:	8e 6a       	ld.sh	r10,r7[0xc]
800053b2:	ed ba 00 03 	bld	r10,0x3
800053b6:	c4 20       	breq	8000543a <_fflush_r+0xbe>
800053b8:	ab ba       	sbr	r10,0xb
800053ba:	ae 6a       	st.h	r7[0xc],r10
800053bc:	6e 18       	ld.w	r8,r7[0x4]
800053be:	58 08       	cp.w	r8,0
800053c0:	e0 89 00 06 	brgt	800053cc <_fflush_r+0x50>
800053c4:	6f 08       	ld.w	r8,r7[0x40]
800053c6:	58 08       	cp.w	r8,0
800053c8:	e0 8a 00 5b 	brle	8000547e <_fflush_r+0x102>
800053cc:	6e b8       	ld.w	r8,r7[0x2c]
800053ce:	58 08       	cp.w	r8,0
800053d0:	c5 70       	breq	8000547e <_fflush_r+0x102>
800053d2:	e2 1a 10 00 	andl	r10,0x1000,COH
800053d6:	c0 30       	breq	800053dc <_fflush_r+0x60>
800053d8:	6f 56       	ld.w	r6,r7[0x54]
800053da:	c0 f8       	rjmp	800053f8 <_fflush_r+0x7c>
800053dc:	30 19       	mov	r9,1
800053de:	6e 8b       	ld.w	r11,r7[0x20]
800053e0:	08 9c       	mov	r12,r4
800053e2:	5d 18       	icall	r8
800053e4:	18 96       	mov	r6,r12
800053e6:	5b fc       	cp.w	r12,-1
800053e8:	c0 81       	brne	800053f8 <_fflush_r+0x7c>
800053ea:	68 38       	ld.w	r8,r4[0xc]
800053ec:	59 d8       	cp.w	r8,29
800053ee:	c4 80       	breq	8000547e <_fflush_r+0x102>
800053f0:	8e 68       	ld.sh	r8,r7[0xc]
800053f2:	a7 a8       	sbr	r8,0x6
800053f4:	ae 68       	st.h	r7[0xc],r8
800053f6:	d8 22       	popm	r4-r7,pc
800053f8:	8e 68       	ld.sh	r8,r7[0xc]
800053fa:	ed b8 00 02 	bld	r8,0x2
800053fe:	c0 81       	brne	8000540e <_fflush_r+0x92>
80005400:	6e 18       	ld.w	r8,r7[0x4]
80005402:	10 16       	sub	r6,r8
80005404:	6e d8       	ld.w	r8,r7[0x34]
80005406:	58 08       	cp.w	r8,0
80005408:	c0 30       	breq	8000540e <_fflush_r+0x92>
8000540a:	6f 08       	ld.w	r8,r7[0x40]
8000540c:	10 16       	sub	r6,r8
8000540e:	6e b8       	ld.w	r8,r7[0x2c]
80005410:	08 9c       	mov	r12,r4
80005412:	30 09       	mov	r9,0
80005414:	0c 9a       	mov	r10,r6
80005416:	6e 8b       	ld.w	r11,r7[0x20]
80005418:	5d 18       	icall	r8
8000541a:	8e 68       	ld.sh	r8,r7[0xc]
8000541c:	0c 3c       	cp.w	r12,r6
8000541e:	c2 81       	brne	8000546e <_fflush_r+0xf2>
80005420:	ab d8       	cbr	r8,0xb
80005422:	30 0c       	mov	r12,0
80005424:	ae 68       	st.h	r7[0xc],r8
80005426:	8f 1c       	st.w	r7[0x4],r12
80005428:	6e 48       	ld.w	r8,r7[0x10]
8000542a:	8f 08       	st.w	r7[0x0],r8
8000542c:	8e 68       	ld.sh	r8,r7[0xc]
8000542e:	ed b8 00 0c 	bld	r8,0xc
80005432:	c2 61       	brne	8000547e <_fflush_r+0x102>
80005434:	ef 46 00 54 	st.w	r7[84],r6
80005438:	d8 22       	popm	r4-r7,pc
8000543a:	6e 45       	ld.w	r5,r7[0x10]
8000543c:	58 05       	cp.w	r5,0
8000543e:	c2 00       	breq	8000547e <_fflush_r+0x102>
80005440:	6e 09       	ld.w	r9,r7[0x0]
80005442:	8f 05       	st.w	r7[0x0],r5
80005444:	f1 da c0 02 	bfextu	r8,r10,0x0,0x2
80005448:	c0 30       	breq	8000544e <_fflush_r+0xd2>
8000544a:	30 08       	mov	r8,0
8000544c:	c0 28       	rjmp	80005450 <_fflush_r+0xd4>
8000544e:	6e 58       	ld.w	r8,r7[0x14]
80005450:	8f 28       	st.w	r7[0x8],r8
80005452:	f2 05 01 06 	sub	r6,r9,r5
80005456:	c1 18       	rjmp	80005478 <_fflush_r+0xfc>
80005458:	0c 99       	mov	r9,r6
8000545a:	0a 9a       	mov	r10,r5
8000545c:	6e a8       	ld.w	r8,r7[0x28]
8000545e:	6e 8b       	ld.w	r11,r7[0x20]
80005460:	08 9c       	mov	r12,r4
80005462:	5d 18       	icall	r8
80005464:	18 16       	sub	r6,r12
80005466:	58 0c       	cp.w	r12,0
80005468:	e0 89 00 07 	brgt	80005476 <_fflush_r+0xfa>
8000546c:	8e 68       	ld.sh	r8,r7[0xc]
8000546e:	a7 a8       	sbr	r8,0x6
80005470:	3f fc       	mov	r12,-1
80005472:	ae 68       	st.h	r7[0xc],r8
80005474:	d8 22       	popm	r4-r7,pc
80005476:	18 05       	add	r5,r12
80005478:	58 06       	cp.w	r6,0
8000547a:	fe 99 ff ef 	brgt	80005458 <_fflush_r+0xdc>
8000547e:	d8 2a       	popm	r4-r7,pc,r12=0
80005480:	80 00       	ld.sh	r0,r0[0x0]
80005482:	bc e8       	st.b	lr[0x6],r8
80005484:	80 00       	ld.sh	r0,r0[0x0]
80005486:	bd 08       	ld.d	r8,lr
80005488:	80 00       	ld.sh	r0,r0[0x0]
8000548a:	bd 28       	st.d	lr++,r8

8000548c <fflush>:
8000548c:	d4 01       	pushm	lr
8000548e:	58 0c       	cp.w	r12,0
80005490:	c0 71       	brne	8000549e <fflush+0x12>
80005492:	48 68       	lddpc	r8,800054a8 <fflush+0x1c>
80005494:	fe cb 01 18 	sub	r11,pc,280
80005498:	70 0c       	ld.w	r12,r8[0x0]
8000549a:	ca dc       	rcall	800055f4 <_fwalk_reent>
8000549c:	d8 02       	popm	pc
8000549e:	48 48       	lddpc	r8,800054ac <fflush+0x20>
800054a0:	18 9b       	mov	r11,r12
800054a2:	70 0c       	ld.w	r12,r8[0x0]
800054a4:	c6 cf       	rcall	8000537c <_fflush_r>
800054a6:	d8 02       	popm	pc
800054a8:	80 00       	ld.sh	r0,r0[0x0]
800054aa:	bd 4c       	asr	r12,0x1c
800054ac:	00 00       	add	r0,r0
800054ae:	01 1c       	ld.sh	r12,r0++

800054b0 <__sfp_lock_acquire>:
800054b0:	5e fc       	retal	r12

800054b2 <__sfp_lock_release>:
800054b2:	5e fc       	retal	r12

800054b4 <_cleanup_r>:
800054b4:	d4 01       	pushm	lr
800054b6:	fe cb c5 0e 	sub	r11,pc,-15090
800054ba:	cc 3c       	rcall	80005640 <_fwalk>
800054bc:	d8 02       	popm	pc
800054be:	d7 03       	nop

800054c0 <__sfmoreglue>:
800054c0:	d4 21       	pushm	r4-r7,lr
800054c2:	16 95       	mov	r5,r11
800054c4:	f6 06 10 5c 	mul	r6,r11,92
800054c8:	ec cb ff f4 	sub	r11,r6,-12
800054cc:	cf 0c       	rcall	800056ac <_malloc_r>
800054ce:	18 97       	mov	r7,r12
800054d0:	c0 90       	breq	800054e2 <__sfmoreglue+0x22>
800054d2:	99 15       	st.w	r12[0x4],r5
800054d4:	30 0b       	mov	r11,0
800054d6:	2f 4c       	sub	r12,-12
800054d8:	0c 9a       	mov	r10,r6
800054da:	8f 2c       	st.w	r7[0x8],r12
800054dc:	8f 0b       	st.w	r7[0x0],r11
800054de:	e0 a0 03 11 	rcall	80005b00 <memset>
800054e2:	0e 9c       	mov	r12,r7
800054e4:	d8 22       	popm	r4-r7,pc
800054e6:	d7 03       	nop

800054e8 <__sfp>:
800054e8:	d4 21       	pushm	r4-r7,lr
800054ea:	49 b8       	lddpc	r8,80005554 <__sfp+0x6c>
800054ec:	18 96       	mov	r6,r12
800054ee:	70 07       	ld.w	r7,r8[0x0]
800054f0:	6e 68       	ld.w	r8,r7[0x18]
800054f2:	58 08       	cp.w	r8,0
800054f4:	c0 31       	brne	800054fa <__sfp+0x12>
800054f6:	0e 9c       	mov	r12,r7
800054f8:	c3 0c       	rcall	80005558 <__sinit>
800054fa:	ee c7 ff 28 	sub	r7,r7,-216
800054fe:	30 05       	mov	r5,0
80005500:	6e 2c       	ld.w	r12,r7[0x8]
80005502:	6e 19       	ld.w	r9,r7[0x4]
80005504:	c0 68       	rjmp	80005510 <__sfp+0x28>
80005506:	98 68       	ld.sh	r8,r12[0xc]
80005508:	ea 08 19 00 	cp.h	r8,r5
8000550c:	c1 10       	breq	8000552e <__sfp+0x46>
8000550e:	2a 4c       	sub	r12,-92
80005510:	20 19       	sub	r9,1
80005512:	cf a7       	brpl	80005506 <__sfp+0x1e>
80005514:	6e 08       	ld.w	r8,r7[0x0]
80005516:	58 08       	cp.w	r8,0
80005518:	c0 61       	brne	80005524 <__sfp+0x3c>
8000551a:	30 4b       	mov	r11,4
8000551c:	0c 9c       	mov	r12,r6
8000551e:	cd 1f       	rcall	800054c0 <__sfmoreglue>
80005520:	8f 0c       	st.w	r7[0x0],r12
80005522:	c0 30       	breq	80005528 <__sfp+0x40>
80005524:	6e 07       	ld.w	r7,r7[0x0]
80005526:	ce db       	rjmp	80005500 <__sfp+0x18>
80005528:	30 c8       	mov	r8,12
8000552a:	8d 38       	st.w	r6[0xc],r8
8000552c:	d8 22       	popm	r4-r7,pc
8000552e:	30 08       	mov	r8,0
80005530:	f9 48 00 4c 	st.w	r12[76],r8
80005534:	99 08       	st.w	r12[0x0],r8
80005536:	99 28       	st.w	r12[0x8],r8
80005538:	99 18       	st.w	r12[0x4],r8
8000553a:	99 48       	st.w	r12[0x10],r8
8000553c:	99 58       	st.w	r12[0x14],r8
8000553e:	99 68       	st.w	r12[0x18],r8
80005540:	99 d8       	st.w	r12[0x34],r8
80005542:	99 e8       	st.w	r12[0x38],r8
80005544:	f9 48 00 48 	st.w	r12[72],r8
80005548:	3f f8       	mov	r8,-1
8000554a:	b8 78       	st.h	r12[0xe],r8
8000554c:	30 18       	mov	r8,1
8000554e:	b8 68       	st.h	r12[0xc],r8
80005550:	d8 22       	popm	r4-r7,pc
80005552:	d7 03       	nop
80005554:	80 00       	ld.sh	r0,r0[0x0]
80005556:	bd 4c       	asr	r12,0x1c

80005558 <__sinit>:
80005558:	d4 31       	pushm	r0-r7,lr
8000555a:	18 94       	mov	r4,r12
8000555c:	78 67       	ld.w	r7,r12[0x18]
8000555e:	58 07       	cp.w	r7,0
80005560:	c4 91       	brne	800055f2 <__sinit+0x9a>
80005562:	fe c8 00 ae 	sub	r8,pc,174
80005566:	30 13       	mov	r3,1
80005568:	99 a8       	st.w	r12[0x28],r8
8000556a:	f9 47 00 d8 	st.w	r12[216],r7
8000556e:	f9 47 00 dc 	st.w	r12[220],r7
80005572:	f9 47 00 e0 	st.w	r12[224],r7
80005576:	99 63       	st.w	r12[0x18],r3
80005578:	cb 8f       	rcall	800054e8 <__sfp>
8000557a:	89 0c       	st.w	r4[0x0],r12
8000557c:	08 9c       	mov	r12,r4
8000557e:	cb 5f       	rcall	800054e8 <__sfp>
80005580:	89 1c       	st.w	r4[0x4],r12
80005582:	08 9c       	mov	r12,r4
80005584:	cb 2f       	rcall	800054e8 <__sfp>
80005586:	68 08       	ld.w	r8,r4[0x0]
80005588:	30 49       	mov	r9,4
8000558a:	91 07       	st.w	r8[0x0],r7
8000558c:	b0 69       	st.h	r8[0xc],r9
8000558e:	91 17       	st.w	r8[0x4],r7
80005590:	91 27       	st.w	r8[0x8],r7
80005592:	68 19       	ld.w	r9,r4[0x4]
80005594:	b0 77       	st.h	r8[0xe],r7
80005596:	91 47       	st.w	r8[0x10],r7
80005598:	91 57       	st.w	r8[0x14],r7
8000559a:	91 67       	st.w	r8[0x18],r7
8000559c:	91 88       	st.w	r8[0x20],r8
8000559e:	fe c5 f8 aa 	sub	r5,pc,-1878
800055a2:	fe c6 f8 de 	sub	r6,pc,-1826
800055a6:	91 95       	st.w	r8[0x24],r5
800055a8:	91 a6       	st.w	r8[0x28],r6
800055aa:	fe cb f9 06 	sub	r11,pc,-1786
800055ae:	fe ca f9 16 	sub	r10,pc,-1770
800055b2:	91 bb       	st.w	r8[0x2c],r11
800055b4:	91 ca       	st.w	r8[0x30],r10
800055b6:	93 07       	st.w	r9[0x0],r7
800055b8:	93 17       	st.w	r9[0x4],r7
800055ba:	93 27       	st.w	r9[0x8],r7
800055bc:	30 98       	mov	r8,9
800055be:	b2 68       	st.h	r9[0xc],r8
800055c0:	b2 73       	st.h	r9[0xe],r3
800055c2:	31 28       	mov	r8,18
800055c4:	93 ca       	st.w	r9[0x30],r10
800055c6:	b8 68       	st.h	r12[0xc],r8
800055c8:	89 2c       	st.w	r4[0x8],r12
800055ca:	93 47       	st.w	r9[0x10],r7
800055cc:	93 57       	st.w	r9[0x14],r7
800055ce:	93 67       	st.w	r9[0x18],r7
800055d0:	93 89       	st.w	r9[0x20],r9
800055d2:	93 95       	st.w	r9[0x24],r5
800055d4:	93 a6       	st.w	r9[0x28],r6
800055d6:	93 bb       	st.w	r9[0x2c],r11
800055d8:	99 07       	st.w	r12[0x0],r7
800055da:	99 17       	st.w	r12[0x4],r7
800055dc:	99 27       	st.w	r12[0x8],r7
800055de:	30 28       	mov	r8,2
800055e0:	b8 78       	st.h	r12[0xe],r8
800055e2:	99 ca       	st.w	r12[0x30],r10
800055e4:	99 67       	st.w	r12[0x18],r7
800055e6:	99 95       	st.w	r12[0x24],r5
800055e8:	99 a6       	st.w	r12[0x28],r6
800055ea:	99 bb       	st.w	r12[0x2c],r11
800055ec:	99 47       	st.w	r12[0x10],r7
800055ee:	99 57       	st.w	r12[0x14],r7
800055f0:	99 8c       	st.w	r12[0x20],r12
800055f2:	d8 32       	popm	r0-r7,pc

800055f4 <_fwalk_reent>:
800055f4:	d4 31       	pushm	r0-r7,lr
800055f6:	30 04       	mov	r4,0
800055f8:	18 93       	mov	r3,r12
800055fa:	16 92       	mov	r2,r11
800055fc:	e6 c5 ff 28 	sub	r5,r3,-216
80005600:	c5 8f       	rcall	800054b0 <__sfp_lock_acquire>
80005602:	08 90       	mov	r0,r4
80005604:	3f f1       	mov	r1,-1
80005606:	c1 88       	rjmp	80005636 <_fwalk_reent+0x42>
80005608:	6a 28       	ld.w	r8,r5[0x8]
8000560a:	6a 16       	ld.w	r6,r5[0x4]
8000560c:	f0 c7 ff f4 	sub	r7,r8,-12
80005610:	c0 d8       	rjmp	8000562a <_fwalk_reent+0x36>
80005612:	8e 08       	ld.sh	r8,r7[0x0]
80005614:	e0 08 19 00 	cp.h	r8,r0
80005618:	c0 80       	breq	80005628 <_fwalk_reent+0x34>
8000561a:	8e 18       	ld.sh	r8,r7[0x2]
8000561c:	e2 08 19 00 	cp.h	r8,r1
80005620:	c0 40       	breq	80005628 <_fwalk_reent+0x34>
80005622:	06 9c       	mov	r12,r3
80005624:	5d 12       	icall	r2
80005626:	18 44       	or	r4,r12
80005628:	2a 47       	sub	r7,-92
8000562a:	20 16       	sub	r6,1
8000562c:	ee cb 00 0c 	sub	r11,r7,12
80005630:	58 06       	cp.w	r6,0
80005632:	cf 04       	brge	80005612 <_fwalk_reent+0x1e>
80005634:	6a 05       	ld.w	r5,r5[0x0]
80005636:	58 05       	cp.w	r5,0
80005638:	ce 81       	brne	80005608 <_fwalk_reent+0x14>
8000563a:	c3 cf       	rcall	800054b2 <__sfp_lock_release>
8000563c:	08 9c       	mov	r12,r4
8000563e:	d8 32       	popm	r0-r7,pc

80005640 <_fwalk>:
80005640:	d4 31       	pushm	r0-r7,lr
80005642:	30 04       	mov	r4,0
80005644:	16 93       	mov	r3,r11
80005646:	f8 c5 ff 28 	sub	r5,r12,-216
8000564a:	08 91       	mov	r1,r4
8000564c:	c3 2f       	rcall	800054b0 <__sfp_lock_acquire>
8000564e:	3f f2       	mov	r2,-1
80005650:	c1 78       	rjmp	8000567e <_fwalk+0x3e>
80005652:	6a 28       	ld.w	r8,r5[0x8]
80005654:	6a 16       	ld.w	r6,r5[0x4]
80005656:	f0 c7 ff f4 	sub	r7,r8,-12
8000565a:	c0 c8       	rjmp	80005672 <_fwalk+0x32>
8000565c:	8e 08       	ld.sh	r8,r7[0x0]
8000565e:	e2 08 19 00 	cp.h	r8,r1
80005662:	c0 70       	breq	80005670 <_fwalk+0x30>
80005664:	8e 18       	ld.sh	r8,r7[0x2]
80005666:	e4 08 19 00 	cp.h	r8,r2
8000566a:	c0 30       	breq	80005670 <_fwalk+0x30>
8000566c:	5d 13       	icall	r3
8000566e:	18 44       	or	r4,r12
80005670:	2a 47       	sub	r7,-92
80005672:	20 16       	sub	r6,1
80005674:	ee cc 00 0c 	sub	r12,r7,12
80005678:	58 06       	cp.w	r6,0
8000567a:	cf 14       	brge	8000565c <_fwalk+0x1c>
8000567c:	6a 05       	ld.w	r5,r5[0x0]
8000567e:	58 05       	cp.w	r5,0
80005680:	ce 91       	brne	80005652 <_fwalk+0x12>
80005682:	c1 8f       	rcall	800054b2 <__sfp_lock_release>
80005684:	08 9c       	mov	r12,r4
80005686:	d8 32       	popm	r0-r7,pc

80005688 <free>:
80005688:	d4 01       	pushm	lr
8000568a:	48 48       	lddpc	r8,80005698 <free+0x10>
8000568c:	18 9b       	mov	r11,r12
8000568e:	70 0c       	ld.w	r12,r8[0x0]
80005690:	e0 a0 1c e2 	rcall	80009054 <_free_r>
80005694:	d8 02       	popm	pc
80005696:	d7 03       	nop
80005698:	00 00       	add	r0,r0
8000569a:	01 1c       	ld.sh	r12,r0++

8000569c <malloc>:
8000569c:	d4 01       	pushm	lr
8000569e:	48 38       	lddpc	r8,800056a8 <malloc+0xc>
800056a0:	18 9b       	mov	r11,r12
800056a2:	70 0c       	ld.w	r12,r8[0x0]
800056a4:	c0 4c       	rcall	800056ac <_malloc_r>
800056a6:	d8 02       	popm	pc
800056a8:	00 00       	add	r0,r0
800056aa:	01 1c       	ld.sh	r12,r0++

800056ac <_malloc_r>:
800056ac:	d4 31       	pushm	r0-r7,lr
800056ae:	f6 c8 ff f5 	sub	r8,r11,-11
800056b2:	18 92       	mov	r2,r12
800056b4:	10 99       	mov	r9,r8
800056b6:	59 68       	cp.w	r8,22
800056b8:	e0 19 ff f8 	andl	r9,0xfff8
800056bc:	59 68       	cp.w	r8,22
800056be:	f2 05 17 b0 	movhi	r5,r9
800056c2:	f9 b5 08 10 	movls	r5,16
800056c6:	16 35       	cp.w	r5,r11
800056c8:	5f 38       	srlo	r8
800056ca:	f1 e5 13 f8 	or	r8,r8,r5>>0x1f
800056ce:	c0 50       	breq	800056d8 <_malloc_r+0x2c>
800056d0:	30 c8       	mov	r8,12
800056d2:	99 38       	st.w	r12[0xc],r8
800056d4:	e0 8f 01 fd 	bral	80005ace <_malloc_r+0x422>
800056d8:	e0 a0 02 1b 	rcall	80005b0e <__malloc_lock>
800056dc:	e0 45 01 f7 	cp.w	r5,503
800056e0:	e0 8b 00 1a 	brhi	80005714 <_malloc_r+0x68>
800056e4:	ea 09 16 03 	lsr	r9,r5,0x3
800056e8:	4c f8       	lddpc	r8,80005824 <_malloc_r+0x178>
800056ea:	f0 09 00 38 	add	r8,r8,r9<<0x3
800056ee:	70 36       	ld.w	r6,r8[0xc]
800056f0:	10 36       	cp.w	r6,r8
800056f2:	c0 61       	brne	800056fe <_malloc_r+0x52>
800056f4:	ec c8 ff f8 	sub	r8,r6,-8
800056f8:	70 36       	ld.w	r6,r8[0xc]
800056fa:	10 36       	cp.w	r6,r8
800056fc:	c0 90       	breq	8000570e <_malloc_r+0x62>
800056fe:	6c 19       	ld.w	r9,r6[0x4]
80005700:	04 9c       	mov	r12,r2
80005702:	e0 19 ff fc 	andl	r9,0xfffc
80005706:	6c 3a       	ld.w	r10,r6[0xc]
80005708:	ec 09 00 09 	add	r9,r6,r9
8000570c:	c4 98       	rjmp	8000579e <_malloc_r+0xf2>
8000570e:	f2 c7 ff fe 	sub	r7,r9,-2
80005712:	c5 28       	rjmp	800057b6 <_malloc_r+0x10a>
80005714:	ea 08 16 09 	lsr	r8,r5,0x9
80005718:	c0 41       	brne	80005720 <_malloc_r+0x74>
8000571a:	ea 09 16 03 	lsr	r9,r5,0x3
8000571e:	c2 b8       	rjmp	80005774 <_malloc_r+0xc8>
80005720:	58 48       	cp.w	r8,4
80005722:	e0 8b 00 07 	brhi	80005730 <_malloc_r+0x84>
80005726:	ea 08 16 06 	lsr	r8,r5,0x6
8000572a:	f0 c9 ff c8 	sub	r9,r8,-56
8000572e:	c2 38       	rjmp	80005774 <_malloc_r+0xc8>
80005730:	59 48       	cp.w	r8,20
80005732:	e0 8b 00 05 	brhi	8000573c <_malloc_r+0x90>
80005736:	f0 c9 ff a5 	sub	r9,r8,-91
8000573a:	c1 d8       	rjmp	80005774 <_malloc_r+0xc8>
8000573c:	e0 48 00 54 	cp.w	r8,84
80005740:	e0 8b 00 07 	brhi	8000574e <_malloc_r+0xa2>
80005744:	ea 08 16 0c 	lsr	r8,r5,0xc
80005748:	f0 c9 ff 92 	sub	r9,r8,-110
8000574c:	c1 48       	rjmp	80005774 <_malloc_r+0xc8>
8000574e:	e0 48 01 54 	cp.w	r8,340
80005752:	e0 8b 00 07 	brhi	80005760 <_malloc_r+0xb4>
80005756:	ea 08 16 0f 	lsr	r8,r5,0xf
8000575a:	f0 c9 ff 89 	sub	r9,r8,-119
8000575e:	c0 b8       	rjmp	80005774 <_malloc_r+0xc8>
80005760:	e0 48 05 54 	cp.w	r8,1364
80005764:	e0 88 00 04 	brls	8000576c <_malloc_r+0xc0>
80005768:	37 e9       	mov	r9,126
8000576a:	c0 58       	rjmp	80005774 <_malloc_r+0xc8>
8000576c:	ea 08 16 12 	lsr	r8,r5,0x12
80005770:	f0 c9 ff 84 	sub	r9,r8,-124
80005774:	4a c8       	lddpc	r8,80005824 <_malloc_r+0x178>
80005776:	f0 09 00 3c 	add	r12,r8,r9<<0x3
8000577a:	78 36       	ld.w	r6,r12[0xc]
8000577c:	c1 98       	rjmp	800057ae <_malloc_r+0x102>
8000577e:	6c 18       	ld.w	r8,r6[0x4]
80005780:	e0 18 ff fc 	andl	r8,0xfffc
80005784:	f0 05 01 0b 	sub	r11,r8,r5
80005788:	58 fb       	cp.w	r11,15
8000578a:	e0 8a 00 04 	brle	80005792 <_malloc_r+0xe6>
8000578e:	20 19       	sub	r9,1
80005790:	c1 18       	rjmp	800057b2 <_malloc_r+0x106>
80005792:	6c 3a       	ld.w	r10,r6[0xc]
80005794:	58 0b       	cp.w	r11,0
80005796:	c0 b5       	brlt	800057ac <_malloc_r+0x100>
80005798:	ec 08 00 09 	add	r9,r6,r8
8000579c:	04 9c       	mov	r12,r2
8000579e:	6c 28       	ld.w	r8,r6[0x8]
800057a0:	95 28       	st.w	r10[0x8],r8
800057a2:	91 3a       	st.w	r8[0xc],r10
800057a4:	72 18       	ld.w	r8,r9[0x4]
800057a6:	a1 a8       	sbr	r8,0x0
800057a8:	93 18       	st.w	r9[0x4],r8
800057aa:	cc a8       	rjmp	8000593e <_malloc_r+0x292>
800057ac:	14 96       	mov	r6,r10
800057ae:	18 36       	cp.w	r6,r12
800057b0:	ce 71       	brne	8000577e <_malloc_r+0xd2>
800057b2:	f2 c7 ff ff 	sub	r7,r9,-1
800057b6:	49 cb       	lddpc	r11,80005824 <_malloc_r+0x178>
800057b8:	f6 c4 ff f8 	sub	r4,r11,-8
800057bc:	68 26       	ld.w	r6,r4[0x8]
800057be:	08 36       	cp.w	r6,r4
800057c0:	c7 b0       	breq	800058b6 <_malloc_r+0x20a>
800057c2:	6c 19       	ld.w	r9,r6[0x4]
800057c4:	e0 19 ff fc 	andl	r9,0xfffc
800057c8:	f2 05 01 08 	sub	r8,r9,r5
800057cc:	58 f8       	cp.w	r8,15
800057ce:	e0 8a 00 0e 	brle	800057ea <_malloc_r+0x13e>
800057d2:	ec 05 00 09 	add	r9,r6,r5
800057d6:	89 39       	st.w	r4[0xc],r9
800057d8:	89 29       	st.w	r4[0x8],r9
800057da:	a1 a5       	sbr	r5,0x0
800057dc:	f2 08 09 08 	st.w	r9[r8],r8
800057e0:	8d 15       	st.w	r6[0x4],r5
800057e2:	93 24       	st.w	r9[0x8],r4
800057e4:	93 34       	st.w	r9[0xc],r4
800057e6:	04 9c       	mov	r12,r2
800057e8:	cd fb       	rjmp	800057a6 <_malloc_r+0xfa>
800057ea:	89 34       	st.w	r4[0xc],r4
800057ec:	89 24       	st.w	r4[0x8],r4
800057ee:	58 08       	cp.w	r8,0
800057f0:	c0 55       	brlt	800057fa <_malloc_r+0x14e>
800057f2:	ec 09 00 09 	add	r9,r6,r9
800057f6:	04 9c       	mov	r12,r2
800057f8:	cd 6b       	rjmp	800057a4 <_malloc_r+0xf8>
800057fa:	e0 49 01 ff 	cp.w	r9,511
800057fe:	e0 8b 00 15 	brhi	80005828 <_malloc_r+0x17c>
80005802:	f2 0a 16 03 	lsr	r10,r9,0x3
80005806:	f6 0a 00 38 	add	r8,r11,r10<<0x3
8000580a:	70 29       	ld.w	r9,r8[0x8]
8000580c:	8d 38       	st.w	r6[0xc],r8
8000580e:	8d 29       	st.w	r6[0x8],r9
80005810:	93 36       	st.w	r9[0xc],r6
80005812:	91 26       	st.w	r8[0x8],r6
80005814:	76 19       	ld.w	r9,r11[0x4]
80005816:	a3 4a       	asr	r10,0x2
80005818:	30 18       	mov	r8,1
8000581a:	f0 0a 09 48 	lsl	r8,r8,r10
8000581e:	10 49       	or	r9,r8
80005820:	97 19       	st.w	r11[0x4],r9
80005822:	c4 a8       	rjmp	800058b6 <_malloc_r+0x20a>
80005824:	00 00       	add	r0,r0
80005826:	01 20       	ld.uh	r0,r0++
80005828:	f2 0a 16 09 	lsr	r10,r9,0x9
8000582c:	58 4a       	cp.w	r10,4
8000582e:	e0 8b 00 07 	brhi	8000583c <_malloc_r+0x190>
80005832:	f2 08 16 06 	lsr	r8,r9,0x6
80005836:	f0 ca ff c8 	sub	r10,r8,-56
8000583a:	c2 28       	rjmp	8000587e <_malloc_r+0x1d2>
8000583c:	59 4a       	cp.w	r10,20
8000583e:	e0 8b 00 04 	brhi	80005846 <_malloc_r+0x19a>
80005842:	2a 5a       	sub	r10,-91
80005844:	c1 d8       	rjmp	8000587e <_malloc_r+0x1d2>
80005846:	e0 4a 00 54 	cp.w	r10,84
8000584a:	e0 8b 00 07 	brhi	80005858 <_malloc_r+0x1ac>
8000584e:	f2 08 16 0c 	lsr	r8,r9,0xc
80005852:	f0 ca ff 92 	sub	r10,r8,-110
80005856:	c1 48       	rjmp	8000587e <_malloc_r+0x1d2>
80005858:	e0 4a 01 54 	cp.w	r10,340
8000585c:	e0 8b 00 07 	brhi	8000586a <_malloc_r+0x1be>
80005860:	f2 08 16 0f 	lsr	r8,r9,0xf
80005864:	f0 ca ff 89 	sub	r10,r8,-119
80005868:	c0 b8       	rjmp	8000587e <_malloc_r+0x1d2>
8000586a:	e0 4a 05 54 	cp.w	r10,1364
8000586e:	e0 88 00 04 	brls	80005876 <_malloc_r+0x1ca>
80005872:	37 ea       	mov	r10,126
80005874:	c0 58       	rjmp	8000587e <_malloc_r+0x1d2>
80005876:	f2 08 16 12 	lsr	r8,r9,0x12
8000587a:	f0 ca ff 84 	sub	r10,r8,-124
8000587e:	4c 6e       	lddpc	lr,80005994 <_malloc_r+0x2e8>
80005880:	fc 0a 00 3c 	add	r12,lr,r10<<0x3
80005884:	78 2b       	ld.w	r11,r12[0x8]
80005886:	18 3b       	cp.w	r11,r12
80005888:	c0 d1       	brne	800058a2 <_malloc_r+0x1f6>
8000588a:	a3 4a       	asr	r10,0x2
8000588c:	30 18       	mov	r8,1
8000588e:	f0 0a 09 48 	lsl	r8,r8,r10
80005892:	7c 19       	ld.w	r9,lr[0x4]
80005894:	10 49       	or	r9,r8
80005896:	16 98       	mov	r8,r11
80005898:	9d 19       	st.w	lr[0x4],r9
8000589a:	c0 a8       	rjmp	800058ae <_malloc_r+0x202>
8000589c:	76 2b       	ld.w	r11,r11[0x8]
8000589e:	18 3b       	cp.w	r11,r12
800058a0:	c0 60       	breq	800058ac <_malloc_r+0x200>
800058a2:	76 18       	ld.w	r8,r11[0x4]
800058a4:	e0 18 ff fc 	andl	r8,0xfffc
800058a8:	10 39       	cp.w	r9,r8
800058aa:	cf 93       	brcs	8000589c <_malloc_r+0x1f0>
800058ac:	76 38       	ld.w	r8,r11[0xc]
800058ae:	8d 38       	st.w	r6[0xc],r8
800058b0:	8d 2b       	st.w	r6[0x8],r11
800058b2:	97 36       	st.w	r11[0xc],r6
800058b4:	91 26       	st.w	r8[0x8],r6
800058b6:	ee 09 14 02 	asr	r9,r7,0x2
800058ba:	30 18       	mov	r8,1
800058bc:	4b 61       	lddpc	r1,80005994 <_malloc_r+0x2e8>
800058be:	f0 09 09 4b 	lsl	r11,r8,r9
800058c2:	62 19       	ld.w	r9,r1[0x4]
800058c4:	12 3b       	cp.w	r11,r9
800058c6:	e0 8b 00 69 	brhi	80005998 <_malloc_r+0x2ec>
800058ca:	f7 e9 00 08 	and	r8,r11,r9
800058ce:	c0 d1       	brne	800058e8 <_malloc_r+0x23c>
800058d0:	0e 98       	mov	r8,r7
800058d2:	a1 7b       	lsl	r11,0x1
800058d4:	e0 18 ff fc 	andl	r8,0xfffc
800058d8:	f0 c7 ff fc 	sub	r7,r8,-4
800058dc:	c0 38       	rjmp	800058e2 <_malloc_r+0x236>
800058de:	2f c7       	sub	r7,-4
800058e0:	a1 7b       	lsl	r11,0x1
800058e2:	f7 e9 00 08 	and	r8,r11,r9
800058e6:	cf c0       	breq	800058de <_malloc_r+0x232>
800058e8:	e2 07 00 33 	add	r3,r1,r7<<0x3
800058ec:	0e 9c       	mov	r12,r7
800058ee:	06 99       	mov	r9,r3
800058f0:	72 36       	ld.w	r6,r9[0xc]
800058f2:	c2 b8       	rjmp	80005948 <_malloc_r+0x29c>
800058f4:	6c 18       	ld.w	r8,r6[0x4]
800058f6:	e0 18 ff fc 	andl	r8,0xfffc
800058fa:	f0 05 01 0e 	sub	lr,r8,r5
800058fe:	58 fe       	cp.w	lr,15
80005900:	e0 8a 00 13 	brle	80005926 <_malloc_r+0x27a>
80005904:	6c 39       	ld.w	r9,r6[0xc]
80005906:	6c 28       	ld.w	r8,r6[0x8]
80005908:	93 28       	st.w	r9[0x8],r8
8000590a:	91 39       	st.w	r8[0xc],r9
8000590c:	ec 05 00 09 	add	r9,r6,r5
80005910:	89 39       	st.w	r4[0xc],r9
80005912:	89 29       	st.w	r4[0x8],r9
80005914:	a1 a5       	sbr	r5,0x0
80005916:	f2 0e 09 0e 	st.w	r9[lr],lr
8000591a:	8d 15       	st.w	r6[0x4],r5
8000591c:	93 24       	st.w	r9[0x8],r4
8000591e:	93 34       	st.w	r9[0xc],r4
80005920:	04 9c       	mov	r12,r2
80005922:	1c 98       	mov	r8,lr
80005924:	c4 1b       	rjmp	800057a6 <_malloc_r+0xfa>
80005926:	6c 3a       	ld.w	r10,r6[0xc]
80005928:	58 0e       	cp.w	lr,0
8000592a:	c0 e5       	brlt	80005946 <_malloc_r+0x29a>
8000592c:	ec 08 00 08 	add	r8,r6,r8
80005930:	04 9c       	mov	r12,r2
80005932:	70 19       	ld.w	r9,r8[0x4]
80005934:	a1 a9       	sbr	r9,0x0
80005936:	91 19       	st.w	r8[0x4],r9
80005938:	6c 28       	ld.w	r8,r6[0x8]
8000593a:	95 28       	st.w	r10[0x8],r8
8000593c:	91 3a       	st.w	r8[0xc],r10
8000593e:	ce 9c       	rcall	80005b10 <__malloc_unlock>
80005940:	ec cc ff f8 	sub	r12,r6,-8
80005944:	d8 32       	popm	r0-r7,pc
80005946:	14 96       	mov	r6,r10
80005948:	12 36       	cp.w	r6,r9
8000594a:	cd 51       	brne	800058f4 <_malloc_r+0x248>
8000594c:	2f fc       	sub	r12,-1
8000594e:	f1 dc c0 02 	bfextu	r8,r12,0x0,0x2
80005952:	c0 30       	breq	80005958 <_malloc_r+0x2ac>
80005954:	2f 89       	sub	r9,-8
80005956:	cc db       	rjmp	800058f0 <_malloc_r+0x244>
80005958:	0e 99       	mov	r9,r7
8000595a:	06 9a       	mov	r10,r3
8000595c:	f1 d9 c0 02 	bfextu	r8,r9,0x0,0x2
80005960:	c0 51       	brne	8000596a <_malloc_r+0x2be>
80005962:	62 18       	ld.w	r8,r1[0x4]
80005964:	16 88       	andn	r8,r11
80005966:	83 18       	st.w	r1[0x4],r8
80005968:	c0 78       	rjmp	80005976 <_malloc_r+0x2ca>
8000596a:	f4 c8 00 08 	sub	r8,r10,8
8000596e:	20 19       	sub	r9,1
80005970:	74 0a       	ld.w	r10,r10[0x0]
80005972:	10 3a       	cp.w	r10,r8
80005974:	cf 40       	breq	8000595c <_malloc_r+0x2b0>
80005976:	a1 7b       	lsl	r11,0x1
80005978:	62 19       	ld.w	r9,r1[0x4]
8000597a:	12 3b       	cp.w	r11,r9
8000597c:	e0 8b 00 0e 	brhi	80005998 <_malloc_r+0x2ec>
80005980:	58 0b       	cp.w	r11,0
80005982:	c0 b0       	breq	80005998 <_malloc_r+0x2ec>
80005984:	18 97       	mov	r7,r12
80005986:	c0 38       	rjmp	8000598c <_malloc_r+0x2e0>
80005988:	2f c7       	sub	r7,-4
8000598a:	a1 7b       	lsl	r11,0x1
8000598c:	f7 e9 00 08 	and	r8,r11,r9
80005990:	ca c1       	brne	800058e8 <_malloc_r+0x23c>
80005992:	cf bb       	rjmp	80005988 <_malloc_r+0x2dc>
80005994:	00 00       	add	r0,r0
80005996:	01 20       	ld.uh	r0,r0++
80005998:	62 23       	ld.w	r3,r1[0x8]
8000599a:	66 14       	ld.w	r4,r3[0x4]
8000599c:	e0 14 ff fc 	andl	r4,0xfffc
800059a0:	0a 34       	cp.w	r4,r5
800059a2:	5f 39       	srlo	r9
800059a4:	e8 05 01 0a 	sub	r10,r4,r5
800059a8:	58 fa       	cp.w	r10,15
800059aa:	5f a8       	srle	r8
800059ac:	10 49       	or	r9,r8
800059ae:	e0 80 00 9b 	breq	80005ae4 <_malloc_r+0x438>
800059b2:	4c 88       	lddpc	r8,80005ad0 <_malloc_r+0x424>
800059b4:	70 08       	ld.w	r8,r8[0x0]
800059b6:	2f 08       	sub	r8,-16
800059b8:	f0 05 00 07 	add	r7,r8,r5
800059bc:	4c 68       	lddpc	r8,80005ad4 <_malloc_r+0x428>
800059be:	70 08       	ld.w	r8,r8[0x0]
800059c0:	5b f8       	cp.w	r8,-1
800059c2:	c0 40       	breq	800059ca <_malloc_r+0x31e>
800059c4:	28 17       	sub	r7,-127
800059c6:	e0 17 ff 80 	andl	r7,0xff80
800059ca:	0e 9b       	mov	r11,r7
800059cc:	04 9c       	mov	r12,r2
800059ce:	cb bc       	rcall	80005b44 <_sbrk_r>
800059d0:	18 96       	mov	r6,r12
800059d2:	5b fc       	cp.w	r12,-1
800059d4:	c6 f0       	breq	80005ab2 <_malloc_r+0x406>
800059d6:	e6 04 00 0a 	add	r10,r3,r4
800059da:	14 3c       	cp.w	r12,r10
800059dc:	c0 32       	brcc	800059e2 <_malloc_r+0x336>
800059de:	02 33       	cp.w	r3,r1
800059e0:	c6 91       	brne	80005ab2 <_malloc_r+0x406>
800059e2:	4b e9       	lddpc	r9,80005ad8 <_malloc_r+0x42c>
800059e4:	72 08       	ld.w	r8,r9[0x0]
800059e6:	ee 08 00 0b 	add	r11,r7,r8
800059ea:	93 0b       	st.w	r9[0x0],r11
800059ec:	14 36       	cp.w	r6,r10
800059ee:	c0 a1       	brne	80005a02 <_malloc_r+0x356>
800059f0:	f1 d6 c0 07 	bfextu	r8,r6,0x0,0x7
800059f4:	c0 71       	brne	80005a02 <_malloc_r+0x356>
800059f6:	ee 04 00 08 	add	r8,r7,r4
800059fa:	62 29       	ld.w	r9,r1[0x8]
800059fc:	a1 a8       	sbr	r8,0x0
800059fe:	93 18       	st.w	r9[0x4],r8
80005a00:	c4 b8       	rjmp	80005a96 <_malloc_r+0x3ea>
80005a02:	4b 59       	lddpc	r9,80005ad4 <_malloc_r+0x428>
80005a04:	72 08       	ld.w	r8,r9[0x0]
80005a06:	5b f8       	cp.w	r8,-1
80005a08:	c0 31       	brne	80005a0e <_malloc_r+0x362>
80005a0a:	93 06       	st.w	r9[0x0],r6
80005a0c:	c0 68       	rjmp	80005a18 <_malloc_r+0x36c>
80005a0e:	ec 0b 00 09 	add	r9,r6,r11
80005a12:	4b 28       	lddpc	r8,80005ad8 <_malloc_r+0x42c>
80005a14:	14 19       	sub	r9,r10
80005a16:	91 09       	st.w	r8[0x0],r9
80005a18:	f1 d6 c0 03 	bfextu	r8,r6,0x0,0x3
80005a1c:	c0 40       	breq	80005a24 <_malloc_r+0x378>
80005a1e:	f0 08 11 08 	rsub	r8,r8,8
80005a22:	10 06       	add	r6,r8
80005a24:	28 08       	sub	r8,-128
80005a26:	ec 07 00 09 	add	r9,r6,r7
80005a2a:	f3 d9 c0 07 	bfextu	r9,r9,0x0,0x7
80005a2e:	04 9c       	mov	r12,r2
80005a30:	f0 09 01 07 	sub	r7,r8,r9
80005a34:	0e 9b       	mov	r11,r7
80005a36:	c8 7c       	rcall	80005b44 <_sbrk_r>
80005a38:	30 09       	mov	r9,0
80005a3a:	5b fc       	cp.w	r12,-1
80005a3c:	c0 31       	brne	80005a42 <_malloc_r+0x396>
80005a3e:	0c 9c       	mov	r12,r6
80005a40:	12 97       	mov	r7,r9
80005a42:	f8 06 01 08 	sub	r8,r12,r6
80005a46:	0e 08       	add	r8,r7
80005a48:	a1 a8       	sbr	r8,0x0
80005a4a:	4a 49       	lddpc	r9,80005ad8 <_malloc_r+0x42c>
80005a4c:	8d 18       	st.w	r6[0x4],r8
80005a4e:	83 26       	st.w	r1[0x8],r6
80005a50:	72 08       	ld.w	r8,r9[0x0]
80005a52:	ee 08 00 08 	add	r8,r7,r8
80005a56:	93 08       	st.w	r9[0x0],r8
80005a58:	02 33       	cp.w	r3,r1
80005a5a:	c1 e0       	breq	80005a96 <_malloc_r+0x3ea>
80005a5c:	58 f4       	cp.w	r4,15
80005a5e:	e0 8b 00 05 	brhi	80005a68 <_malloc_r+0x3bc>
80005a62:	30 18       	mov	r8,1
80005a64:	8d 18       	st.w	r6[0x4],r8
80005a66:	c2 68       	rjmp	80005ab2 <_malloc_r+0x406>
80005a68:	30 5a       	mov	r10,5
80005a6a:	e8 c9 00 0c 	sub	r9,r4,12
80005a6e:	e0 19 ff f8 	andl	r9,0xfff8
80005a72:	e6 09 00 08 	add	r8,r3,r9
80005a76:	91 2a       	st.w	r8[0x8],r10
80005a78:	91 1a       	st.w	r8[0x4],r10
80005a7a:	66 18       	ld.w	r8,r3[0x4]
80005a7c:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80005a80:	f3 e8 10 08 	or	r8,r9,r8
80005a84:	87 18       	st.w	r3[0x4],r8
80005a86:	58 f9       	cp.w	r9,15
80005a88:	e0 88 00 07 	brls	80005a96 <_malloc_r+0x3ea>
80005a8c:	e6 cb ff f8 	sub	r11,r3,-8
80005a90:	04 9c       	mov	r12,r2
80005a92:	e0 a0 1a e1 	rcall	80009054 <_free_r>
80005a96:	49 18       	lddpc	r8,80005ad8 <_malloc_r+0x42c>
80005a98:	49 1a       	lddpc	r10,80005adc <_malloc_r+0x430>
80005a9a:	70 09       	ld.w	r9,r8[0x0]
80005a9c:	74 08       	ld.w	r8,r10[0x0]
80005a9e:	10 39       	cp.w	r9,r8
80005aa0:	e0 88 00 03 	brls	80005aa6 <_malloc_r+0x3fa>
80005aa4:	95 09       	st.w	r10[0x0],r9
80005aa6:	48 fa       	lddpc	r10,80005ae0 <_malloc_r+0x434>
80005aa8:	74 08       	ld.w	r8,r10[0x0]
80005aaa:	10 39       	cp.w	r9,r8
80005aac:	e0 88 00 03 	brls	80005ab2 <_malloc_r+0x406>
80005ab0:	95 09       	st.w	r10[0x0],r9
80005ab2:	62 28       	ld.w	r8,r1[0x8]
80005ab4:	70 18       	ld.w	r8,r8[0x4]
80005ab6:	e0 18 ff fc 	andl	r8,0xfffc
80005aba:	0a 38       	cp.w	r8,r5
80005abc:	5f 39       	srlo	r9
80005abe:	f0 05 01 0a 	sub	r10,r8,r5
80005ac2:	58 fa       	cp.w	r10,15
80005ac4:	5f a8       	srle	r8
80005ac6:	10 49       	or	r9,r8
80005ac8:	c0 e0       	breq	80005ae4 <_malloc_r+0x438>
80005aca:	04 9c       	mov	r12,r2
80005acc:	c2 2c       	rcall	80005b10 <__malloc_unlock>
80005ace:	d8 3a       	popm	r0-r7,pc,r12=0
80005ad0:	00 00       	add	r0,r0
80005ad2:	06 40       	or	r0,r3
80005ad4:	00 00       	add	r0,r0
80005ad6:	05 2c       	ld.uh	r12,r2++
80005ad8:	00 00       	add	r0,r0
80005ada:	06 44       	or	r4,r3
80005adc:	00 00       	add	r0,r0
80005ade:	06 3c       	cp.w	r12,r3
80005ae0:	00 00       	add	r0,r0
80005ae2:	06 38       	cp.w	r8,r3
80005ae4:	0a 98       	mov	r8,r5
80005ae6:	a1 a8       	sbr	r8,0x0
80005ae8:	62 26       	ld.w	r6,r1[0x8]
80005aea:	a1 aa       	sbr	r10,0x0
80005aec:	8d 18       	st.w	r6[0x4],r8
80005aee:	ec 05 00 08 	add	r8,r6,r5
80005af2:	04 9c       	mov	r12,r2
80005af4:	83 28       	st.w	r1[0x8],r8
80005af6:	91 1a       	st.w	r8[0x4],r10
80005af8:	c0 cc       	rcall	80005b10 <__malloc_unlock>
80005afa:	ec cc ff f8 	sub	r12,r6,-8
80005afe:	d8 32       	popm	r0-r7,pc

80005b00 <memset>:
80005b00:	18 98       	mov	r8,r12
80005b02:	c0 38       	rjmp	80005b08 <memset+0x8>
80005b04:	10 cb       	st.b	r8++,r11
80005b06:	20 1a       	sub	r10,1
80005b08:	58 0a       	cp.w	r10,0
80005b0a:	cf d1       	brne	80005b04 <memset+0x4>
80005b0c:	5e fc       	retal	r12

80005b0e <__malloc_lock>:
80005b0e:	5e fc       	retal	r12

80005b10 <__malloc_unlock>:
80005b10:	5e fc       	retal	r12
80005b12:	d7 03       	nop

80005b14 <printf>:
80005b14:	d4 21       	pushm	r4-r7,lr
80005b16:	48 b8       	lddpc	r8,80005b40 <printf+0x2c>
80005b18:	fa c6 ff ec 	sub	r6,sp,-20
80005b1c:	18 95       	mov	r5,r12
80005b1e:	70 07       	ld.w	r7,r8[0x0]
80005b20:	58 07       	cp.w	r7,0
80005b22:	c0 70       	breq	80005b30 <printf+0x1c>
80005b24:	6e 68       	ld.w	r8,r7[0x18]
80005b26:	58 08       	cp.w	r8,0
80005b28:	c0 41       	brne	80005b30 <printf+0x1c>
80005b2a:	0e 9c       	mov	r12,r7
80005b2c:	fe b0 fd 16 	rcall	80005558 <__sinit>
80005b30:	0c 99       	mov	r9,r6
80005b32:	0a 9a       	mov	r10,r5
80005b34:	0e 9c       	mov	r12,r7
80005b36:	6e 1b       	ld.w	r11,r7[0x4]
80005b38:	e0 a0 02 90 	rcall	80006058 <_vfprintf_r>
80005b3c:	d8 22       	popm	r4-r7,pc
80005b3e:	d7 03       	nop
80005b40:	00 00       	add	r0,r0
80005b42:	01 1c       	ld.sh	r12,r0++

80005b44 <_sbrk_r>:
80005b44:	d4 21       	pushm	r4-r7,lr
80005b46:	30 08       	mov	r8,0
80005b48:	18 96       	mov	r6,r12
80005b4a:	48 77       	lddpc	r7,80005b64 <_sbrk_r+0x20>
80005b4c:	16 9c       	mov	r12,r11
80005b4e:	8f 08       	st.w	r7[0x0],r8
80005b50:	fe b0 fa 5a 	rcall	80005004 <_sbrk>
80005b54:	5b fc       	cp.w	r12,-1
80005b56:	c0 51       	brne	80005b60 <_sbrk_r+0x1c>
80005b58:	6e 08       	ld.w	r8,r7[0x0]
80005b5a:	58 08       	cp.w	r8,0
80005b5c:	c0 20       	breq	80005b60 <_sbrk_r+0x1c>
80005b5e:	8d 38       	st.w	r6[0xc],r8
80005b60:	d8 22       	popm	r4-r7,pc
80005b62:	d7 03       	nop
80005b64:	00 00       	add	r0,r0
80005b66:	12 d8       	st.w	--r9,r8

80005b68 <setbuf>:
80005b68:	d4 01       	pushm	lr
80005b6a:	e0 69 04 00 	mov	r9,1024
80005b6e:	58 0b       	cp.w	r11,0
80005b70:	f9 ba 00 02 	moveq	r10,2
80005b74:	f9 ba 01 00 	movne	r10,0
80005b78:	c0 2c       	rcall	80005b7c <setvbuf>
80005b7a:	d8 02       	popm	pc

80005b7c <setvbuf>:
80005b7c:	d4 31       	pushm	r0-r7,lr
80005b7e:	4c 38       	lddpc	r8,80005c88 <setvbuf+0x10c>
80005b80:	18 97       	mov	r7,r12
80005b82:	16 96       	mov	r6,r11
80005b84:	14 93       	mov	r3,r10
80005b86:	12 95       	mov	r5,r9
80005b88:	70 0c       	ld.w	r12,r8[0x0]
80005b8a:	58 0c       	cp.w	r12,0
80005b8c:	c0 60       	breq	80005b98 <setvbuf+0x1c>
80005b8e:	78 68       	ld.w	r8,r12[0x18]
80005b90:	58 08       	cp.w	r8,0
80005b92:	c0 31       	brne	80005b98 <setvbuf+0x1c>
80005b94:	fe b0 fc e2 	rcall	80005558 <__sinit>
80005b98:	4b d8       	lddpc	r8,80005c8c <setvbuf+0x110>
80005b9a:	10 37       	cp.w	r7,r8
80005b9c:	c0 51       	brne	80005ba6 <setvbuf+0x2a>
80005b9e:	4b b8       	lddpc	r8,80005c88 <setvbuf+0x10c>
80005ba0:	70 08       	ld.w	r8,r8[0x0]
80005ba2:	70 07       	ld.w	r7,r8[0x0]
80005ba4:	c0 e8       	rjmp	80005bc0 <setvbuf+0x44>
80005ba6:	4b b8       	lddpc	r8,80005c90 <setvbuf+0x114>
80005ba8:	10 37       	cp.w	r7,r8
80005baa:	c0 51       	brne	80005bb4 <setvbuf+0x38>
80005bac:	4b 78       	lddpc	r8,80005c88 <setvbuf+0x10c>
80005bae:	70 08       	ld.w	r8,r8[0x0]
80005bb0:	70 17       	ld.w	r7,r8[0x4]
80005bb2:	c0 78       	rjmp	80005bc0 <setvbuf+0x44>
80005bb4:	4b 88       	lddpc	r8,80005c94 <setvbuf+0x118>
80005bb6:	10 37       	cp.w	r7,r8
80005bb8:	c0 41       	brne	80005bc0 <setvbuf+0x44>
80005bba:	4b 48       	lddpc	r8,80005c88 <setvbuf+0x10c>
80005bbc:	70 08       	ld.w	r8,r8[0x0]
80005bbe:	70 27       	ld.w	r7,r8[0x8]
80005bc0:	58 23       	cp.w	r3,2
80005bc2:	5f b8       	srhi	r8
80005bc4:	f1 e5 13 f8 	or	r8,r8,r5>>0x1f
80005bc8:	c0 20       	breq	80005bcc <setvbuf+0x50>
80005bca:	dc 3a       	popm	r0-r7,pc,r12=-1
80005bcc:	4a f4       	lddpc	r4,80005c88 <setvbuf+0x10c>
80005bce:	0e 9b       	mov	r11,r7
80005bd0:	68 0c       	ld.w	r12,r4[0x0]
80005bd2:	fe b0 fb d5 	rcall	8000537c <_fflush_r>
80005bd6:	30 08       	mov	r8,0
80005bd8:	8f 68       	st.w	r7[0x18],r8
80005bda:	8f 18       	st.w	r7[0x4],r8
80005bdc:	8e 68       	ld.sh	r8,r7[0xc]
80005bde:	ed b8 00 07 	bld	r8,0x7
80005be2:	c0 51       	brne	80005bec <setvbuf+0x70>
80005be4:	68 0c       	ld.w	r12,r4[0x0]
80005be6:	6e 4b       	ld.w	r11,r7[0x10]
80005be8:	e0 a0 1a 36 	rcall	80009054 <_free_r>
80005bec:	8e 68       	ld.sh	r8,r7[0xc]
80005bee:	e0 18 ff 7c 	andl	r8,0xff7c
80005bf2:	ae 68       	st.h	r7[0xc],r8
80005bf4:	58 23       	cp.w	r3,2
80005bf6:	c0 31       	brne	80005bfc <setvbuf+0x80>
80005bf8:	30 0c       	mov	r12,0
80005bfa:	c1 38       	rjmp	80005c20 <setvbuf+0xa4>
80005bfc:	58 06       	cp.w	r6,0
80005bfe:	c2 11       	brne	80005c40 <setvbuf+0xc4>
80005c00:	e0 64 04 00 	mov	r4,1024
80005c04:	58 05       	cp.w	r5,0
80005c06:	e8 05 17 00 	moveq	r5,r4
80005c0a:	0a 9c       	mov	r12,r5
80005c0c:	fe b0 fd 48 	rcall	8000569c <malloc>
80005c10:	18 96       	mov	r6,r12
80005c12:	c1 41       	brne	80005c3a <setvbuf+0xbe>
80005c14:	08 9c       	mov	r12,r4
80005c16:	fe b0 fd 43 	rcall	8000569c <malloc>
80005c1a:	18 96       	mov	r6,r12
80005c1c:	c0 e1       	brne	80005c38 <setvbuf+0xbc>
80005c1e:	3f fc       	mov	r12,-1
80005c20:	8e 68       	ld.sh	r8,r7[0xc]
80005c22:	a1 b8       	sbr	r8,0x1
80005c24:	ae 68       	st.h	r7[0xc],r8
80005c26:	ee c8 ff b9 	sub	r8,r7,-71
80005c2a:	8f 48       	st.w	r7[0x10],r8
80005c2c:	8f 08       	st.w	r7[0x0],r8
80005c2e:	30 08       	mov	r8,0
80005c30:	8f 28       	st.w	r7[0x8],r8
80005c32:	30 18       	mov	r8,1
80005c34:	8f 58       	st.w	r7[0x14],r8
80005c36:	d8 32       	popm	r0-r7,pc
80005c38:	08 95       	mov	r5,r4
80005c3a:	8e 68       	ld.sh	r8,r7[0xc]
80005c3c:	a7 b8       	sbr	r8,0x7
80005c3e:	ae 68       	st.h	r7[0xc],r8
80005c40:	58 03       	cp.w	r3,0
80005c42:	c0 c0       	breq	80005c5a <setvbuf+0xde>
80005c44:	58 13       	cp.w	r3,1
80005c46:	c1 21       	brne	80005c6a <setvbuf+0xee>
80005c48:	8e 68       	ld.sh	r8,r7[0xc]
80005c4a:	a1 a8       	sbr	r8,0x0
80005c4c:	ae 68       	st.h	r7[0xc],r8
80005c4e:	ea 08 11 00 	rsub	r8,r5,0
80005c52:	58 06       	cp.w	r6,0
80005c54:	ec 08 17 00 	moveq	r8,r6
80005c58:	8f 68       	st.w	r7[0x18],r8
80005c5a:	48 c8       	lddpc	r8,80005c88 <setvbuf+0x10c>
80005c5c:	8f 46       	st.w	r7[0x10],r6
80005c5e:	70 09       	ld.w	r9,r8[0x0]
80005c60:	8f 06       	st.w	r7[0x0],r6
80005c62:	fe c8 07 ae 	sub	r8,pc,1966
80005c66:	8f 55       	st.w	r7[0x14],r5
80005c68:	93 a8       	st.w	r9[0x28],r8
80005c6a:	8e 68       	ld.sh	r8,r7[0xc]
80005c6c:	10 9c       	mov	r12,r8
80005c6e:	e2 1c 00 08 	andl	r12,0x8,COH
80005c72:	c0 90       	breq	80005c84 <setvbuf+0x108>
80005c74:	f1 d8 c0 02 	bfextu	r8,r8,0x0,0x2
80005c78:	30 0c       	mov	r12,0
80005c7a:	ea 08 17 00 	moveq	r8,r5
80005c7e:	f9 b8 01 00 	movne	r8,0
80005c82:	8f 28       	st.w	r7[0x8],r8
80005c84:	d8 32       	popm	r0-r7,pc
80005c86:	d7 03       	nop
80005c88:	00 00       	add	r0,r0
80005c8a:	01 1c       	ld.sh	r12,r0++
80005c8c:	80 00       	ld.sh	r0,r0[0x0]
80005c8e:	bc e8       	st.b	lr[0x6],r8
80005c90:	80 00       	ld.sh	r0,r0[0x0]
80005c92:	bd 08       	ld.d	r8,lr
80005c94:	80 00       	ld.sh	r0,r0[0x0]
80005c96:	bd 28       	st.d	lr++,r8

80005c98 <__sclose>:
80005c98:	d4 01       	pushm	lr
80005c9a:	96 7b       	ld.sh	r11,r11[0xe]
80005c9c:	e0 a0 12 8e 	rcall	800081b8 <_close_r>
80005ca0:	d8 02       	popm	pc
80005ca2:	d7 03       	nop

80005ca4 <__sseek>:
80005ca4:	d4 21       	pushm	r4-r7,lr
80005ca6:	16 97       	mov	r7,r11
80005ca8:	96 7b       	ld.sh	r11,r11[0xe]
80005caa:	e0 a0 1b e3 	rcall	80009470 <_lseek_r>
80005cae:	8e 68       	ld.sh	r8,r7[0xc]
80005cb0:	5b fc       	cp.w	r12,-1
80005cb2:	c0 41       	brne	80005cba <__sseek+0x16>
80005cb4:	ad c8       	cbr	r8,0xc
80005cb6:	ae 68       	st.h	r7[0xc],r8
80005cb8:	d8 22       	popm	r4-r7,pc
80005cba:	ad a8       	sbr	r8,0xc
80005cbc:	ef 4c 00 54 	st.w	r7[84],r12
80005cc0:	ae 68       	st.h	r7[0xc],r8
80005cc2:	d8 22       	popm	r4-r7,pc

80005cc4 <__swrite>:
80005cc4:	d4 21       	pushm	r4-r7,lr
80005cc6:	96 68       	ld.sh	r8,r11[0xc]
80005cc8:	16 97       	mov	r7,r11
80005cca:	14 94       	mov	r4,r10
80005ccc:	12 95       	mov	r5,r9
80005cce:	e2 18 01 00 	andl	r8,0x100,COH
80005cd2:	18 96       	mov	r6,r12
80005cd4:	c0 60       	breq	80005ce0 <__swrite+0x1c>
80005cd6:	30 29       	mov	r9,2
80005cd8:	30 0a       	mov	r10,0
80005cda:	96 7b       	ld.sh	r11,r11[0xe]
80005cdc:	e0 a0 1b ca 	rcall	80009470 <_lseek_r>
80005ce0:	8e 68       	ld.sh	r8,r7[0xc]
80005ce2:	ad c8       	cbr	r8,0xc
80005ce4:	0a 99       	mov	r9,r5
80005ce6:	08 9a       	mov	r10,r4
80005ce8:	8e 7b       	ld.sh	r11,r7[0xe]
80005cea:	0c 9c       	mov	r12,r6
80005cec:	ae 68       	st.h	r7[0xc],r8
80005cee:	e0 a0 11 27 	rcall	80007f3c <_write_r>
80005cf2:	d8 22       	popm	r4-r7,pc

80005cf4 <__sread>:
80005cf4:	d4 21       	pushm	r4-r7,lr
80005cf6:	16 97       	mov	r7,r11
80005cf8:	96 7b       	ld.sh	r11,r11[0xe]
80005cfa:	e0 a0 20 0d 	rcall	80009d14 <_read_r>
80005cfe:	c0 65       	brlt	80005d0a <__sread+0x16>
80005d00:	6f 58       	ld.w	r8,r7[0x54]
80005d02:	18 08       	add	r8,r12
80005d04:	ef 48 00 54 	st.w	r7[84],r8
80005d08:	d8 22       	popm	r4-r7,pc
80005d0a:	8e 68       	ld.sh	r8,r7[0xc]
80005d0c:	ad c8       	cbr	r8,0xc
80005d0e:	ae 68       	st.h	r7[0xc],r8
80005d10:	d8 22       	popm	r4-r7,pc
80005d12:	d7 03       	nop

80005d14 <get_arg>:
80005d14:	d4 31       	pushm	r0-r7,lr
80005d16:	20 6d       	sub	sp,24
80005d18:	fa cc ff c4 	sub	r12,sp,-60
80005d1c:	50 2b       	stdsp	sp[0x8],r11
80005d1e:	50 18       	stdsp	sp[0x4],r8
80005d20:	78 2b       	ld.w	r11,r12[0x8]
80005d22:	12 95       	mov	r5,r9
80005d24:	76 0e       	ld.w	lr,r11[0x0]
80005d26:	50 0b       	stdsp	sp[0x0],r11
80005d28:	58 0e       	cp.w	lr,0
80005d2a:	f4 0e 17 00 	moveq	lr,r10
80005d2e:	78 01       	ld.w	r1,r12[0x0]
80005d30:	40 2a       	lddsp	r10,sp[0x8]
80005d32:	78 10       	ld.w	r0,r12[0x4]
80005d34:	70 06       	ld.w	r6,r8[0x0]
80005d36:	50 5a       	stdsp	sp[0x14],r10
80005d38:	c2 f9       	rjmp	80005f96 <get_arg+0x282>
80005d3a:	2f fe       	sub	lr,-1
80005d3c:	30 09       	mov	r9,0
80005d3e:	1d 8a       	ld.ub	r10,lr[0x0]
80005d40:	32 5b       	mov	r11,37
80005d42:	f2 0a 18 00 	cp.b	r10,r9
80005d46:	5f 18       	srne	r8
80005d48:	f6 0a 18 00 	cp.b	r10,r11
80005d4c:	5f 19       	srne	r9
80005d4e:	12 68       	and	r8,r9
80005d50:	30 09       	mov	r9,0
80005d52:	f2 08 18 00 	cp.b	r8,r9
80005d56:	cf 21       	brne	80005d3a <get_arg+0x26>
80005d58:	58 0a       	cp.w	r10,0
80005d5a:	e0 80 01 2b 	breq	80005fb0 <get_arg+0x29c>
80005d5e:	30 04       	mov	r4,0
80005d60:	3f f8       	mov	r8,-1
80005d62:	08 93       	mov	r3,r4
80005d64:	50 48       	stdsp	sp[0x10],r8
80005d66:	08 92       	mov	r2,r4
80005d68:	08 99       	mov	r9,r4
80005d6a:	4d 2b       	lddpc	r11,80005eb0 <get_arg+0x19c>
80005d6c:	f2 09 00 38 	add	r8,r9,r9<<0x3
80005d70:	1c 97       	mov	r7,lr
80005d72:	0f 3a       	ld.ub	r10,r7++
80005d74:	f6 0a 07 09 	ld.ub	r9,r11[r10]
80005d78:	4c fb       	lddpc	r11,80005eb4 <get_arg+0x1a0>
80005d7a:	12 08       	add	r8,r9
80005d7c:	f6 08 07 09 	ld.ub	r9,r11[r8]
80005d80:	4c eb       	lddpc	r11,80005eb8 <get_arg+0x1a4>
80005d82:	f6 08 07 08 	ld.ub	r8,r11[r8]
80005d86:	50 38       	stdsp	sp[0xc],r8
80005d88:	20 19       	sub	r9,1
80005d8a:	58 79       	cp.w	r9,7
80005d8c:	e0 8b 00 fe 	brhi	80005f88 <get_arg+0x274>
80005d90:	4c b8       	lddpc	r8,80005ebc <get_arg+0x1a8>
80005d92:	f0 09 03 2f 	ld.w	pc,r8[r9<<0x2]
80005d96:	36 88       	mov	r8,104
80005d98:	f0 0a 18 00 	cp.b	r10,r8
80005d9c:	e0 80 00 f6 	breq	80005f88 <get_arg+0x274>
80005da0:	37 18       	mov	r8,113
80005da2:	f0 0a 18 00 	cp.b	r10,r8
80005da6:	c0 70       	breq	80005db4 <get_arg+0xa0>
80005da8:	34 c8       	mov	r8,76
80005daa:	f0 0a 18 00 	cp.b	r10,r8
80005dae:	c0 51       	brne	80005db8 <get_arg+0xa4>
80005db0:	a3 b3       	sbr	r3,0x3
80005db2:	ce b8       	rjmp	80005f88 <get_arg+0x274>
80005db4:	a5 b3       	sbr	r3,0x5
80005db6:	ce 98       	rjmp	80005f88 <get_arg+0x274>
80005db8:	0e 98       	mov	r8,r7
80005dba:	11 39       	ld.ub	r9,r8++
80005dbc:	06 9b       	mov	r11,r3
80005dbe:	36 ca       	mov	r10,108
80005dc0:	a5 ab       	sbr	r11,0x4
80005dc2:	f4 09 18 00 	cp.b	r9,r10
80005dc6:	ee 0e 17 10 	movne	lr,r7
80005dca:	f0 0e 17 00 	moveq	lr,r8
80005dce:	06 98       	mov	r8,r3
80005dd0:	a5 b8       	sbr	r8,0x5
80005dd2:	f4 09 18 00 	cp.b	r9,r10
80005dd6:	f6 03 17 10 	movne	r3,r11
80005dda:	f0 03 17 00 	moveq	r3,r8
80005dde:	cd 68       	rjmp	80005f8a <get_arg+0x276>
80005de0:	ed d6 c0 05 	bfextu	r6,r6,0x0,0x5
80005de4:	36 7b       	mov	r11,103
80005de6:	f6 0a 18 00 	cp.b	r10,r11
80005dea:	e0 8b 00 27 	brhi	80005e38 <get_arg+0x124>
80005dee:	36 58       	mov	r8,101
80005df0:	f0 0a 18 00 	cp.b	r10,r8
80005df4:	c4 82       	brcc	80005e84 <get_arg+0x170>
80005df6:	34 f8       	mov	r8,79
80005df8:	f0 0a 18 00 	cp.b	r10,r8
80005dfc:	c4 80       	breq	80005e8c <get_arg+0x178>
80005dfe:	e0 8b 00 0c 	brhi	80005e16 <get_arg+0x102>
80005e02:	34 58       	mov	r8,69
80005e04:	f0 0a 18 00 	cp.b	r10,r8
80005e08:	c3 e0       	breq	80005e84 <get_arg+0x170>
80005e0a:	34 78       	mov	r8,71
80005e0c:	f0 0a 18 00 	cp.b	r10,r8
80005e10:	c3 a0       	breq	80005e84 <get_arg+0x170>
80005e12:	34 48       	mov	r8,68
80005e14:	c0 88       	rjmp	80005e24 <get_arg+0x110>
80005e16:	35 88       	mov	r8,88
80005e18:	f0 0a 18 00 	cp.b	r10,r8
80005e1c:	c2 c0       	breq	80005e74 <get_arg+0x160>
80005e1e:	e0 8b 00 07 	brhi	80005e2c <get_arg+0x118>
80005e22:	35 58       	mov	r8,85
80005e24:	f0 0a 18 00 	cp.b	r10,r8
80005e28:	c3 51       	brne	80005e92 <get_arg+0x17e>
80005e2a:	c3 18       	rjmp	80005e8c <get_arg+0x178>
80005e2c:	36 38       	mov	r8,99
80005e2e:	f0 0a 18 00 	cp.b	r10,r8
80005e32:	c2 f0       	breq	80005e90 <get_arg+0x17c>
80005e34:	36 48       	mov	r8,100
80005e36:	c0 e8       	rjmp	80005e52 <get_arg+0x13e>
80005e38:	37 08       	mov	r8,112
80005e3a:	f0 0a 18 00 	cp.b	r10,r8
80005e3e:	c2 50       	breq	80005e88 <get_arg+0x174>
80005e40:	e0 8b 00 0d 	brhi	80005e5a <get_arg+0x146>
80005e44:	36 e8       	mov	r8,110
80005e46:	f0 0a 18 00 	cp.b	r10,r8
80005e4a:	c1 f0       	breq	80005e88 <get_arg+0x174>
80005e4c:	e0 8b 00 14 	brhi	80005e74 <get_arg+0x160>
80005e50:	36 98       	mov	r8,105
80005e52:	f0 0a 18 00 	cp.b	r10,r8
80005e56:	c1 e1       	brne	80005e92 <get_arg+0x17e>
80005e58:	c0 e8       	rjmp	80005e74 <get_arg+0x160>
80005e5a:	37 58       	mov	r8,117
80005e5c:	f0 0a 18 00 	cp.b	r10,r8
80005e60:	c0 a0       	breq	80005e74 <get_arg+0x160>
80005e62:	37 88       	mov	r8,120
80005e64:	f0 0a 18 00 	cp.b	r10,r8
80005e68:	c0 60       	breq	80005e74 <get_arg+0x160>
80005e6a:	37 38       	mov	r8,115
80005e6c:	f0 0a 18 00 	cp.b	r10,r8
80005e70:	c1 11       	brne	80005e92 <get_arg+0x17e>
80005e72:	c0 b8       	rjmp	80005e88 <get_arg+0x174>
80005e74:	ed b3 00 04 	bld	r3,0x4
80005e78:	c0 a0       	breq	80005e8c <get_arg+0x178>
80005e7a:	ed b3 00 05 	bld	r3,0x5
80005e7e:	c0 91       	brne	80005e90 <get_arg+0x17c>
80005e80:	30 22       	mov	r2,2
80005e82:	c0 88       	rjmp	80005e92 <get_arg+0x17e>
80005e84:	30 42       	mov	r2,4
80005e86:	c0 68       	rjmp	80005e92 <get_arg+0x17e>
80005e88:	30 32       	mov	r2,3
80005e8a:	c0 48       	rjmp	80005e92 <get_arg+0x17e>
80005e8c:	30 12       	mov	r2,1
80005e8e:	c0 28       	rjmp	80005e92 <get_arg+0x17e>
80005e90:	30 02       	mov	r2,0
80005e92:	40 4a       	lddsp	r10,sp[0x10]
80005e94:	5b fa       	cp.w	r10,-1
80005e96:	c0 40       	breq	80005e9e <get_arg+0x18a>
80005e98:	e0 0a 09 22 	st.w	r0[r10<<0x2],r2
80005e9c:	c7 68       	rjmp	80005f88 <get_arg+0x274>
80005e9e:	58 62       	cp.w	r2,6
80005ea0:	e0 8b 00 74 	brhi	80005f88 <get_arg+0x274>
80005ea4:	6a 09       	ld.w	r9,r5[0x0]
80005ea6:	ec ca ff ff 	sub	r10,r6,-1
80005eaa:	48 68       	lddpc	r8,80005ec0 <get_arg+0x1ac>
80005eac:	f0 02 03 2f 	ld.w	pc,r8[r2<<0x2]
80005eb0:	80 00       	ld.sh	r0,r0[0x0]
80005eb2:	c0 40       	breq	80005eba <get_arg+0x1a6>
80005eb4:	80 00       	ld.sh	r0,r0[0x0]
80005eb6:	bf 6c       	lsl	r12,0x1e
80005eb8:	80 00       	ld.sh	r0,r0[0x0]
80005eba:	be f0       	st.b	pc[0x7],r0
80005ebc:	80 00       	ld.sh	r0,r0[0x0]
80005ebe:	bd 50       	asr	r0,0x1d
80005ec0:	80 00       	ld.sh	r0,r0[0x0]
80005ec2:	bd 70       	lsl	r0,0x1d
80005ec4:	f2 c8 ff f8 	sub	r8,r9,-8
80005ec8:	8b 08       	st.w	r5[0x0],r8
80005eca:	f2 e8 00 00 	ld.d	r8,r9[0]
80005ece:	e2 06 08 38 	st.d	r1[r6<<0x3],r8
80005ed2:	c0 f8       	rjmp	80005ef0 <get_arg+0x1dc>
80005ed4:	f2 c8 ff fc 	sub	r8,r9,-4
80005ed8:	8b 08       	st.w	r5[0x0],r8
80005eda:	72 08       	ld.w	r8,r9[0x0]
80005edc:	e2 06 09 38 	st.w	r1[r6<<0x3],r8
80005ee0:	c0 88       	rjmp	80005ef0 <get_arg+0x1dc>
80005ee2:	f2 c8 ff f8 	sub	r8,r9,-8
80005ee6:	8b 08       	st.w	r5[0x0],r8
80005ee8:	f2 e8 00 00 	ld.d	r8,r9[0]
80005eec:	e2 06 08 38 	st.d	r1[r6<<0x3],r8
80005ef0:	0e 9e       	mov	lr,r7
80005ef2:	14 96       	mov	r6,r10
80005ef4:	c4 b8       	rjmp	80005f8a <get_arg+0x276>
80005ef6:	60 08       	ld.w	r8,r0[0x0]
80005ef8:	5b f8       	cp.w	r8,-1
80005efa:	c0 71       	brne	80005f08 <get_arg+0x1f4>
80005efc:	e0 6a 00 80 	mov	r10,128
80005f00:	30 0b       	mov	r11,0
80005f02:	00 9c       	mov	r12,r0
80005f04:	fe b0 fd fe 	rcall	80005b00 <memset>
80005f08:	e8 cb 00 01 	sub	r11,r4,1
80005f0c:	40 5a       	lddsp	r10,sp[0x14]
80005f0e:	0e 9e       	mov	lr,r7
80005f10:	f4 0b 0c 4a 	max	r10,r10,r11
80005f14:	50 4b       	stdsp	sp[0x10],r11
80005f16:	50 5a       	stdsp	sp[0x14],r10
80005f18:	c3 98       	rjmp	80005f8a <get_arg+0x276>
80005f1a:	60 08       	ld.w	r8,r0[0x0]
80005f1c:	5b f8       	cp.w	r8,-1
80005f1e:	c0 71       	brne	80005f2c <get_arg+0x218>
80005f20:	e0 6a 00 80 	mov	r10,128
80005f24:	30 0b       	mov	r11,0
80005f26:	00 9c       	mov	r12,r0
80005f28:	fe b0 fd ec 	rcall	80005b00 <memset>
80005f2c:	20 14       	sub	r4,1
80005f2e:	40 58       	lddsp	r8,sp[0x14]
80005f30:	30 09       	mov	r9,0
80005f32:	f0 04 0c 48 	max	r8,r8,r4
80005f36:	0e 9e       	mov	lr,r7
80005f38:	e0 04 09 29 	st.w	r0[r4<<0x2],r9
80005f3c:	50 58       	stdsp	sp[0x14],r8
80005f3e:	c2 68       	rjmp	80005f8a <get_arg+0x276>
80005f40:	1c 97       	mov	r7,lr
80005f42:	6a 08       	ld.w	r8,r5[0x0]
80005f44:	f0 c9 ff fc 	sub	r9,r8,-4
80005f48:	8b 09       	st.w	r5[0x0],r9
80005f4a:	70 08       	ld.w	r8,r8[0x0]
80005f4c:	0e 9e       	mov	lr,r7
80005f4e:	e2 06 09 38 	st.w	r1[r6<<0x3],r8
80005f52:	2f f6       	sub	r6,-1
80005f54:	c1 b8       	rjmp	80005f8a <get_arg+0x276>
80005f56:	f4 c4 00 30 	sub	r4,r10,48
80005f5a:	c0 68       	rjmp	80005f66 <get_arg+0x252>
80005f5c:	e8 04 00 28 	add	r8,r4,r4<<0x2
80005f60:	2f f7       	sub	r7,-1
80005f62:	f2 08 00 14 	add	r4,r9,r8<<0x1
80005f66:	0f 88       	ld.ub	r8,r7[0x0]
80005f68:	58 08       	cp.w	r8,0
80005f6a:	c0 f0       	breq	80005f88 <get_arg+0x274>
80005f6c:	f0 c9 00 30 	sub	r9,r8,48
80005f70:	58 99       	cp.w	r9,9
80005f72:	fe 98 ff f5 	brls	80005f5c <get_arg+0x248>
80005f76:	c0 98       	rjmp	80005f88 <get_arg+0x274>
80005f78:	2f f7       	sub	r7,-1
80005f7a:	0f 88       	ld.ub	r8,r7[0x0]
80005f7c:	58 08       	cp.w	r8,0
80005f7e:	c0 50       	breq	80005f88 <get_arg+0x274>
80005f80:	23 08       	sub	r8,48
80005f82:	58 98       	cp.w	r8,9
80005f84:	fe 98 ff fa 	brls	80005f78 <get_arg+0x264>
80005f88:	0e 9e       	mov	lr,r7
80005f8a:	40 39       	lddsp	r9,sp[0xc]
80005f8c:	30 b8       	mov	r8,11
80005f8e:	f0 09 18 00 	cp.b	r9,r8
80005f92:	fe 91 fe ec 	brne	80005d6a <get_arg+0x56>
80005f96:	40 2b       	lddsp	r11,sp[0x8]
80005f98:	1d 88       	ld.ub	r8,lr[0x0]
80005f9a:	0c 3b       	cp.w	r11,r6
80005f9c:	5f 49       	srge	r9
80005f9e:	30 0a       	mov	r10,0
80005fa0:	f4 08 18 00 	cp.b	r8,r10
80005fa4:	5f 18       	srne	r8
80005fa6:	12 68       	and	r8,r9
80005fa8:	f4 08 18 00 	cp.b	r8,r10
80005fac:	fe 91 fe c8 	brne	80005d3c <get_arg+0x28>
80005fb0:	40 2a       	lddsp	r10,sp[0x8]
80005fb2:	0c 9b       	mov	r11,r6
80005fb4:	e0 06 00 2c 	add	r12,r0,r6<<0x2
80005fb8:	1d 89       	ld.ub	r9,lr[0x0]
80005fba:	30 08       	mov	r8,0
80005fbc:	40 56       	lddsp	r6,sp[0x14]
80005fbe:	f0 09 18 00 	cp.b	r9,r8
80005fc2:	ec 07 17 00 	moveq	r7,r6
80005fc6:	f4 07 17 10 	movne	r7,r10
80005fca:	e2 0b 00 3a 	add	r10,r1,r11<<0x3
80005fce:	c2 a8       	rjmp	80006022 <get_arg+0x30e>
80005fd0:	78 08       	ld.w	r8,r12[0x0]
80005fd2:	58 38       	cp.w	r8,3
80005fd4:	c1 e0       	breq	80006010 <get_arg+0x2fc>
80005fd6:	e0 89 00 07 	brgt	80005fe4 <get_arg+0x2d0>
80005fda:	58 18       	cp.w	r8,1
80005fdc:	c1 a0       	breq	80006010 <get_arg+0x2fc>
80005fde:	58 28       	cp.w	r8,2
80005fe0:	c1 81       	brne	80006010 <get_arg+0x2fc>
80005fe2:	c0 58       	rjmp	80005fec <get_arg+0x2d8>
80005fe4:	58 58       	cp.w	r8,5
80005fe6:	c0 c0       	breq	80005ffe <get_arg+0x2ea>
80005fe8:	c0 b5       	brlt	80005ffe <get_arg+0x2ea>
80005fea:	c1 38       	rjmp	80006010 <get_arg+0x2fc>
80005fec:	6a 09       	ld.w	r9,r5[0x0]
80005fee:	f2 c8 ff f8 	sub	r8,r9,-8
80005ff2:	8b 08       	st.w	r5[0x0],r8
80005ff4:	f2 e8 00 00 	ld.d	r8,r9[0]
80005ff8:	f4 e9 00 00 	st.d	r10[0],r8
80005ffc:	c1 08       	rjmp	8000601c <get_arg+0x308>
80005ffe:	6a 09       	ld.w	r9,r5[0x0]
80006000:	f2 c8 ff f8 	sub	r8,r9,-8
80006004:	8b 08       	st.w	r5[0x0],r8
80006006:	f2 e8 00 00 	ld.d	r8,r9[0]
8000600a:	f4 e9 00 00 	st.d	r10[0],r8
8000600e:	c0 78       	rjmp	8000601c <get_arg+0x308>
80006010:	6a 08       	ld.w	r8,r5[0x0]
80006012:	f0 c9 ff fc 	sub	r9,r8,-4
80006016:	8b 09       	st.w	r5[0x0],r9
80006018:	70 08       	ld.w	r8,r8[0x0]
8000601a:	95 08       	st.w	r10[0x0],r8
8000601c:	2f fb       	sub	r11,-1
8000601e:	2f 8a       	sub	r10,-8
80006020:	2f cc       	sub	r12,-4
80006022:	0e 3b       	cp.w	r11,r7
80006024:	fe 9a ff d6 	brle	80005fd0 <get_arg+0x2bc>
80006028:	40 19       	lddsp	r9,sp[0x4]
8000602a:	40 08       	lddsp	r8,sp[0x0]
8000602c:	40 26       	lddsp	r6,sp[0x8]
8000602e:	93 0b       	st.w	r9[0x0],r11
80006030:	91 0e       	st.w	r8[0x0],lr
80006032:	e2 06 00 3c 	add	r12,r1,r6<<0x3
80006036:	2f ad       	sub	sp,-24
80006038:	d8 32       	popm	r0-r7,pc
8000603a:	d7 03       	nop

8000603c <__sprint_r>:
8000603c:	d4 21       	pushm	r4-r7,lr
8000603e:	14 97       	mov	r7,r10
80006040:	74 28       	ld.w	r8,r10[0x8]
80006042:	58 08       	cp.w	r8,0
80006044:	c0 41       	brne	8000604c <__sprint_r+0x10>
80006046:	95 18       	st.w	r10[0x4],r8
80006048:	10 9c       	mov	r12,r8
8000604a:	d8 22       	popm	r4-r7,pc
8000604c:	e0 a0 18 ce 	rcall	800091e8 <__sfvwrite_r>
80006050:	30 08       	mov	r8,0
80006052:	8f 18       	st.w	r7[0x4],r8
80006054:	8f 28       	st.w	r7[0x8],r8
80006056:	d8 22       	popm	r4-r7,pc

80006058 <_vfprintf_r>:
80006058:	d4 31       	pushm	r0-r7,lr
8000605a:	fa cd 06 cc 	sub	sp,sp,1740
8000605e:	51 49       	stdsp	sp[0x50],r9
80006060:	50 4b       	stdsp	sp[0x10],r11
80006062:	14 97       	mov	r7,r10
80006064:	50 5c       	stdsp	sp[0x14],r12
80006066:	e0 a0 1a 01 	rcall	80009468 <_localeconv_r>
8000606a:	78 0c       	ld.w	r12,r12[0x0]
8000606c:	50 dc       	stdsp	sp[0x34],r12
8000606e:	40 5c       	lddsp	r12,sp[0x14]
80006070:	58 0c       	cp.w	r12,0
80006072:	c0 60       	breq	8000607e <_vfprintf_r+0x26>
80006074:	78 68       	ld.w	r8,r12[0x18]
80006076:	58 08       	cp.w	r8,0
80006078:	c0 31       	brne	8000607e <_vfprintf_r+0x26>
8000607a:	fe b0 fa 6f 	rcall	80005558 <__sinit>
8000607e:	4c 38       	lddpc	r8,80006188 <_vfprintf_r+0x130>
80006080:	40 4b       	lddsp	r11,sp[0x10]
80006082:	10 3b       	cp.w	r11,r8
80006084:	c0 51       	brne	8000608e <_vfprintf_r+0x36>
80006086:	40 5a       	lddsp	r10,sp[0x14]
80006088:	74 0a       	ld.w	r10,r10[0x0]
8000608a:	50 4a       	stdsp	sp[0x10],r10
8000608c:	c1 08       	rjmp	800060ac <_vfprintf_r+0x54>
8000608e:	4c 08       	lddpc	r8,8000618c <_vfprintf_r+0x134>
80006090:	40 49       	lddsp	r9,sp[0x10]
80006092:	10 39       	cp.w	r9,r8
80006094:	c0 51       	brne	8000609e <_vfprintf_r+0x46>
80006096:	40 58       	lddsp	r8,sp[0x14]
80006098:	70 18       	ld.w	r8,r8[0x4]
8000609a:	50 48       	stdsp	sp[0x10],r8
8000609c:	c0 88       	rjmp	800060ac <_vfprintf_r+0x54>
8000609e:	4b d8       	lddpc	r8,80006190 <_vfprintf_r+0x138>
800060a0:	40 4c       	lddsp	r12,sp[0x10]
800060a2:	10 3c       	cp.w	r12,r8
800060a4:	c0 41       	brne	800060ac <_vfprintf_r+0x54>
800060a6:	40 5b       	lddsp	r11,sp[0x14]
800060a8:	76 2b       	ld.w	r11,r11[0x8]
800060aa:	50 4b       	stdsp	sp[0x10],r11
800060ac:	40 4a       	lddsp	r10,sp[0x10]
800060ae:	94 68       	ld.sh	r8,r10[0xc]
800060b0:	ed b8 00 03 	bld	r8,0x3
800060b4:	c0 41       	brne	800060bc <_vfprintf_r+0x64>
800060b6:	74 48       	ld.w	r8,r10[0x10]
800060b8:	58 08       	cp.w	r8,0
800060ba:	c0 71       	brne	800060c8 <_vfprintf_r+0x70>
800060bc:	40 4b       	lddsp	r11,sp[0x10]
800060be:	40 5c       	lddsp	r12,sp[0x14]
800060c0:	e0 a0 0f 52 	rcall	80007f64 <__swsetup_r>
800060c4:	e0 81 0f 33 	brne	80007f2a <_vfprintf_r+0x1ed2>
800060c8:	40 49       	lddsp	r9,sp[0x10]
800060ca:	92 6a       	ld.sh	r10,r9[0xc]
800060cc:	14 98       	mov	r8,r10
800060ce:	e2 18 00 1a 	andl	r8,0x1a,COH
800060d2:	58 a8       	cp.w	r8,10
800060d4:	c3 e1       	brne	80006150 <_vfprintf_r+0xf8>
800060d6:	92 7b       	ld.sh	r11,r9[0xe]
800060d8:	30 08       	mov	r8,0
800060da:	f0 0b 19 00 	cp.h	r11,r8
800060de:	c3 95       	brlt	80006150 <_vfprintf_r+0xf8>
800060e0:	40 4c       	lddsp	r12,sp[0x10]
800060e2:	78 88       	ld.w	r8,r12[0x20]
800060e4:	fb 48 05 f4 	st.w	sp[1524],r8
800060e8:	78 a8       	ld.w	r8,r12[0x28]
800060ea:	fb 48 05 fc 	st.w	sp[1532],r8
800060ee:	fa c8 ff ac 	sub	r8,sp,-84
800060f2:	fb 48 05 e4 	st.w	sp[1508],r8
800060f6:	fb 48 05 d4 	st.w	sp[1492],r8
800060fa:	e0 68 04 00 	mov	r8,1024
800060fe:	a1 da       	cbr	r10,0x1
80006100:	fb 48 05 e8 	st.w	sp[1512],r8
80006104:	fb 48 05 dc 	st.w	sp[1500],r8
80006108:	30 08       	mov	r8,0
8000610a:	fb 5b 05 e2 	st.h	sp[1506],r11
8000610e:	fb 5a 05 e0 	st.h	sp[1504],r10
80006112:	41 49       	lddsp	r9,sp[0x50]
80006114:	0e 9a       	mov	r10,r7
80006116:	fb 48 05 ec 	st.w	sp[1516],r8
8000611a:	fa c7 fa 2c 	sub	r7,sp,-1492
8000611e:	40 5c       	lddsp	r12,sp[0x14]
80006120:	0e 9b       	mov	r11,r7
80006122:	c9 bf       	rcall	80006058 <_vfprintf_r>
80006124:	50 ac       	stdsp	sp[0x28],r12
80006126:	c0 95       	brlt	80006138 <_vfprintf_r+0xe0>
80006128:	0e 9b       	mov	r11,r7
8000612a:	40 5c       	lddsp	r12,sp[0x14]
8000612c:	fe b0 f9 28 	rcall	8000537c <_fflush_r>
80006130:	40 ab       	lddsp	r11,sp[0x28]
80006132:	f9 bb 01 ff 	movne	r11,-1
80006136:	50 ab       	stdsp	sp[0x28],r11
80006138:	fb 08 05 e0 	ld.sh	r8,sp[1504]
8000613c:	ed b8 00 06 	bld	r8,0x6
80006140:	e0 81 0e f7 	brne	80007f2e <_vfprintf_r+0x1ed6>
80006144:	40 4a       	lddsp	r10,sp[0x10]
80006146:	94 68       	ld.sh	r8,r10[0xc]
80006148:	a7 a8       	sbr	r8,0x6
8000614a:	b4 68       	st.h	r10[0xc],r8
8000614c:	e0 8f 0e f1 	bral	80007f2e <_vfprintf_r+0x1ed6>
80006150:	30 08       	mov	r8,0
80006152:	10 90       	mov	r0,r8
80006154:	fb 48 06 a0 	st.w	sp[1696],r8
80006158:	fb 48 06 9c 	st.w	sp[1692],r8
8000615c:	fb 48 06 c0 	st.w	sp[1728],r8
80006160:	fb 48 06 c4 	st.w	sp[1732],r8
80006164:	fa c8 f9 d0 	sub	r8,sp,-1584
80006168:	51 37       	stdsp	sp[0x4c],r7
8000616a:	fb 48 06 98 	st.w	sp[1688],r8
8000616e:	10 91       	mov	r1,r8
80006170:	50 10       	stdsp	sp[0x4],r0
80006172:	3f f8       	mov	r8,-1
80006174:	50 00       	stdsp	sp[0x0],r0
80006176:	fb 48 05 54 	st.w	sp[1364],r8
8000617a:	50 a0       	stdsp	sp[0x28],r0
8000617c:	50 f0       	stdsp	sp[0x3c],r0
8000617e:	51 20       	stdsp	sp[0x48],r0
80006180:	51 00       	stdsp	sp[0x40],r0
80006182:	41 33       	lddsp	r3,sp[0x4c]
80006184:	32 5a       	mov	r10,37
80006186:	c0 88       	rjmp	80006196 <_vfprintf_r+0x13e>
80006188:	80 00       	ld.sh	r0,r0[0x0]
8000618a:	bc e8       	st.b	lr[0x6],r8
8000618c:	80 00       	ld.sh	r0,r0[0x0]
8000618e:	bd 08       	ld.d	r8,lr
80006190:	80 00       	ld.sh	r0,r0[0x0]
80006192:	bd 28       	st.d	lr++,r8
80006194:	2f f3       	sub	r3,-1
80006196:	07 88       	ld.ub	r8,r3[0x0]
80006198:	30 0c       	mov	r12,0
8000619a:	f4 08 18 00 	cp.b	r8,r10
8000619e:	5f 19       	srne	r9
800061a0:	f8 08 18 00 	cp.b	r8,r12
800061a4:	5f 18       	srne	r8
800061a6:	12 68       	and	r8,r9
800061a8:	f8 08 18 00 	cp.b	r8,r12
800061ac:	cf 41       	brne	80006194 <_vfprintf_r+0x13c>
800061ae:	41 3b       	lddsp	r11,sp[0x4c]
800061b0:	e6 0b 01 06 	sub	r6,r3,r11
800061b4:	c1 e0       	breq	800061f0 <_vfprintf_r+0x198>
800061b6:	fa f8 06 a0 	ld.w	r8,sp[1696]
800061ba:	0c 08       	add	r8,r6
800061bc:	83 0b       	st.w	r1[0x0],r11
800061be:	fb 48 06 a0 	st.w	sp[1696],r8
800061c2:	83 16       	st.w	r1[0x4],r6
800061c4:	fa f8 06 9c 	ld.w	r8,sp[1692]
800061c8:	2f f8       	sub	r8,-1
800061ca:	fb 48 06 9c 	st.w	sp[1692],r8
800061ce:	58 78       	cp.w	r8,7
800061d0:	e0 89 00 04 	brgt	800061d8 <_vfprintf_r+0x180>
800061d4:	2f 81       	sub	r1,-8
800061d6:	c0 a8       	rjmp	800061ea <_vfprintf_r+0x192>
800061d8:	fa ca f9 68 	sub	r10,sp,-1688
800061dc:	40 4b       	lddsp	r11,sp[0x10]
800061de:	40 5c       	lddsp	r12,sp[0x14]
800061e0:	c2 ef       	rcall	8000603c <__sprint_r>
800061e2:	e0 81 0e 9f 	brne	80007f20 <_vfprintf_r+0x1ec8>
800061e6:	fa c1 f9 d0 	sub	r1,sp,-1584
800061ea:	40 aa       	lddsp	r10,sp[0x28]
800061ec:	0c 0a       	add	r10,r6
800061ee:	50 aa       	stdsp	sp[0x28],r10
800061f0:	07 88       	ld.ub	r8,r3[0x0]
800061f2:	30 09       	mov	r9,0
800061f4:	f2 08 18 00 	cp.b	r8,r9
800061f8:	e0 80 0e 86 	breq	80007f04 <_vfprintf_r+0x1eac>
800061fc:	30 08       	mov	r8,0
800061fe:	3f fc       	mov	r12,-1
80006200:	e6 cb ff ff 	sub	r11,r3,-1
80006204:	fb 69 06 cb 	st.b	sp[1739],r9
80006208:	50 98       	stdsp	sp[0x24],r8
8000620a:	50 cc       	stdsp	sp[0x30],r12
8000620c:	51 3b       	stdsp	sp[0x4c],r11
8000620e:	00 97       	mov	r7,r0
80006210:	10 92       	mov	r2,r8
80006212:	50 b8       	stdsp	sp[0x2c],r8
80006214:	c0 68       	rjmp	80006220 <_vfprintf_r+0x1c8>
80006216:	3f fa       	mov	r10,-1
80006218:	51 36       	stdsp	sp[0x4c],r6
8000621a:	50 ca       	stdsp	sp[0x30],r10
8000621c:	c0 28       	rjmp	80006220 <_vfprintf_r+0x1c8>
8000621e:	30 02       	mov	r2,0
80006220:	41 39       	lddsp	r9,sp[0x4c]
80006222:	13 38       	ld.ub	r8,r9++
80006224:	51 39       	stdsp	sp[0x4c],r9
80006226:	50 88       	stdsp	sp[0x20],r8
80006228:	c0 28       	rjmp	8000622c <_vfprintf_r+0x1d4>
8000622a:	50 b9       	stdsp	sp[0x2c],r9
8000622c:	40 88       	lddsp	r8,sp[0x20]
8000622e:	22 08       	sub	r8,32
80006230:	e0 48 00 58 	cp.w	r8,88
80006234:	e0 8b 09 f4 	brhi	8000761c <_vfprintf_r+0x15c4>
80006238:	4c ac       	lddpc	r12,80006360 <_vfprintf_r+0x308>
8000623a:	f8 08 03 2f 	ld.w	pc,r12[r8<<0x2]
8000623e:	00 99       	mov	r9,r0
80006240:	4c 9b       	lddpc	r11,80006364 <_vfprintf_r+0x30c>
80006242:	e0 8f 08 57 	bral	800072f0 <_vfprintf_r+0x1298>
80006246:	fb 38 06 cb 	ld.ub	r8,sp[1739]
8000624a:	30 0a       	mov	r10,0
8000624c:	f4 08 18 00 	cp.b	r8,r10
80006250:	ce 81       	brne	80006220 <_vfprintf_r+0x1c8>
80006252:	32 08       	mov	r8,32
80006254:	c7 a8       	rjmp	80006348 <_vfprintf_r+0x2f0>
80006256:	40 99       	lddsp	r9,sp[0x24]
80006258:	a1 a9       	sbr	r9,0x0
8000625a:	c3 19       	rjmp	800064bc <_vfprintf_r+0x464>
8000625c:	41 38       	lddsp	r8,sp[0x4c]
8000625e:	11 89       	ld.ub	r9,r8[0x0]
80006260:	f2 c8 00 30 	sub	r8,r9,48
80006264:	58 98       	cp.w	r8,9
80006266:	e0 8b 00 1e 	brhi	800062a2 <_vfprintf_r+0x24a>
8000626a:	41 3a       	lddsp	r10,sp[0x4c]
8000626c:	30 0b       	mov	r11,0
8000626e:	2f fa       	sub	r10,-1
80006270:	f2 c8 00 30 	sub	r8,r9,48
80006274:	f6 0b 00 29 	add	r9,r11,r11<<0x2
80006278:	f0 09 00 1b 	add	r11,r8,r9<<0x1
8000627c:	15 39       	ld.ub	r9,r10++
8000627e:	f2 c8 00 30 	sub	r8,r9,48
80006282:	58 98       	cp.w	r8,9
80006284:	fe 98 ff f6 	brls	80006270 <_vfprintf_r+0x218>
80006288:	e0 49 00 24 	cp.w	r9,36
8000628c:	cc 91       	brne	8000621e <_vfprintf_r+0x1c6>
8000628e:	e0 4b 00 20 	cp.w	r11,32
80006292:	e0 89 0e 47 	brgt	80007f20 <_vfprintf_r+0x1ec8>
80006296:	20 1b       	sub	r11,1
80006298:	fa f8 06 c4 	ld.w	r8,sp[1732]
8000629c:	10 3b       	cp.w	r11,r8
8000629e:	c0 95       	brlt	800062b0 <_vfprintf_r+0x258>
800062a0:	c0 e8       	rjmp	800062bc <_vfprintf_r+0x264>
800062a2:	fa f9 06 c4 	ld.w	r9,sp[1732]
800062a6:	e0 ca ff ff 	sub	r10,r0,-1
800062aa:	12 30       	cp.w	r0,r9
800062ac:	c1 e5       	brlt	800062e8 <_vfprintf_r+0x290>
800062ae:	c2 68       	rjmp	800062fa <_vfprintf_r+0x2a2>
800062b0:	fa cc f9 34 	sub	r12,sp,-1740
800062b4:	51 3a       	stdsp	sp[0x4c],r10
800062b6:	f8 0b 00 38 	add	r8,r12,r11<<0x3
800062ba:	c1 c8       	rjmp	800062f2 <_vfprintf_r+0x29a>
800062bc:	fa c8 f9 40 	sub	r8,sp,-1728
800062c0:	51 3a       	stdsp	sp[0x4c],r10
800062c2:	1a d8       	st.w	--sp,r8
800062c4:	fa c8 fa a8 	sub	r8,sp,-1368
800062c8:	1a d8       	st.w	--sp,r8
800062ca:	fa c8 fb a4 	sub	r8,sp,-1116
800062ce:	06 9a       	mov	r10,r3
800062d0:	1a d8       	st.w	--sp,r8
800062d2:	fa c8 f9 30 	sub	r8,sp,-1744
800062d6:	fa c9 ff a4 	sub	r9,sp,-92
800062da:	40 8c       	lddsp	r12,sp[0x20]
800062dc:	fe b0 fd 1c 	rcall	80005d14 <get_arg>
800062e0:	2f dd       	sub	sp,-12
800062e2:	78 0c       	ld.w	r12,r12[0x0]
800062e4:	50 bc       	stdsp	sp[0x2c],r12
800062e6:	c2 68       	rjmp	80006332 <_vfprintf_r+0x2da>
800062e8:	fa cb f9 34 	sub	r11,sp,-1740
800062ec:	14 90       	mov	r0,r10
800062ee:	f6 07 00 38 	add	r8,r11,r7<<0x3
800062f2:	f0 f8 fd 88 	ld.w	r8,r8[-632]
800062f6:	50 b8       	stdsp	sp[0x2c],r8
800062f8:	c1 d8       	rjmp	80006332 <_vfprintf_r+0x2da>
800062fa:	41 4c       	lddsp	r12,sp[0x50]
800062fc:	59 f9       	cp.w	r9,31
800062fe:	e0 89 00 14 	brgt	80006326 <_vfprintf_r+0x2ce>
80006302:	f8 c8 ff fc 	sub	r8,r12,-4
80006306:	78 0c       	ld.w	r12,r12[0x0]
80006308:	51 48       	stdsp	sp[0x50],r8
8000630a:	50 bc       	stdsp	sp[0x2c],r12
8000630c:	fa cc f9 34 	sub	r12,sp,-1740
80006310:	40 bb       	lddsp	r11,sp[0x2c]
80006312:	f8 09 00 38 	add	r8,r12,r9<<0x3
80006316:	f1 4b fd 88 	st.w	r8[-632],r11
8000631a:	14 90       	mov	r0,r10
8000631c:	f2 c8 ff ff 	sub	r8,r9,-1
80006320:	fb 48 06 c4 	st.w	sp[1732],r8
80006324:	c0 78       	rjmp	80006332 <_vfprintf_r+0x2da>
80006326:	78 09       	ld.w	r9,r12[0x0]
80006328:	f8 c8 ff fc 	sub	r8,r12,-4
8000632c:	50 b9       	stdsp	sp[0x2c],r9
8000632e:	14 90       	mov	r0,r10
80006330:	51 48       	stdsp	sp[0x50],r8
80006332:	40 b8       	lddsp	r8,sp[0x2c]
80006334:	58 08       	cp.w	r8,0
80006336:	fe 94 ff 75 	brge	80006220 <_vfprintf_r+0x1c8>
8000633a:	5c 38       	neg	r8
8000633c:	50 b8       	stdsp	sp[0x2c],r8
8000633e:	40 9c       	lddsp	r12,sp[0x24]
80006340:	a3 ac       	sbr	r12,0x2
80006342:	50 9c       	stdsp	sp[0x24],r12
80006344:	c6 eb       	rjmp	80006220 <_vfprintf_r+0x1c8>
80006346:	32 b8       	mov	r8,43
80006348:	fb 68 06 cb 	st.b	sp[1739],r8
8000634c:	c6 ab       	rjmp	80006220 <_vfprintf_r+0x1c8>
8000634e:	41 3b       	lddsp	r11,sp[0x4c]
80006350:	17 3a       	ld.ub	r10,r11++
80006352:	51 3b       	stdsp	sp[0x4c],r11
80006354:	50 8a       	stdsp	sp[0x20],r10
80006356:	e0 4a 00 2a 	cp.w	r10,42
8000635a:	c0 70       	breq	80006368 <_vfprintf_r+0x310>
8000635c:	30 0c       	mov	r12,0
8000635e:	c8 08       	rjmp	8000645e <_vfprintf_r+0x406>
80006360:	80 00       	ld.sh	r0,r0[0x0]
80006362:	bd 8c       	lsr	r12,0x1c
80006364:	80 00       	ld.sh	r0,r0[0x0]
80006366:	bf d8       	cbr	r8,0x1f
80006368:	41 38       	lddsp	r8,sp[0x4c]
8000636a:	11 89       	ld.ub	r9,r8[0x0]
8000636c:	f2 c8 00 30 	sub	r8,r9,48
80006370:	58 98       	cp.w	r8,9
80006372:	e0 8b 00 1f 	brhi	800063b0 <_vfprintf_r+0x358>
80006376:	41 36       	lddsp	r6,sp[0x4c]
80006378:	30 0b       	mov	r11,0
8000637a:	2f f6       	sub	r6,-1
8000637c:	f2 c8 00 30 	sub	r8,r9,48
80006380:	f6 0b 00 29 	add	r9,r11,r11<<0x2
80006384:	f0 09 00 1b 	add	r11,r8,r9<<0x1
80006388:	0d 39       	ld.ub	r9,r6++
8000638a:	f2 c8 00 30 	sub	r8,r9,48
8000638e:	58 98       	cp.w	r8,9
80006390:	fe 98 ff f6 	brls	8000637c <_vfprintf_r+0x324>
80006394:	e0 49 00 24 	cp.w	r9,36
80006398:	fe 91 ff 43 	brne	8000621e <_vfprintf_r+0x1c6>
8000639c:	e0 4b 00 20 	cp.w	r11,32
800063a0:	e0 89 0d c0 	brgt	80007f20 <_vfprintf_r+0x1ec8>
800063a4:	20 1b       	sub	r11,1
800063a6:	fa f8 06 c4 	ld.w	r8,sp[1732]
800063aa:	10 3b       	cp.w	r11,r8
800063ac:	c0 95       	brlt	800063be <_vfprintf_r+0x366>
800063ae:	c0 d8       	rjmp	800063c8 <_vfprintf_r+0x370>
800063b0:	fa f9 06 c4 	ld.w	r9,sp[1732]
800063b4:	e0 ca ff ff 	sub	r10,r0,-1
800063b8:	12 30       	cp.w	r0,r9
800063ba:	c1 c5       	brlt	800063f2 <_vfprintf_r+0x39a>
800063bc:	c2 58       	rjmp	80006406 <_vfprintf_r+0x3ae>
800063be:	fa cc f9 34 	sub	r12,sp,-1740
800063c2:	f8 0b 00 38 	add	r8,r12,r11<<0x3
800063c6:	c1 c8       	rjmp	800063fe <_vfprintf_r+0x3a6>
800063c8:	fa c8 f9 40 	sub	r8,sp,-1728
800063cc:	1a d8       	st.w	--sp,r8
800063ce:	fa c8 fa a8 	sub	r8,sp,-1368
800063d2:	1a d8       	st.w	--sp,r8
800063d4:	fa c8 fb a4 	sub	r8,sp,-1116
800063d8:	06 9a       	mov	r10,r3
800063da:	1a d8       	st.w	--sp,r8
800063dc:	fa c8 f9 30 	sub	r8,sp,-1744
800063e0:	fa c9 ff a4 	sub	r9,sp,-92
800063e4:	40 8c       	lddsp	r12,sp[0x20]
800063e6:	fe b0 fc 97 	rcall	80005d14 <get_arg>
800063ea:	2f dd       	sub	sp,-12
800063ec:	78 0c       	ld.w	r12,r12[0x0]
800063ee:	50 cc       	stdsp	sp[0x30],r12
800063f0:	c2 98       	rjmp	80006442 <_vfprintf_r+0x3ea>
800063f2:	fa cb f9 34 	sub	r11,sp,-1740
800063f6:	14 90       	mov	r0,r10
800063f8:	41 36       	lddsp	r6,sp[0x4c]
800063fa:	f6 07 00 38 	add	r8,r11,r7<<0x3
800063fe:	f0 f8 fd 88 	ld.w	r8,r8[-632]
80006402:	50 c8       	stdsp	sp[0x30],r8
80006404:	c1 f8       	rjmp	80006442 <_vfprintf_r+0x3ea>
80006406:	41 4c       	lddsp	r12,sp[0x50]
80006408:	59 f9       	cp.w	r9,31
8000640a:	e0 89 00 15 	brgt	80006434 <_vfprintf_r+0x3dc>
8000640e:	f8 c8 ff fc 	sub	r8,r12,-4
80006412:	78 0c       	ld.w	r12,r12[0x0]
80006414:	51 48       	stdsp	sp[0x50],r8
80006416:	50 cc       	stdsp	sp[0x30],r12
80006418:	fa cc f9 34 	sub	r12,sp,-1740
8000641c:	40 cb       	lddsp	r11,sp[0x30]
8000641e:	f8 09 00 38 	add	r8,r12,r9<<0x3
80006422:	f1 4b fd 88 	st.w	r8[-632],r11
80006426:	14 90       	mov	r0,r10
80006428:	f2 c8 ff ff 	sub	r8,r9,-1
8000642c:	41 36       	lddsp	r6,sp[0x4c]
8000642e:	fb 48 06 c4 	st.w	sp[1732],r8
80006432:	c0 88       	rjmp	80006442 <_vfprintf_r+0x3ea>
80006434:	78 09       	ld.w	r9,r12[0x0]
80006436:	f8 c8 ff fc 	sub	r8,r12,-4
8000643a:	50 c9       	stdsp	sp[0x30],r9
8000643c:	14 90       	mov	r0,r10
8000643e:	41 36       	lddsp	r6,sp[0x4c]
80006440:	51 48       	stdsp	sp[0x50],r8
80006442:	40 c8       	lddsp	r8,sp[0x30]
80006444:	58 08       	cp.w	r8,0
80006446:	fe 95 fe e8 	brlt	80006216 <_vfprintf_r+0x1be>
8000644a:	51 36       	stdsp	sp[0x4c],r6
8000644c:	ce aa       	rjmp	80006220 <_vfprintf_r+0x1c8>
8000644e:	41 3b       	lddsp	r11,sp[0x4c]
80006450:	f8 0c 00 28 	add	r8,r12,r12<<0x2
80006454:	17 3a       	ld.ub	r10,r11++
80006456:	f2 08 00 1c 	add	r12,r9,r8<<0x1
8000645a:	51 3b       	stdsp	sp[0x4c],r11
8000645c:	50 8a       	stdsp	sp[0x20],r10
8000645e:	40 89       	lddsp	r9,sp[0x20]
80006460:	23 09       	sub	r9,48
80006462:	58 99       	cp.w	r9,9
80006464:	fe 98 ff f5 	brls	8000644e <_vfprintf_r+0x3f6>
80006468:	3f f9       	mov	r9,-1
8000646a:	f8 09 0c 4c 	max	r12,r12,r9
8000646e:	50 cc       	stdsp	sp[0x30],r12
80006470:	cd ea       	rjmp	8000622c <_vfprintf_r+0x1d4>
80006472:	40 98       	lddsp	r8,sp[0x24]
80006474:	a7 b8       	sbr	r8,0x7
80006476:	50 98       	stdsp	sp[0x24],r8
80006478:	cd 4a       	rjmp	80006220 <_vfprintf_r+0x1c8>
8000647a:	30 09       	mov	r9,0
8000647c:	40 88       	lddsp	r8,sp[0x20]
8000647e:	41 3c       	lddsp	r12,sp[0x4c]
80006480:	23 08       	sub	r8,48
80006482:	19 3b       	ld.ub	r11,r12++
80006484:	51 3c       	stdsp	sp[0x4c],r12
80006486:	50 8b       	stdsp	sp[0x20],r11
80006488:	f2 09 00 29 	add	r9,r9,r9<<0x2
8000648c:	f0 09 00 19 	add	r9,r8,r9<<0x1
80006490:	16 98       	mov	r8,r11
80006492:	23 08       	sub	r8,48
80006494:	58 98       	cp.w	r8,9
80006496:	fe 98 ff f3 	brls	8000647c <_vfprintf_r+0x424>
8000649a:	e0 4b 00 24 	cp.w	r11,36
8000649e:	fe 91 fe c6 	brne	8000622a <_vfprintf_r+0x1d2>
800064a2:	e0 49 00 20 	cp.w	r9,32
800064a6:	e0 89 0d 3d 	brgt	80007f20 <_vfprintf_r+0x1ec8>
800064aa:	f2 c7 00 01 	sub	r7,r9,1
800064ae:	30 12       	mov	r2,1
800064b0:	cb 8a       	rjmp	80006220 <_vfprintf_r+0x1c8>
800064b2:	40 9a       	lddsp	r10,sp[0x24]
800064b4:	a3 ba       	sbr	r10,0x3
800064b6:	c1 88       	rjmp	800064e6 <_vfprintf_r+0x48e>
800064b8:	40 99       	lddsp	r9,sp[0x24]
800064ba:	a7 a9       	sbr	r9,0x6
800064bc:	50 99       	stdsp	sp[0x24],r9
800064be:	cb 1a       	rjmp	80006220 <_vfprintf_r+0x1c8>
800064c0:	41 38       	lddsp	r8,sp[0x4c]
800064c2:	40 9b       	lddsp	r11,sp[0x24]
800064c4:	11 39       	ld.ub	r9,r8++
800064c6:	40 9a       	lddsp	r10,sp[0x24]
800064c8:	36 cc       	mov	r12,108
800064ca:	a5 ab       	sbr	r11,0x4
800064cc:	a5 ba       	sbr	r10,0x5
800064ce:	f8 09 18 00 	cp.b	r9,r12
800064d2:	f4 0b 17 00 	moveq	r11,r10
800064d6:	50 9b       	stdsp	sp[0x24],r11
800064d8:	41 3b       	lddsp	r11,sp[0x4c]
800064da:	f0 0b 17 00 	moveq	r11,r8
800064de:	51 3b       	stdsp	sp[0x4c],r11
800064e0:	ca 0a       	rjmp	80006220 <_vfprintf_r+0x1c8>
800064e2:	40 9a       	lddsp	r10,sp[0x24]
800064e4:	a5 ba       	sbr	r10,0x5
800064e6:	50 9a       	stdsp	sp[0x24],r10
800064e8:	c9 ca       	rjmp	80006220 <_vfprintf_r+0x1c8>
800064ea:	00 98       	mov	r8,r0
800064ec:	fa fe 06 c4 	ld.w	lr,sp[1732]
800064f0:	58 02       	cp.w	r2,0
800064f2:	c1 d0       	breq	8000652c <_vfprintf_r+0x4d4>
800064f4:	1c 37       	cp.w	r7,lr
800064f6:	c0 64       	brge	80006502 <_vfprintf_r+0x4aa>
800064f8:	fa c9 f9 34 	sub	r9,sp,-1740
800064fc:	f2 07 00 38 	add	r8,r9,r7<<0x3
80006500:	c1 d8       	rjmp	8000653a <_vfprintf_r+0x4e2>
80006502:	fa c8 f9 40 	sub	r8,sp,-1728
80006506:	1a d8       	st.w	--sp,r8
80006508:	fa c8 fa a8 	sub	r8,sp,-1368
8000650c:	0e 9b       	mov	r11,r7
8000650e:	1a d8       	st.w	--sp,r8
80006510:	fa c8 fb a4 	sub	r8,sp,-1116
80006514:	06 9a       	mov	r10,r3
80006516:	1a d8       	st.w	--sp,r8
80006518:	fa c8 f9 30 	sub	r8,sp,-1744
8000651c:	fa c9 ff a4 	sub	r9,sp,-92
80006520:	40 8c       	lddsp	r12,sp[0x20]
80006522:	fe b0 fb f9 	rcall	80005d14 <get_arg>
80006526:	2f dd       	sub	sp,-12
80006528:	19 bb       	ld.ub	r11,r12[0x3]
8000652a:	c2 48       	rjmp	80006572 <_vfprintf_r+0x51a>
8000652c:	2f f0       	sub	r0,-1
8000652e:	1c 38       	cp.w	r8,lr
80006530:	c0 84       	brge	80006540 <_vfprintf_r+0x4e8>
80006532:	fa cc f9 34 	sub	r12,sp,-1740
80006536:	f8 07 00 38 	add	r8,r12,r7<<0x3
8000653a:	f1 3b fd 8b 	ld.ub	r11,r8[-629]
8000653e:	c1 a8       	rjmp	80006572 <_vfprintf_r+0x51a>
80006540:	41 4c       	lddsp	r12,sp[0x50]
80006542:	59 fe       	cp.w	lr,31
80006544:	e0 89 00 13 	brgt	8000656a <_vfprintf_r+0x512>
80006548:	f8 c8 ff fc 	sub	r8,r12,-4
8000654c:	51 48       	stdsp	sp[0x50],r8
8000654e:	78 09       	ld.w	r9,r12[0x0]
80006550:	fa cb f9 34 	sub	r11,sp,-1740
80006554:	f6 0e 00 38 	add	r8,r11,lr<<0x3
80006558:	f1 49 fd 88 	st.w	r8[-632],r9
8000655c:	f7 d9 c0 08 	bfextu	r11,r9,0x0,0x8
80006560:	fc c8 ff ff 	sub	r8,lr,-1
80006564:	fb 48 06 c4 	st.w	sp[1732],r8
80006568:	c0 58       	rjmp	80006572 <_vfprintf_r+0x51a>
8000656a:	f8 c8 ff fc 	sub	r8,r12,-4
8000656e:	19 bb       	ld.ub	r11,r12[0x3]
80006570:	51 48       	stdsp	sp[0x50],r8
80006572:	30 0a       	mov	r10,0
80006574:	fb 6b 06 70 	st.b	sp[1648],r11
80006578:	fb 6a 06 cb 	st.b	sp[1739],r10
8000657c:	e0 8f 08 59 	bral	8000762e <_vfprintf_r+0x15d6>
80006580:	40 99       	lddsp	r9,sp[0x24]
80006582:	a5 a9       	sbr	r9,0x4
80006584:	50 99       	stdsp	sp[0x24],r9
80006586:	00 99       	mov	r9,r0
80006588:	40 98       	lddsp	r8,sp[0x24]
8000658a:	ed b8 00 05 	bld	r8,0x5
8000658e:	c4 b1       	brne	80006624 <_vfprintf_r+0x5cc>
80006590:	fa fe 06 c4 	ld.w	lr,sp[1732]
80006594:	58 02       	cp.w	r2,0
80006596:	c1 d0       	breq	800065d0 <_vfprintf_r+0x578>
80006598:	1c 37       	cp.w	r7,lr
8000659a:	c0 64       	brge	800065a6 <_vfprintf_r+0x54e>
8000659c:	fa cc f9 34 	sub	r12,sp,-1740
800065a0:	f8 07 00 38 	add	r8,r12,r7<<0x3
800065a4:	c1 d8       	rjmp	800065de <_vfprintf_r+0x586>
800065a6:	fa c8 f9 40 	sub	r8,sp,-1728
800065aa:	1a d8       	st.w	--sp,r8
800065ac:	fa c8 fa a8 	sub	r8,sp,-1368
800065b0:	1a d8       	st.w	--sp,r8
800065b2:	fa c8 fb a4 	sub	r8,sp,-1116
800065b6:	1a d8       	st.w	--sp,r8
800065b8:	fa c9 ff a4 	sub	r9,sp,-92
800065bc:	fa c8 f9 30 	sub	r8,sp,-1744
800065c0:	40 8c       	lddsp	r12,sp[0x20]
800065c2:	06 9a       	mov	r10,r3
800065c4:	0e 9b       	mov	r11,r7
800065c6:	fe b0 fb a7 	rcall	80005d14 <get_arg>
800065ca:	2f dd       	sub	sp,-12
800065cc:	78 19       	ld.w	r9,r12[0x4]
800065ce:	c2 78       	rjmp	8000661c <_vfprintf_r+0x5c4>
800065d0:	2f f0       	sub	r0,-1
800065d2:	1c 39       	cp.w	r9,lr
800065d4:	c0 a4       	brge	800065e8 <_vfprintf_r+0x590>
800065d6:	fa cb f9 34 	sub	r11,sp,-1740
800065da:	f6 07 00 38 	add	r8,r11,r7<<0x3
800065de:	f0 f9 fd 8c 	ld.w	r9,r8[-628]
800065e2:	f0 fc fd 88 	ld.w	r12,r8[-632]
800065e6:	c1 c8       	rjmp	8000661e <_vfprintf_r+0x5c6>
800065e8:	41 4c       	lddsp	r12,sp[0x50]
800065ea:	59 fe       	cp.w	lr,31
800065ec:	e0 89 00 14 	brgt	80006614 <_vfprintf_r+0x5bc>
800065f0:	f8 c8 ff f8 	sub	r8,r12,-8
800065f4:	51 48       	stdsp	sp[0x50],r8
800065f6:	78 19       	ld.w	r9,r12[0x4]
800065f8:	fa ca f9 34 	sub	r10,sp,-1740
800065fc:	78 0c       	ld.w	r12,r12[0x0]
800065fe:	f4 0e 00 38 	add	r8,r10,lr<<0x3
80006602:	f1 49 fd 8c 	st.w	r8[-628],r9
80006606:	f1 4c fd 88 	st.w	r8[-632],r12
8000660a:	fc c8 ff ff 	sub	r8,lr,-1
8000660e:	fb 48 06 c4 	st.w	sp[1732],r8
80006612:	c0 68       	rjmp	8000661e <_vfprintf_r+0x5c6>
80006614:	f8 c8 ff f8 	sub	r8,r12,-8
80006618:	78 19       	ld.w	r9,r12[0x4]
8000661a:	51 48       	stdsp	sp[0x50],r8
8000661c:	78 0c       	ld.w	r12,r12[0x0]
8000661e:	12 94       	mov	r4,r9
80006620:	18 95       	mov	r5,r12
80006622:	ca a8       	rjmp	80006776 <_vfprintf_r+0x71e>
80006624:	40 98       	lddsp	r8,sp[0x24]
80006626:	ed b8 00 04 	bld	r8,0x4
8000662a:	c1 d1       	brne	80006664 <_vfprintf_r+0x60c>
8000662c:	fa fe 06 c4 	ld.w	lr,sp[1732]
80006630:	58 02       	cp.w	r2,0
80006632:	c0 40       	breq	8000663a <_vfprintf_r+0x5e2>
80006634:	1c 37       	cp.w	r7,lr
80006636:	c7 f5       	brlt	80006734 <_vfprintf_r+0x6dc>
80006638:	c6 68       	rjmp	80006704 <_vfprintf_r+0x6ac>
8000663a:	2f f0       	sub	r0,-1
8000663c:	1c 39       	cp.w	r9,lr
8000663e:	c0 64       	brge	8000664a <_vfprintf_r+0x5f2>
80006640:	fa cc f9 34 	sub	r12,sp,-1740
80006644:	f8 07 00 38 	add	r8,r12,r7<<0x3
80006648:	c7 a8       	rjmp	8000673c <_vfprintf_r+0x6e4>
8000664a:	41 4c       	lddsp	r12,sp[0x50]
8000664c:	59 fe       	cp.w	lr,31
8000664e:	e0 89 00 8d 	brgt	80006768 <_vfprintf_r+0x710>
80006652:	f8 c8 ff fc 	sub	r8,r12,-4
80006656:	fa ca f9 34 	sub	r10,sp,-1740
8000665a:	51 48       	stdsp	sp[0x50],r8
8000665c:	78 0b       	ld.w	r11,r12[0x0]
8000665e:	f4 0e 00 38 	add	r8,r10,lr<<0x3
80006662:	c7 c8       	rjmp	8000675a <_vfprintf_r+0x702>
80006664:	40 98       	lddsp	r8,sp[0x24]
80006666:	ed b8 00 06 	bld	r8,0x6
8000666a:	c4 21       	brne	800066ee <_vfprintf_r+0x696>
8000666c:	fa fe 06 c4 	ld.w	lr,sp[1732]
80006670:	58 02       	cp.w	r2,0
80006672:	c1 d0       	breq	800066ac <_vfprintf_r+0x654>
80006674:	1c 37       	cp.w	r7,lr
80006676:	c0 64       	brge	80006682 <_vfprintf_r+0x62a>
80006678:	fa c9 f9 34 	sub	r9,sp,-1740
8000667c:	f2 07 00 38 	add	r8,r9,r7<<0x3
80006680:	c1 d8       	rjmp	800066ba <_vfprintf_r+0x662>
80006682:	fa c8 f9 40 	sub	r8,sp,-1728
80006686:	1a d8       	st.w	--sp,r8
80006688:	fa c8 fa a8 	sub	r8,sp,-1368
8000668c:	0e 9b       	mov	r11,r7
8000668e:	1a d8       	st.w	--sp,r8
80006690:	fa c8 fb a4 	sub	r8,sp,-1116
80006694:	06 9a       	mov	r10,r3
80006696:	1a d8       	st.w	--sp,r8
80006698:	fa c8 f9 30 	sub	r8,sp,-1744
8000669c:	fa c9 ff a4 	sub	r9,sp,-92
800066a0:	40 8c       	lddsp	r12,sp[0x20]
800066a2:	fe b0 fb 39 	rcall	80005d14 <get_arg>
800066a6:	2f dd       	sub	sp,-12
800066a8:	98 1b       	ld.sh	r11,r12[0x2]
800066aa:	c6 38       	rjmp	80006770 <_vfprintf_r+0x718>
800066ac:	2f f0       	sub	r0,-1
800066ae:	1c 39       	cp.w	r9,lr
800066b0:	c0 84       	brge	800066c0 <_vfprintf_r+0x668>
800066b2:	fa cc f9 34 	sub	r12,sp,-1740
800066b6:	f8 07 00 38 	add	r8,r12,r7<<0x3
800066ba:	f1 0b fd 8a 	ld.sh	r11,r8[-630]
800066be:	c5 98       	rjmp	80006770 <_vfprintf_r+0x718>
800066c0:	41 4c       	lddsp	r12,sp[0x50]
800066c2:	59 fe       	cp.w	lr,31
800066c4:	e0 89 00 13 	brgt	800066ea <_vfprintf_r+0x692>
800066c8:	f8 c8 ff fc 	sub	r8,r12,-4
800066cc:	51 48       	stdsp	sp[0x50],r8
800066ce:	78 09       	ld.w	r9,r12[0x0]
800066d0:	fa cb f9 34 	sub	r11,sp,-1740
800066d4:	f6 0e 00 38 	add	r8,r11,lr<<0x3
800066d8:	f1 49 fd 88 	st.w	r8[-632],r9
800066dc:	f7 d9 b0 10 	bfexts	r11,r9,0x0,0x10
800066e0:	fc c8 ff ff 	sub	r8,lr,-1
800066e4:	fb 48 06 c4 	st.w	sp[1732],r8
800066e8:	c4 48       	rjmp	80006770 <_vfprintf_r+0x718>
800066ea:	98 1b       	ld.sh	r11,r12[0x2]
800066ec:	c3 f8       	rjmp	8000676a <_vfprintf_r+0x712>
800066ee:	fa fe 06 c4 	ld.w	lr,sp[1732]
800066f2:	58 02       	cp.w	r2,0
800066f4:	c1 d0       	breq	8000672e <_vfprintf_r+0x6d6>
800066f6:	1c 37       	cp.w	r7,lr
800066f8:	c0 64       	brge	80006704 <_vfprintf_r+0x6ac>
800066fa:	fa ca f9 34 	sub	r10,sp,-1740
800066fe:	f4 07 00 38 	add	r8,r10,r7<<0x3
80006702:	c1 d8       	rjmp	8000673c <_vfprintf_r+0x6e4>
80006704:	fa c8 f9 40 	sub	r8,sp,-1728
80006708:	1a d8       	st.w	--sp,r8
8000670a:	fa c8 fa a8 	sub	r8,sp,-1368
8000670e:	0e 9b       	mov	r11,r7
80006710:	1a d8       	st.w	--sp,r8
80006712:	fa c8 fb a4 	sub	r8,sp,-1116
80006716:	06 9a       	mov	r10,r3
80006718:	1a d8       	st.w	--sp,r8
8000671a:	fa c8 f9 30 	sub	r8,sp,-1744
8000671e:	fa c9 ff a4 	sub	r9,sp,-92
80006722:	40 8c       	lddsp	r12,sp[0x20]
80006724:	fe b0 fa f8 	rcall	80005d14 <get_arg>
80006728:	2f dd       	sub	sp,-12
8000672a:	78 0b       	ld.w	r11,r12[0x0]
8000672c:	c2 28       	rjmp	80006770 <_vfprintf_r+0x718>
8000672e:	2f f0       	sub	r0,-1
80006730:	1c 39       	cp.w	r9,lr
80006732:	c0 84       	brge	80006742 <_vfprintf_r+0x6ea>
80006734:	fa c9 f9 34 	sub	r9,sp,-1740
80006738:	f2 07 00 38 	add	r8,r9,r7<<0x3
8000673c:	f0 fb fd 88 	ld.w	r11,r8[-632]
80006740:	c1 88       	rjmp	80006770 <_vfprintf_r+0x718>
80006742:	41 4c       	lddsp	r12,sp[0x50]
80006744:	59 fe       	cp.w	lr,31
80006746:	e0 89 00 11 	brgt	80006768 <_vfprintf_r+0x710>
8000674a:	f8 c8 ff fc 	sub	r8,r12,-4
8000674e:	78 0b       	ld.w	r11,r12[0x0]
80006750:	51 48       	stdsp	sp[0x50],r8
80006752:	fa cc f9 34 	sub	r12,sp,-1740
80006756:	f8 0e 00 38 	add	r8,r12,lr<<0x3
8000675a:	f1 4b fd 88 	st.w	r8[-632],r11
8000675e:	fc c8 ff ff 	sub	r8,lr,-1
80006762:	fb 48 06 c4 	st.w	sp[1732],r8
80006766:	c0 58       	rjmp	80006770 <_vfprintf_r+0x718>
80006768:	78 0b       	ld.w	r11,r12[0x0]
8000676a:	f8 c8 ff fc 	sub	r8,r12,-4
8000676e:	51 48       	stdsp	sp[0x50],r8
80006770:	16 94       	mov	r4,r11
80006772:	f6 05 14 1f 	asr	r5,r11,0x1f
80006776:	58 04       	cp.w	r4,0
80006778:	5c 25       	cpc	r5
8000677a:	c0 a4       	brge	8000678e <_vfprintf_r+0x736>
8000677c:	30 08       	mov	r8,0
8000677e:	30 09       	mov	r9,0
80006780:	f0 04 01 04 	sub	r4,r8,r4
80006784:	f2 05 01 45 	sbc	r5,r9,r5
80006788:	32 d8       	mov	r8,45
8000678a:	fb 68 06 cb 	st.b	sp[1739],r8
8000678e:	30 1e       	mov	lr,1
80006790:	e0 8f 06 c4 	bral	80007518 <_vfprintf_r+0x14c0>
80006794:	00 99       	mov	r9,r0
80006796:	40 98       	lddsp	r8,sp[0x24]
80006798:	ed b8 00 03 	bld	r8,0x3
8000679c:	c4 51       	brne	80006826 <_vfprintf_r+0x7ce>
8000679e:	fa fe 06 c4 	ld.w	lr,sp[1732]
800067a2:	58 02       	cp.w	r2,0
800067a4:	c2 10       	breq	800067e6 <_vfprintf_r+0x78e>
800067a6:	1c 37       	cp.w	r7,lr
800067a8:	c0 94       	brge	800067ba <_vfprintf_r+0x762>
800067aa:	fa cb f9 34 	sub	r11,sp,-1740
800067ae:	f6 07 00 38 	add	r8,r11,r7<<0x3
800067b2:	f0 fa fd 8c 	ld.w	r10,r8[-628]
800067b6:	50 0a       	stdsp	sp[0x0],r10
800067b8:	c2 18       	rjmp	800067fa <_vfprintf_r+0x7a2>
800067ba:	fa c8 f9 40 	sub	r8,sp,-1728
800067be:	1a d8       	st.w	--sp,r8
800067c0:	fa c8 fa a8 	sub	r8,sp,-1368
800067c4:	1a d8       	st.w	--sp,r8
800067c6:	fa c8 fb a4 	sub	r8,sp,-1116
800067ca:	1a d8       	st.w	--sp,r8
800067cc:	fa c9 ff a4 	sub	r9,sp,-92
800067d0:	fa c8 f9 30 	sub	r8,sp,-1744
800067d4:	40 8c       	lddsp	r12,sp[0x20]
800067d6:	06 9a       	mov	r10,r3
800067d8:	0e 9b       	mov	r11,r7
800067da:	fe b0 fa 9d 	rcall	80005d14 <get_arg>
800067de:	2f dd       	sub	sp,-12
800067e0:	78 19       	ld.w	r9,r12[0x4]
800067e2:	50 09       	stdsp	sp[0x0],r9
800067e4:	c6 58       	rjmp	800068ae <_vfprintf_r+0x856>
800067e6:	2f f0       	sub	r0,-1
800067e8:	1c 39       	cp.w	r9,lr
800067ea:	c0 c4       	brge	80006802 <_vfprintf_r+0x7aa>
800067ec:	fa cc f9 34 	sub	r12,sp,-1740
800067f0:	f8 07 00 38 	add	r8,r12,r7<<0x3
800067f4:	f0 fb fd 8c 	ld.w	r11,r8[-628]
800067f8:	50 0b       	stdsp	sp[0x0],r11
800067fa:	f0 f8 fd 88 	ld.w	r8,r8[-632]
800067fe:	50 18       	stdsp	sp[0x4],r8
80006800:	c5 98       	rjmp	800068b2 <_vfprintf_r+0x85a>
80006802:	41 4c       	lddsp	r12,sp[0x50]
80006804:	59 fe       	cp.w	lr,31
80006806:	e0 89 00 4f 	brgt	800068a4 <_vfprintf_r+0x84c>
8000680a:	f8 c8 ff f8 	sub	r8,r12,-8
8000680e:	78 1a       	ld.w	r10,r12[0x4]
80006810:	fa c9 f9 34 	sub	r9,sp,-1740
80006814:	50 0a       	stdsp	sp[0x0],r10
80006816:	78 0c       	ld.w	r12,r12[0x0]
80006818:	51 48       	stdsp	sp[0x50],r8
8000681a:	f2 0e 00 3a 	add	r10,r9,lr<<0x3
8000681e:	50 1c       	stdsp	sp[0x4],r12
80006820:	18 99       	mov	r9,r12
80006822:	40 08       	lddsp	r8,sp[0x0]
80006824:	c3 98       	rjmp	80006896 <_vfprintf_r+0x83e>
80006826:	fa fe 06 c4 	ld.w	lr,sp[1732]
8000682a:	58 02       	cp.w	r2,0
8000682c:	c1 90       	breq	8000685e <_vfprintf_r+0x806>
8000682e:	1c 37       	cp.w	r7,lr
80006830:	cd e5       	brlt	800067ec <_vfprintf_r+0x794>
80006832:	fa c8 f9 40 	sub	r8,sp,-1728
80006836:	1a d8       	st.w	--sp,r8
80006838:	fa c8 fa a8 	sub	r8,sp,-1368
8000683c:	06 9a       	mov	r10,r3
8000683e:	1a d8       	st.w	--sp,r8
80006840:	fa c8 fb a4 	sub	r8,sp,-1116
80006844:	0e 9b       	mov	r11,r7
80006846:	1a d8       	st.w	--sp,r8
80006848:	fa c8 f9 30 	sub	r8,sp,-1744
8000684c:	fa c9 ff a4 	sub	r9,sp,-92
80006850:	40 8c       	lddsp	r12,sp[0x20]
80006852:	fe b0 fa 61 	rcall	80005d14 <get_arg>
80006856:	2f dd       	sub	sp,-12
80006858:	78 1a       	ld.w	r10,r12[0x4]
8000685a:	50 0a       	stdsp	sp[0x0],r10
8000685c:	c2 98       	rjmp	800068ae <_vfprintf_r+0x856>
8000685e:	2f f0       	sub	r0,-1
80006860:	1c 39       	cp.w	r9,lr
80006862:	c0 94       	brge	80006874 <_vfprintf_r+0x81c>
80006864:	fa c9 f9 34 	sub	r9,sp,-1740
80006868:	f2 07 00 38 	add	r8,r9,r7<<0x3
8000686c:	f0 fc fd 8c 	ld.w	r12,r8[-628]
80006870:	50 0c       	stdsp	sp[0x0],r12
80006872:	cc 4b       	rjmp	800067fa <_vfprintf_r+0x7a2>
80006874:	41 4c       	lddsp	r12,sp[0x50]
80006876:	59 fe       	cp.w	lr,31
80006878:	e0 89 00 16 	brgt	800068a4 <_vfprintf_r+0x84c>
8000687c:	f8 c8 ff f8 	sub	r8,r12,-8
80006880:	fa c9 f9 34 	sub	r9,sp,-1740
80006884:	78 1b       	ld.w	r11,r12[0x4]
80006886:	51 48       	stdsp	sp[0x50],r8
80006888:	78 0c       	ld.w	r12,r12[0x0]
8000688a:	f2 0e 00 3a 	add	r10,r9,lr<<0x3
8000688e:	50 0b       	stdsp	sp[0x0],r11
80006890:	50 1c       	stdsp	sp[0x4],r12
80006892:	18 99       	mov	r9,r12
80006894:	16 98       	mov	r8,r11
80006896:	f4 e9 fd 88 	st.d	r10[-632],r8
8000689a:	fc c8 ff ff 	sub	r8,lr,-1
8000689e:	fb 48 06 c4 	st.w	sp[1732],r8
800068a2:	c0 88       	rjmp	800068b2 <_vfprintf_r+0x85a>
800068a4:	78 18       	ld.w	r8,r12[0x4]
800068a6:	50 08       	stdsp	sp[0x0],r8
800068a8:	f8 c8 ff f8 	sub	r8,r12,-8
800068ac:	51 48       	stdsp	sp[0x50],r8
800068ae:	78 0c       	ld.w	r12,r12[0x0]
800068b0:	50 1c       	stdsp	sp[0x4],r12
800068b2:	40 19       	lddsp	r9,sp[0x4]
800068b4:	40 08       	lddsp	r8,sp[0x0]
800068b6:	12 9b       	mov	r11,r9
800068b8:	10 9a       	mov	r10,r8
800068ba:	e0 a0 1b c1 	rcall	8000a03c <__isinfd>
800068be:	18 96       	mov	r6,r12
800068c0:	c1 90       	breq	800068f2 <_vfprintf_r+0x89a>
800068c2:	30 08       	mov	r8,0
800068c4:	30 09       	mov	r9,0
800068c6:	40 1b       	lddsp	r11,sp[0x4]
800068c8:	40 0a       	lddsp	r10,sp[0x0]
800068ca:	e0 a0 1f 5b 	rcall	8000a780 <__avr32_f64_cmp_lt>
800068ce:	c0 40       	breq	800068d6 <_vfprintf_r+0x87e>
800068d0:	32 d8       	mov	r8,45
800068d2:	fb 68 06 cb 	st.b	sp[1739],r8
800068d6:	40 9c       	lddsp	r12,sp[0x24]
800068d8:	4a f9       	lddpc	r9,80006994 <_vfprintf_r+0x93c>
800068da:	a7 dc       	cbr	r12,0x7
800068dc:	4a f8       	lddpc	r8,80006998 <_vfprintf_r+0x940>
800068de:	40 8b       	lddsp	r11,sp[0x20]
800068e0:	50 9c       	stdsp	sp[0x24],r12
800068e2:	e0 4b 00 48 	cp.w	r11,72
800068e6:	f0 03 17 50 	movlt	r3,r8
800068ea:	f2 03 17 40 	movge	r3,r9
800068ee:	30 02       	mov	r2,0
800068f0:	c1 58       	rjmp	8000691a <_vfprintf_r+0x8c2>
800068f2:	40 19       	lddsp	r9,sp[0x4]
800068f4:	40 08       	lddsp	r8,sp[0x0]
800068f6:	12 9b       	mov	r11,r9
800068f8:	10 9a       	mov	r10,r8
800068fa:	e0 a0 1b b3 	rcall	8000a060 <__isnand>
800068fe:	c1 10       	breq	80006920 <_vfprintf_r+0x8c8>
80006900:	40 9a       	lddsp	r10,sp[0x24]
80006902:	4a 79       	lddpc	r9,8000699c <_vfprintf_r+0x944>
80006904:	a7 da       	cbr	r10,0x7
80006906:	4a 78       	lddpc	r8,800069a0 <_vfprintf_r+0x948>
80006908:	40 8c       	lddsp	r12,sp[0x20]
8000690a:	50 9a       	stdsp	sp[0x24],r10
8000690c:	0c 92       	mov	r2,r6
8000690e:	e0 4c 00 48 	cp.w	r12,72
80006912:	f0 03 17 50 	movlt	r3,r8
80006916:	f2 03 17 40 	movge	r3,r9
8000691a:	30 37       	mov	r7,3
8000691c:	e0 8f 06 90 	bral	8000763c <_vfprintf_r+0x15e4>
80006920:	40 cb       	lddsp	r11,sp[0x30]
80006922:	5b fb       	cp.w	r11,-1
80006924:	c0 41       	brne	8000692c <_vfprintf_r+0x8d4>
80006926:	30 6a       	mov	r10,6
80006928:	50 ca       	stdsp	sp[0x30],r10
8000692a:	c1 28       	rjmp	8000694e <_vfprintf_r+0x8f6>
8000692c:	40 89       	lddsp	r9,sp[0x20]
8000692e:	30 0c       	mov	r12,0
80006930:	e0 49 00 67 	cp.w	r9,103
80006934:	5f 08       	sreq	r8
80006936:	e0 49 00 47 	cp.w	r9,71
8000693a:	5f 09       	sreq	r9
8000693c:	12 48       	or	r8,r9
8000693e:	f8 08 18 00 	cp.b	r8,r12
80006942:	c0 60       	breq	8000694e <_vfprintf_r+0x8f6>
80006944:	40 cb       	lddsp	r11,sp[0x30]
80006946:	58 0b       	cp.w	r11,0
80006948:	f9 bb 00 01 	moveq	r11,1
8000694c:	50 cb       	stdsp	sp[0x30],r11
8000694e:	40 99       	lddsp	r9,sp[0x24]
80006950:	a9 a9       	sbr	r9,0x8
80006952:	50 99       	stdsp	sp[0x24],r9
80006954:	40 19       	lddsp	r9,sp[0x4]
80006956:	58 09       	cp.w	r9,0
80006958:	c0 85       	brlt	80006968 <_vfprintf_r+0x910>
8000695a:	40 18       	lddsp	r8,sp[0x4]
8000695c:	40 0c       	lddsp	r12,sp[0x0]
8000695e:	30 0b       	mov	r11,0
80006960:	50 38       	stdsp	sp[0xc],r8
80006962:	50 2c       	stdsp	sp[0x8],r12
80006964:	50 eb       	stdsp	sp[0x38],r11
80006966:	c0 98       	rjmp	80006978 <_vfprintf_r+0x920>
80006968:	40 1a       	lddsp	r10,sp[0x4]
8000696a:	40 09       	lddsp	r9,sp[0x0]
8000696c:	ee 1a 80 00 	eorh	r10,0x8000
80006970:	32 d8       	mov	r8,45
80006972:	50 3a       	stdsp	sp[0xc],r10
80006974:	50 29       	stdsp	sp[0x8],r9
80006976:	50 e8       	stdsp	sp[0x38],r8
80006978:	40 8c       	lddsp	r12,sp[0x20]
8000697a:	e0 4c 00 66 	cp.w	r12,102
8000697e:	5f 09       	sreq	r9
80006980:	e0 4c 00 46 	cp.w	r12,70
80006984:	5f 08       	sreq	r8
80006986:	f3 e8 10 07 	or	r7,r9,r8
8000698a:	c0 d0       	breq	800069a4 <_vfprintf_r+0x94c>
8000698c:	40 c2       	lddsp	r2,sp[0x30]
8000698e:	30 39       	mov	r9,3
80006990:	c1 a8       	rjmp	800069c4 <_vfprintf_r+0x96c>
80006992:	d7 03       	nop
80006994:	80 00       	ld.sh	r0,r0[0x0]
80006996:	bf ec       	*unknown*
80006998:	80 00       	ld.sh	r0,r0[0x0]
8000699a:	bf f0       	*unknown*
8000699c:	80 00       	ld.sh	r0,r0[0x0]
8000699e:	bf f4       	*unknown*
800069a0:	80 00       	ld.sh	r0,r0[0x0]
800069a2:	bf f8       	*unknown*
800069a4:	40 8b       	lddsp	r11,sp[0x20]
800069a6:	e0 4b 00 45 	cp.w	r11,69
800069aa:	5f 09       	sreq	r9
800069ac:	e0 4b 00 65 	cp.w	r11,101
800069b0:	5f 08       	sreq	r8
800069b2:	12 48       	or	r8,r9
800069b4:	40 c9       	lddsp	r9,sp[0x30]
800069b6:	2f f9       	sub	r9,-1
800069b8:	40 c2       	lddsp	r2,sp[0x30]
800069ba:	ee 08 18 00 	cp.b	r8,r7
800069be:	f2 02 17 10 	movne	r2,r9
800069c2:	30 29       	mov	r9,2
800069c4:	fa c8 f9 4c 	sub	r8,sp,-1716
800069c8:	1a d8       	st.w	--sp,r8
800069ca:	fa c8 f9 44 	sub	r8,sp,-1724
800069ce:	1a d8       	st.w	--sp,r8
800069d0:	fa c8 f9 3c 	sub	r8,sp,-1732
800069d4:	1a d8       	st.w	--sp,r8
800069d6:	04 98       	mov	r8,r2
800069d8:	40 5a       	lddsp	r10,sp[0x14]
800069da:	40 8c       	lddsp	r12,sp[0x20]
800069dc:	40 6b       	lddsp	r11,sp[0x18]
800069de:	e0 a0 0c 91 	rcall	80008300 <_dtoa_r>
800069e2:	2f dd       	sub	sp,-12
800069e4:	40 8a       	lddsp	r10,sp[0x20]
800069e6:	e0 4a 00 47 	cp.w	r10,71
800069ea:	5f 19       	srne	r9
800069ec:	e0 4a 00 67 	cp.w	r10,103
800069f0:	5f 18       	srne	r8
800069f2:	18 93       	mov	r3,r12
800069f4:	12 68       	and	r8,r9
800069f6:	30 09       	mov	r9,0
800069f8:	f2 08 18 00 	cp.b	r8,r9
800069fc:	c0 51       	brne	80006a06 <_vfprintf_r+0x9ae>
800069fe:	40 9c       	lddsp	r12,sp[0x24]
80006a00:	ed bc 00 00 	bld	r12,0x0
80006a04:	c2 d1       	brne	80006a5e <_vfprintf_r+0xa06>
80006a06:	e6 02 00 06 	add	r6,r3,r2
80006a0a:	58 07       	cp.w	r7,0
80006a0c:	c1 40       	breq	80006a34 <_vfprintf_r+0x9dc>
80006a0e:	07 89       	ld.ub	r9,r3[0x0]
80006a10:	33 08       	mov	r8,48
80006a12:	f0 09 18 00 	cp.b	r9,r8
80006a16:	c0 c1       	brne	80006a2e <_vfprintf_r+0x9d6>
80006a18:	30 08       	mov	r8,0
80006a1a:	30 09       	mov	r9,0
80006a1c:	40 3b       	lddsp	r11,sp[0xc]
80006a1e:	40 2a       	lddsp	r10,sp[0x8]
80006a20:	e0 a0 1e 60 	rcall	8000a6e0 <__avr32_f64_cmp_eq>
80006a24:	c0 51       	brne	80006a2e <_vfprintf_r+0x9d6>
80006a26:	e4 02 11 01 	rsub	r2,r2,1
80006a2a:	fb 42 06 bc 	st.w	sp[1724],r2
80006a2e:	fa f8 06 bc 	ld.w	r8,sp[1724]
80006a32:	10 06       	add	r6,r8
80006a34:	40 39       	lddsp	r9,sp[0xc]
80006a36:	40 28       	lddsp	r8,sp[0x8]
80006a38:	12 9b       	mov	r11,r9
80006a3a:	10 9a       	mov	r10,r8
80006a3c:	30 09       	mov	r9,0
80006a3e:	30 08       	mov	r8,0
80006a40:	e0 a0 1e 50 	rcall	8000a6e0 <__avr32_f64_cmp_eq>
80006a44:	c0 80       	breq	80006a54 <_vfprintf_r+0x9fc>
80006a46:	fb 46 06 b4 	st.w	sp[1716],r6
80006a4a:	c0 58       	rjmp	80006a54 <_vfprintf_r+0x9fc>
80006a4c:	10 c9       	st.b	r8++,r9
80006a4e:	fb 48 06 b4 	st.w	sp[1716],r8
80006a52:	c0 28       	rjmp	80006a56 <_vfprintf_r+0x9fe>
80006a54:	33 09       	mov	r9,48
80006a56:	fa f8 06 b4 	ld.w	r8,sp[1716]
80006a5a:	0c 38       	cp.w	r8,r6
80006a5c:	cf 83       	brcs	80006a4c <_vfprintf_r+0x9f4>
80006a5e:	40 8b       	lddsp	r11,sp[0x20]
80006a60:	e0 4b 00 47 	cp.w	r11,71
80006a64:	5f 09       	sreq	r9
80006a66:	e0 4b 00 67 	cp.w	r11,103
80006a6a:	5f 08       	sreq	r8
80006a6c:	12 48       	or	r8,r9
80006a6e:	fa f9 06 b4 	ld.w	r9,sp[1716]
80006a72:	06 19       	sub	r9,r3
80006a74:	51 09       	stdsp	sp[0x40],r9
80006a76:	30 0a       	mov	r10,0
80006a78:	f4 08 18 00 	cp.b	r8,r10
80006a7c:	c0 d0       	breq	80006a96 <_vfprintf_r+0xa3e>
80006a7e:	fa f8 06 bc 	ld.w	r8,sp[1724]
80006a82:	5b d8       	cp.w	r8,-3
80006a84:	c0 55       	brlt	80006a8e <_vfprintf_r+0xa36>
80006a86:	40 c9       	lddsp	r9,sp[0x30]
80006a88:	12 38       	cp.w	r8,r9
80006a8a:	e0 8a 00 6f 	brle	80006b68 <_vfprintf_r+0xb10>
80006a8e:	40 88       	lddsp	r8,sp[0x20]
80006a90:	20 28       	sub	r8,2
80006a92:	50 88       	stdsp	sp[0x20],r8
80006a94:	c0 68       	rjmp	80006aa0 <_vfprintf_r+0xa48>
80006a96:	40 8c       	lddsp	r12,sp[0x20]
80006a98:	e0 4c 00 65 	cp.w	r12,101
80006a9c:	e0 89 00 42 	brgt	80006b20 <_vfprintf_r+0xac8>
80006aa0:	fa f8 06 bc 	ld.w	r8,sp[1724]
80006aa4:	40 8b       	lddsp	r11,sp[0x20]
80006aa6:	f0 c9 00 01 	sub	r9,r8,1
80006aaa:	fb 6b 06 ac 	st.b	sp[1708],r11
80006aae:	fb 49 06 bc 	st.w	sp[1724],r9
80006ab2:	c0 47       	brpl	80006aba <_vfprintf_r+0xa62>
80006ab4:	5c 39       	neg	r9
80006ab6:	32 d8       	mov	r8,45
80006ab8:	c0 28       	rjmp	80006abc <_vfprintf_r+0xa64>
80006aba:	32 b8       	mov	r8,43
80006abc:	fb 68 06 ad 	st.b	sp[1709],r8
80006ac0:	58 99       	cp.w	r9,9
80006ac2:	e0 8a 00 1a 	brle	80006af6 <_vfprintf_r+0xa9e>
80006ac6:	fa ce f9 55 	sub	lr,sp,-1707
80006aca:	30 ac       	mov	r12,10
80006acc:	1c 9b       	mov	r11,lr
80006ace:	f2 0c 0c 08 	divs	r8,r9,r12
80006ad2:	f2 ca ff d0 	sub	r10,r9,-48
80006ad6:	16 fa       	st.b	--r11,r10
80006ad8:	10 99       	mov	r9,r8
80006ada:	58 98       	cp.w	r8,9
80006adc:	fe 99 ff f9 	brgt	80006ace <_vfprintf_r+0xa76>
80006ae0:	16 9a       	mov	r10,r11
80006ae2:	2d 08       	sub	r8,-48
80006ae4:	fa c9 f9 52 	sub	r9,sp,-1710
80006ae8:	14 f8       	st.b	--r10,r8
80006aea:	c0 38       	rjmp	80006af0 <_vfprintf_r+0xa98>
80006aec:	15 38       	ld.ub	r8,r10++
80006aee:	12 c8       	st.b	r9++,r8
80006af0:	1c 3a       	cp.w	r10,lr
80006af2:	cf d3       	brcs	80006aec <_vfprintf_r+0xa94>
80006af4:	c0 a8       	rjmp	80006b08 <_vfprintf_r+0xab0>
80006af6:	f2 c8 ff d0 	sub	r8,r9,-48
80006afa:	fa c9 f9 50 	sub	r9,sp,-1712
80006afe:	fb 68 06 af 	st.b	sp[1711],r8
80006b02:	33 08       	mov	r8,48
80006b04:	fb 68 06 ae 	st.b	sp[1710],r8
80006b08:	fa c8 f9 54 	sub	r8,sp,-1708
80006b0c:	f2 08 01 08 	sub	r8,r9,r8
80006b10:	50 f8       	stdsp	sp[0x3c],r8
80006b12:	41 0a       	lddsp	r10,sp[0x40]
80006b14:	f0 0a 00 07 	add	r7,r8,r10
80006b18:	58 1a       	cp.w	r10,1
80006b1a:	e0 89 00 32 	brgt	80006b7e <_vfprintf_r+0xb26>
80006b1e:	c2 c8       	rjmp	80006b76 <_vfprintf_r+0xb1e>
80006b20:	40 88       	lddsp	r8,sp[0x20]
80006b22:	e0 48 00 66 	cp.w	r8,102
80006b26:	c2 31       	brne	80006b6c <_vfprintf_r+0xb14>
80006b28:	fa f7 06 bc 	ld.w	r7,sp[1724]
80006b2c:	58 07       	cp.w	r7,0
80006b2e:	e0 8a 00 11 	brle	80006b50 <_vfprintf_r+0xaf8>
80006b32:	40 cc       	lddsp	r12,sp[0x30]
80006b34:	58 0c       	cp.w	r12,0
80006b36:	c0 51       	brne	80006b40 <_vfprintf_r+0xae8>
80006b38:	40 9b       	lddsp	r11,sp[0x24]
80006b3a:	ed bb 00 00 	bld	r11,0x0
80006b3e:	c2 a1       	brne	80006b92 <_vfprintf_r+0xb3a>
80006b40:	ee c8 ff ff 	sub	r8,r7,-1
80006b44:	40 ca       	lddsp	r10,sp[0x30]
80006b46:	36 69       	mov	r9,102
80006b48:	f0 0a 00 07 	add	r7,r8,r10
80006b4c:	50 89       	stdsp	sp[0x20],r9
80006b4e:	c2 28       	rjmp	80006b92 <_vfprintf_r+0xb3a>
80006b50:	40 c8       	lddsp	r8,sp[0x30]
80006b52:	58 08       	cp.w	r8,0
80006b54:	c0 71       	brne	80006b62 <_vfprintf_r+0xb0a>
80006b56:	40 9c       	lddsp	r12,sp[0x24]
80006b58:	ed bc 00 00 	bld	r12,0x0
80006b5c:	c0 30       	breq	80006b62 <_vfprintf_r+0xb0a>
80006b5e:	30 17       	mov	r7,1
80006b60:	c1 98       	rjmp	80006b92 <_vfprintf_r+0xb3a>
80006b62:	40 c7       	lddsp	r7,sp[0x30]
80006b64:	2f e7       	sub	r7,-2
80006b66:	c1 68       	rjmp	80006b92 <_vfprintf_r+0xb3a>
80006b68:	36 7b       	mov	r11,103
80006b6a:	50 8b       	stdsp	sp[0x20],r11
80006b6c:	fa f7 06 bc 	ld.w	r7,sp[1724]
80006b70:	41 0a       	lddsp	r10,sp[0x40]
80006b72:	14 37       	cp.w	r7,r10
80006b74:	c0 75       	brlt	80006b82 <_vfprintf_r+0xb2a>
80006b76:	40 99       	lddsp	r9,sp[0x24]
80006b78:	ed b9 00 00 	bld	r9,0x0
80006b7c:	c0 b1       	brne	80006b92 <_vfprintf_r+0xb3a>
80006b7e:	2f f7       	sub	r7,-1
80006b80:	c0 98       	rjmp	80006b92 <_vfprintf_r+0xb3a>
80006b82:	ee 08 11 02 	rsub	r8,r7,2
80006b86:	41 0c       	lddsp	r12,sp[0x40]
80006b88:	58 07       	cp.w	r7,0
80006b8a:	f9 b8 09 01 	movgt	r8,1
80006b8e:	f0 0c 00 07 	add	r7,r8,r12
80006b92:	40 eb       	lddsp	r11,sp[0x38]
80006b94:	58 0b       	cp.w	r11,0
80006b96:	e0 80 05 52 	breq	8000763a <_vfprintf_r+0x15e2>
80006b9a:	32 d8       	mov	r8,45
80006b9c:	fb 68 06 cb 	st.b	sp[1739],r8
80006ba0:	e0 8f 05 4d 	bral	8000763a <_vfprintf_r+0x15e2>
80006ba4:	00 99       	mov	r9,r0
80006ba6:	40 98       	lddsp	r8,sp[0x24]
80006ba8:	ed b8 00 05 	bld	r8,0x5
80006bac:	c4 91       	brne	80006c3e <_vfprintf_r+0xbe6>
80006bae:	fa fe 06 c4 	ld.w	lr,sp[1732]
80006bb2:	58 02       	cp.w	r2,0
80006bb4:	c1 d0       	breq	80006bee <_vfprintf_r+0xb96>
80006bb6:	1c 37       	cp.w	r7,lr
80006bb8:	c0 64       	brge	80006bc4 <_vfprintf_r+0xb6c>
80006bba:	fa ca f9 34 	sub	r10,sp,-1740
80006bbe:	f4 07 00 38 	add	r8,r10,r7<<0x3
80006bc2:	c1 d8       	rjmp	80006bfc <_vfprintf_r+0xba4>
80006bc4:	fa c8 f9 40 	sub	r8,sp,-1728
80006bc8:	1a d8       	st.w	--sp,r8
80006bca:	fa c8 fa a8 	sub	r8,sp,-1368
80006bce:	0e 9b       	mov	r11,r7
80006bd0:	1a d8       	st.w	--sp,r8
80006bd2:	fa c8 fb a4 	sub	r8,sp,-1116
80006bd6:	06 9a       	mov	r10,r3
80006bd8:	1a d8       	st.w	--sp,r8
80006bda:	fa c8 f9 30 	sub	r8,sp,-1744
80006bde:	fa c9 ff a4 	sub	r9,sp,-92
80006be2:	40 8c       	lddsp	r12,sp[0x20]
80006be4:	fe b0 f8 98 	rcall	80005d14 <get_arg>
80006be8:	2f dd       	sub	sp,-12
80006bea:	78 0b       	ld.w	r11,r12[0x0]
80006bec:	c2 28       	rjmp	80006c30 <_vfprintf_r+0xbd8>
80006bee:	2f f0       	sub	r0,-1
80006bf0:	1c 39       	cp.w	r9,lr
80006bf2:	c0 84       	brge	80006c02 <_vfprintf_r+0xbaa>
80006bf4:	fa c9 f9 34 	sub	r9,sp,-1740
80006bf8:	f2 07 00 38 	add	r8,r9,r7<<0x3
80006bfc:	f0 fb fd 88 	ld.w	r11,r8[-632]
80006c00:	c1 88       	rjmp	80006c30 <_vfprintf_r+0xbd8>
80006c02:	41 4c       	lddsp	r12,sp[0x50]
80006c04:	59 fe       	cp.w	lr,31
80006c06:	e0 89 00 11 	brgt	80006c28 <_vfprintf_r+0xbd0>
80006c0a:	f8 c8 ff fc 	sub	r8,r12,-4
80006c0e:	51 48       	stdsp	sp[0x50],r8
80006c10:	78 0b       	ld.w	r11,r12[0x0]
80006c12:	fa cc f9 34 	sub	r12,sp,-1740
80006c16:	f8 0e 00 38 	add	r8,r12,lr<<0x3
80006c1a:	f1 4b fd 88 	st.w	r8[-632],r11
80006c1e:	fc c8 ff ff 	sub	r8,lr,-1
80006c22:	fb 48 06 c4 	st.w	sp[1732],r8
80006c26:	c0 58       	rjmp	80006c30 <_vfprintf_r+0xbd8>
80006c28:	f8 c8 ff fc 	sub	r8,r12,-4
80006c2c:	78 0b       	ld.w	r11,r12[0x0]
80006c2e:	51 48       	stdsp	sp[0x50],r8
80006c30:	40 aa       	lddsp	r10,sp[0x28]
80006c32:	14 98       	mov	r8,r10
80006c34:	97 1a       	st.w	r11[0x4],r10
80006c36:	bf 58       	asr	r8,0x1f
80006c38:	97 08       	st.w	r11[0x0],r8
80006c3a:	fe 9f fa a4 	bral	80006182 <_vfprintf_r+0x12a>
80006c3e:	40 98       	lddsp	r8,sp[0x24]
80006c40:	ed b8 00 04 	bld	r8,0x4
80006c44:	c1 01       	brne	80006c64 <_vfprintf_r+0xc0c>
80006c46:	fa fe 06 c4 	ld.w	lr,sp[1732]
80006c4a:	58 02       	cp.w	r2,0
80006c4c:	c0 80       	breq	80006c5c <_vfprintf_r+0xc04>
80006c4e:	1c 37       	cp.w	r7,lr
80006c50:	c5 e4       	brge	80006d0c <_vfprintf_r+0xcb4>
80006c52:	fa c9 f9 34 	sub	r9,sp,-1740
80006c56:	f2 07 00 38 	add	r8,r9,r7<<0x3
80006c5a:	c7 58       	rjmp	80006d44 <_vfprintf_r+0xcec>
80006c5c:	2f f0       	sub	r0,-1
80006c5e:	1c 39       	cp.w	r9,lr
80006c60:	c7 54       	brge	80006d4a <_vfprintf_r+0xcf2>
80006c62:	c5 08       	rjmp	80006d02 <_vfprintf_r+0xcaa>
80006c64:	40 98       	lddsp	r8,sp[0x24]
80006c66:	ed b8 00 06 	bld	r8,0x6
80006c6a:	c4 61       	brne	80006cf6 <_vfprintf_r+0xc9e>
80006c6c:	fa fe 06 c4 	ld.w	lr,sp[1732]
80006c70:	58 02       	cp.w	r2,0
80006c72:	c1 d0       	breq	80006cac <_vfprintf_r+0xc54>
80006c74:	1c 37       	cp.w	r7,lr
80006c76:	c0 64       	brge	80006c82 <_vfprintf_r+0xc2a>
80006c78:	fa cc f9 34 	sub	r12,sp,-1740
80006c7c:	f8 07 00 38 	add	r8,r12,r7<<0x3
80006c80:	c1 d8       	rjmp	80006cba <_vfprintf_r+0xc62>
80006c82:	fa c8 f9 40 	sub	r8,sp,-1728
80006c86:	1a d8       	st.w	--sp,r8
80006c88:	fa c8 fa a8 	sub	r8,sp,-1368
80006c8c:	0e 9b       	mov	r11,r7
80006c8e:	1a d8       	st.w	--sp,r8
80006c90:	fa c8 fb a4 	sub	r8,sp,-1116
80006c94:	06 9a       	mov	r10,r3
80006c96:	1a d8       	st.w	--sp,r8
80006c98:	fa c8 f9 30 	sub	r8,sp,-1744
80006c9c:	fa c9 ff a4 	sub	r9,sp,-92
80006ca0:	40 8c       	lddsp	r12,sp[0x20]
80006ca2:	fe b0 f8 39 	rcall	80005d14 <get_arg>
80006ca6:	2f dd       	sub	sp,-12
80006ca8:	78 0b       	ld.w	r11,r12[0x0]
80006caa:	c2 28       	rjmp	80006cee <_vfprintf_r+0xc96>
80006cac:	2f f0       	sub	r0,-1
80006cae:	1c 39       	cp.w	r9,lr
80006cb0:	c0 84       	brge	80006cc0 <_vfprintf_r+0xc68>
80006cb2:	fa cb f9 34 	sub	r11,sp,-1740
80006cb6:	f6 07 00 38 	add	r8,r11,r7<<0x3
80006cba:	f0 fb fd 88 	ld.w	r11,r8[-632]
80006cbe:	c1 88       	rjmp	80006cee <_vfprintf_r+0xc96>
80006cc0:	41 4c       	lddsp	r12,sp[0x50]
80006cc2:	59 fe       	cp.w	lr,31
80006cc4:	e0 89 00 11 	brgt	80006ce6 <_vfprintf_r+0xc8e>
80006cc8:	f8 c8 ff fc 	sub	r8,r12,-4
80006ccc:	51 48       	stdsp	sp[0x50],r8
80006cce:	78 0b       	ld.w	r11,r12[0x0]
80006cd0:	fa ca f9 34 	sub	r10,sp,-1740
80006cd4:	f4 0e 00 38 	add	r8,r10,lr<<0x3
80006cd8:	f1 4b fd 88 	st.w	r8[-632],r11
80006cdc:	fc c8 ff ff 	sub	r8,lr,-1
80006ce0:	fb 48 06 c4 	st.w	sp[1732],r8
80006ce4:	c0 58       	rjmp	80006cee <_vfprintf_r+0xc96>
80006ce6:	f8 c8 ff fc 	sub	r8,r12,-4
80006cea:	78 0b       	ld.w	r11,r12[0x0]
80006cec:	51 48       	stdsp	sp[0x50],r8
80006cee:	40 a9       	lddsp	r9,sp[0x28]
80006cf0:	b6 09       	st.h	r11[0x0],r9
80006cf2:	fe 9f fa 48 	bral	80006182 <_vfprintf_r+0x12a>
80006cf6:	fa fe 06 c4 	ld.w	lr,sp[1732]
80006cfa:	58 02       	cp.w	r2,0
80006cfc:	c1 d0       	breq	80006d36 <_vfprintf_r+0xcde>
80006cfe:	1c 37       	cp.w	r7,lr
80006d00:	c0 64       	brge	80006d0c <_vfprintf_r+0xcb4>
80006d02:	fa cc f9 34 	sub	r12,sp,-1740
80006d06:	f8 07 00 38 	add	r8,r12,r7<<0x3
80006d0a:	c1 d8       	rjmp	80006d44 <_vfprintf_r+0xcec>
80006d0c:	fa c8 f9 40 	sub	r8,sp,-1728
80006d10:	1a d8       	st.w	--sp,r8
80006d12:	fa c8 fa a8 	sub	r8,sp,-1368
80006d16:	0e 9b       	mov	r11,r7
80006d18:	1a d8       	st.w	--sp,r8
80006d1a:	fa c8 fb a4 	sub	r8,sp,-1116
80006d1e:	06 9a       	mov	r10,r3
80006d20:	1a d8       	st.w	--sp,r8
80006d22:	fa c8 f9 30 	sub	r8,sp,-1744
80006d26:	fa c9 ff a4 	sub	r9,sp,-92
80006d2a:	40 8c       	lddsp	r12,sp[0x20]
80006d2c:	fe b0 f7 f4 	rcall	80005d14 <get_arg>
80006d30:	2f dd       	sub	sp,-12
80006d32:	78 0b       	ld.w	r11,r12[0x0]
80006d34:	c2 28       	rjmp	80006d78 <_vfprintf_r+0xd20>
80006d36:	2f f0       	sub	r0,-1
80006d38:	1c 39       	cp.w	r9,lr
80006d3a:	c0 84       	brge	80006d4a <_vfprintf_r+0xcf2>
80006d3c:	fa cb f9 34 	sub	r11,sp,-1740
80006d40:	f6 07 00 38 	add	r8,r11,r7<<0x3
80006d44:	f0 fb fd 88 	ld.w	r11,r8[-632]
80006d48:	c1 88       	rjmp	80006d78 <_vfprintf_r+0xd20>
80006d4a:	41 4c       	lddsp	r12,sp[0x50]
80006d4c:	59 fe       	cp.w	lr,31
80006d4e:	e0 89 00 11 	brgt	80006d70 <_vfprintf_r+0xd18>
80006d52:	f8 c8 ff fc 	sub	r8,r12,-4
80006d56:	51 48       	stdsp	sp[0x50],r8
80006d58:	fa ca f9 34 	sub	r10,sp,-1740
80006d5c:	78 0b       	ld.w	r11,r12[0x0]
80006d5e:	f4 0e 00 38 	add	r8,r10,lr<<0x3
80006d62:	f1 4b fd 88 	st.w	r8[-632],r11
80006d66:	fc c8 ff ff 	sub	r8,lr,-1
80006d6a:	fb 48 06 c4 	st.w	sp[1732],r8
80006d6e:	c0 58       	rjmp	80006d78 <_vfprintf_r+0xd20>
80006d70:	78 0b       	ld.w	r11,r12[0x0]
80006d72:	f8 c8 ff fc 	sub	r8,r12,-4
80006d76:	51 48       	stdsp	sp[0x50],r8
80006d78:	40 a9       	lddsp	r9,sp[0x28]
80006d7a:	97 09       	st.w	r11[0x0],r9
80006d7c:	fe 9f fa 03 	bral	80006182 <_vfprintf_r+0x12a>
80006d80:	40 98       	lddsp	r8,sp[0x24]
80006d82:	a5 a8       	sbr	r8,0x4
80006d84:	50 98       	stdsp	sp[0x24],r8
80006d86:	00 99       	mov	r9,r0
80006d88:	40 98       	lddsp	r8,sp[0x24]
80006d8a:	ed b8 00 05 	bld	r8,0x5
80006d8e:	c5 01       	brne	80006e2e <_vfprintf_r+0xdd6>
80006d90:	fa fe 06 c4 	ld.w	lr,sp[1732]
80006d94:	58 02       	cp.w	r2,0
80006d96:	c2 20       	breq	80006dda <_vfprintf_r+0xd82>
80006d98:	1c 37       	cp.w	r7,lr
80006d9a:	c0 84       	brge	80006daa <_vfprintf_r+0xd52>
80006d9c:	fa cc f9 34 	sub	r12,sp,-1740
80006da0:	f8 07 00 38 	add	r8,r12,r7<<0x3
80006da4:	f0 e4 fd 88 	ld.d	r4,r8[-632]
80006da8:	c1 68       	rjmp	80006dd4 <_vfprintf_r+0xd7c>
80006daa:	fa c8 f9 40 	sub	r8,sp,-1728
80006dae:	1a d8       	st.w	--sp,r8
80006db0:	fa c8 fa a8 	sub	r8,sp,-1368
80006db4:	1a d8       	st.w	--sp,r8
80006db6:	fa c8 fb a4 	sub	r8,sp,-1116
80006dba:	06 9a       	mov	r10,r3
80006dbc:	1a d8       	st.w	--sp,r8
80006dbe:	0e 9b       	mov	r11,r7
80006dc0:	fa c8 f9 30 	sub	r8,sp,-1744
80006dc4:	fa c9 ff a4 	sub	r9,sp,-92
80006dc8:	40 8c       	lddsp	r12,sp[0x20]
80006dca:	fe b0 f7 a5 	rcall	80005d14 <get_arg>
80006dce:	2f dd       	sub	sp,-12
80006dd0:	f8 e4 00 00 	ld.d	r4,r12[0]
80006dd4:	30 0e       	mov	lr,0
80006dd6:	e0 8f 03 9e 	bral	80007512 <_vfprintf_r+0x14ba>
80006dda:	2f f0       	sub	r0,-1
80006ddc:	1c 39       	cp.w	r9,lr
80006dde:	c0 a4       	brge	80006df2 <_vfprintf_r+0xd9a>
80006de0:	fa cb f9 34 	sub	r11,sp,-1740
80006de4:	04 9e       	mov	lr,r2
80006de6:	f6 07 00 38 	add	r8,r11,r7<<0x3
80006dea:	f0 e4 fd 88 	ld.d	r4,r8[-632]
80006dee:	e0 8f 03 92 	bral	80007512 <_vfprintf_r+0x14ba>
80006df2:	41 4c       	lddsp	r12,sp[0x50]
80006df4:	59 fe       	cp.w	lr,31
80006df6:	e0 89 00 14 	brgt	80006e1e <_vfprintf_r+0xdc6>
80006dfa:	f8 c8 ff f8 	sub	r8,r12,-8
80006dfe:	51 48       	stdsp	sp[0x50],r8
80006e00:	f8 e4 00 00 	ld.d	r4,r12[0]
80006e04:	fa ca f9 34 	sub	r10,sp,-1740
80006e08:	f4 0e 00 38 	add	r8,r10,lr<<0x3
80006e0c:	f0 e5 fd 88 	st.d	r8[-632],r4
80006e10:	fc c8 ff ff 	sub	r8,lr,-1
80006e14:	04 9e       	mov	lr,r2
80006e16:	fb 48 06 c4 	st.w	sp[1732],r8
80006e1a:	e0 8f 03 7c 	bral	80007512 <_vfprintf_r+0x14ba>
80006e1e:	f8 c8 ff f8 	sub	r8,r12,-8
80006e22:	f8 e4 00 00 	ld.d	r4,r12[0]
80006e26:	04 9e       	mov	lr,r2
80006e28:	51 48       	stdsp	sp[0x50],r8
80006e2a:	e0 8f 03 74 	bral	80007512 <_vfprintf_r+0x14ba>
80006e2e:	40 98       	lddsp	r8,sp[0x24]
80006e30:	ed b8 00 04 	bld	r8,0x4
80006e34:	c1 e1       	brne	80006e70 <_vfprintf_r+0xe18>
80006e36:	fa fe 06 c4 	ld.w	lr,sp[1732]
80006e3a:	58 02       	cp.w	r2,0
80006e3c:	c0 50       	breq	80006e46 <_vfprintf_r+0xdee>
80006e3e:	1c 37       	cp.w	r7,lr
80006e40:	e0 85 00 85 	brlt	80006f4a <_vfprintf_r+0xef2>
80006e44:	c6 b8       	rjmp	80006f1a <_vfprintf_r+0xec2>
80006e46:	2f f0       	sub	r0,-1
80006e48:	1c 39       	cp.w	r9,lr
80006e4a:	c0 64       	brge	80006e56 <_vfprintf_r+0xdfe>
80006e4c:	fa cc f9 34 	sub	r12,sp,-1740
80006e50:	f8 07 00 38 	add	r8,r12,r7<<0x3
80006e54:	c7 f8       	rjmp	80006f52 <_vfprintf_r+0xefa>
80006e56:	41 4c       	lddsp	r12,sp[0x50]
80006e58:	59 fe       	cp.w	lr,31
80006e5a:	e0 89 00 92 	brgt	80006f7e <_vfprintf_r+0xf26>
80006e5e:	f8 c8 ff fc 	sub	r8,r12,-4
80006e62:	fa ca f9 34 	sub	r10,sp,-1740
80006e66:	51 48       	stdsp	sp[0x50],r8
80006e68:	78 0b       	ld.w	r11,r12[0x0]
80006e6a:	f4 0e 00 38 	add	r8,r10,lr<<0x3
80006e6e:	c8 18       	rjmp	80006f70 <_vfprintf_r+0xf18>
80006e70:	40 98       	lddsp	r8,sp[0x24]
80006e72:	ed b8 00 06 	bld	r8,0x6
80006e76:	c4 71       	brne	80006f04 <_vfprintf_r+0xeac>
80006e78:	fa fe 06 c4 	ld.w	lr,sp[1732]
80006e7c:	58 02       	cp.w	r2,0
80006e7e:	c1 d0       	breq	80006eb8 <_vfprintf_r+0xe60>
80006e80:	1c 37       	cp.w	r7,lr
80006e82:	c0 64       	brge	80006e8e <_vfprintf_r+0xe36>
80006e84:	fa c9 f9 34 	sub	r9,sp,-1740
80006e88:	f2 07 00 38 	add	r8,r9,r7<<0x3
80006e8c:	c1 d8       	rjmp	80006ec6 <_vfprintf_r+0xe6e>
80006e8e:	fa c8 f9 40 	sub	r8,sp,-1728
80006e92:	1a d8       	st.w	--sp,r8
80006e94:	fa c8 fa a8 	sub	r8,sp,-1368
80006e98:	0e 9b       	mov	r11,r7
80006e9a:	1a d8       	st.w	--sp,r8
80006e9c:	fa c8 fb a4 	sub	r8,sp,-1116
80006ea0:	06 9a       	mov	r10,r3
80006ea2:	1a d8       	st.w	--sp,r8
80006ea4:	fa c8 f9 30 	sub	r8,sp,-1744
80006ea8:	fa c9 ff a4 	sub	r9,sp,-92
80006eac:	40 8c       	lddsp	r12,sp[0x20]
80006eae:	fe b0 f7 33 	rcall	80005d14 <get_arg>
80006eb2:	2f dd       	sub	sp,-12
80006eb4:	98 1b       	ld.sh	r11,r12[0x2]
80006eb6:	c2 48       	rjmp	80006efe <_vfprintf_r+0xea6>
80006eb8:	2f f0       	sub	r0,-1
80006eba:	1c 39       	cp.w	r9,lr
80006ebc:	c0 84       	brge	80006ecc <_vfprintf_r+0xe74>
80006ebe:	fa cc f9 34 	sub	r12,sp,-1740
80006ec2:	f8 07 00 38 	add	r8,r12,r7<<0x3
80006ec6:	f1 0b fd 8a 	ld.sh	r11,r8[-630]
80006eca:	c1 a8       	rjmp	80006efe <_vfprintf_r+0xea6>
80006ecc:	41 4c       	lddsp	r12,sp[0x50]
80006ece:	59 fe       	cp.w	lr,31
80006ed0:	e0 89 00 13 	brgt	80006ef6 <_vfprintf_r+0xe9e>
80006ed4:	f8 c8 ff fc 	sub	r8,r12,-4
80006ed8:	51 48       	stdsp	sp[0x50],r8
80006eda:	78 09       	ld.w	r9,r12[0x0]
80006edc:	fa cb f9 34 	sub	r11,sp,-1740
80006ee0:	f6 0e 00 38 	add	r8,r11,lr<<0x3
80006ee4:	f1 49 fd 88 	st.w	r8[-632],r9
80006ee8:	f7 d9 b0 10 	bfexts	r11,r9,0x0,0x10
80006eec:	fc c8 ff ff 	sub	r8,lr,-1
80006ef0:	fb 48 06 c4 	st.w	sp[1732],r8
80006ef4:	c0 58       	rjmp	80006efe <_vfprintf_r+0xea6>
80006ef6:	f8 c8 ff fc 	sub	r8,r12,-4
80006efa:	98 1b       	ld.sh	r11,r12[0x2]
80006efc:	51 48       	stdsp	sp[0x50],r8
80006efe:	e9 db c0 10 	bfextu	r4,r11,0x0,0x10
80006f02:	c4 38       	rjmp	80006f88 <_vfprintf_r+0xf30>
80006f04:	fa fe 06 c4 	ld.w	lr,sp[1732]
80006f08:	58 02       	cp.w	r2,0
80006f0a:	c1 d0       	breq	80006f44 <_vfprintf_r+0xeec>
80006f0c:	1c 37       	cp.w	r7,lr
80006f0e:	c0 64       	brge	80006f1a <_vfprintf_r+0xec2>
80006f10:	fa ca f9 34 	sub	r10,sp,-1740
80006f14:	f4 07 00 38 	add	r8,r10,r7<<0x3
80006f18:	c1 d8       	rjmp	80006f52 <_vfprintf_r+0xefa>
80006f1a:	fa c8 f9 40 	sub	r8,sp,-1728
80006f1e:	1a d8       	st.w	--sp,r8
80006f20:	fa c8 fa a8 	sub	r8,sp,-1368
80006f24:	0e 9b       	mov	r11,r7
80006f26:	1a d8       	st.w	--sp,r8
80006f28:	fa c8 fb a4 	sub	r8,sp,-1116
80006f2c:	06 9a       	mov	r10,r3
80006f2e:	1a d8       	st.w	--sp,r8
80006f30:	fa c8 f9 30 	sub	r8,sp,-1744
80006f34:	fa c9 ff a4 	sub	r9,sp,-92
80006f38:	40 8c       	lddsp	r12,sp[0x20]
80006f3a:	fe b0 f6 ed 	rcall	80005d14 <get_arg>
80006f3e:	2f dd       	sub	sp,-12
80006f40:	78 0b       	ld.w	r11,r12[0x0]
80006f42:	c2 28       	rjmp	80006f86 <_vfprintf_r+0xf2e>
80006f44:	2f f0       	sub	r0,-1
80006f46:	1c 39       	cp.w	r9,lr
80006f48:	c0 84       	brge	80006f58 <_vfprintf_r+0xf00>
80006f4a:	fa c9 f9 34 	sub	r9,sp,-1740
80006f4e:	f2 07 00 38 	add	r8,r9,r7<<0x3
80006f52:	f0 fb fd 88 	ld.w	r11,r8[-632]
80006f56:	c1 88       	rjmp	80006f86 <_vfprintf_r+0xf2e>
80006f58:	41 4c       	lddsp	r12,sp[0x50]
80006f5a:	59 fe       	cp.w	lr,31
80006f5c:	e0 89 00 11 	brgt	80006f7e <_vfprintf_r+0xf26>
80006f60:	f8 c8 ff fc 	sub	r8,r12,-4
80006f64:	78 0b       	ld.w	r11,r12[0x0]
80006f66:	51 48       	stdsp	sp[0x50],r8
80006f68:	fa cc f9 34 	sub	r12,sp,-1740
80006f6c:	f8 0e 00 38 	add	r8,r12,lr<<0x3
80006f70:	f1 4b fd 88 	st.w	r8[-632],r11
80006f74:	fc c8 ff ff 	sub	r8,lr,-1
80006f78:	fb 48 06 c4 	st.w	sp[1732],r8
80006f7c:	c0 58       	rjmp	80006f86 <_vfprintf_r+0xf2e>
80006f7e:	78 0b       	ld.w	r11,r12[0x0]
80006f80:	f8 c8 ff fc 	sub	r8,r12,-4
80006f84:	51 48       	stdsp	sp[0x50],r8
80006f86:	16 94       	mov	r4,r11
80006f88:	30 0e       	mov	lr,0
80006f8a:	1c 95       	mov	r5,lr
80006f8c:	e0 8f 02 c3 	bral	80007512 <_vfprintf_r+0x14ba>
80006f90:	00 98       	mov	r8,r0
80006f92:	fa fe 06 c4 	ld.w	lr,sp[1732]
80006f96:	58 02       	cp.w	r2,0
80006f98:	c1 c0       	breq	80006fd0 <_vfprintf_r+0xf78>
80006f9a:	1c 37       	cp.w	r7,lr
80006f9c:	c0 64       	brge	80006fa8 <_vfprintf_r+0xf50>
80006f9e:	fa cb f9 34 	sub	r11,sp,-1740
80006fa2:	f6 07 00 38 	add	r8,r11,r7<<0x3
80006fa6:	c1 c8       	rjmp	80006fde <_vfprintf_r+0xf86>
80006fa8:	fa c8 f9 40 	sub	r8,sp,-1728
80006fac:	1a d8       	st.w	--sp,r8
80006fae:	fa c8 fa a8 	sub	r8,sp,-1368
80006fb2:	1a d8       	st.w	--sp,r8
80006fb4:	fa c8 fb a4 	sub	r8,sp,-1116
80006fb8:	06 9a       	mov	r10,r3
80006fba:	1a d8       	st.w	--sp,r8
80006fbc:	0e 9b       	mov	r11,r7
80006fbe:	fa c8 f9 30 	sub	r8,sp,-1744
80006fc2:	fa c9 ff a4 	sub	r9,sp,-92
80006fc6:	40 8c       	lddsp	r12,sp[0x20]
80006fc8:	fe b0 f6 a6 	rcall	80005d14 <get_arg>
80006fcc:	2f dd       	sub	sp,-12
80006fce:	c2 18       	rjmp	80007010 <_vfprintf_r+0xfb8>
80006fd0:	2f f0       	sub	r0,-1
80006fd2:	1c 38       	cp.w	r8,lr
80006fd4:	c0 84       	brge	80006fe4 <_vfprintf_r+0xf8c>
80006fd6:	fa ca f9 34 	sub	r10,sp,-1740
80006fda:	f4 07 00 38 	add	r8,r10,r7<<0x3
80006fde:	f0 fc fd 88 	ld.w	r12,r8[-632]
80006fe2:	c1 88       	rjmp	80007012 <_vfprintf_r+0xfba>
80006fe4:	41 4c       	lddsp	r12,sp[0x50]
80006fe6:	59 fe       	cp.w	lr,31
80006fe8:	e0 89 00 11 	brgt	8000700a <_vfprintf_r+0xfb2>
80006fec:	f8 c8 ff fc 	sub	r8,r12,-4
80006ff0:	51 48       	stdsp	sp[0x50],r8
80006ff2:	fa c9 f9 34 	sub	r9,sp,-1740
80006ff6:	78 0c       	ld.w	r12,r12[0x0]
80006ff8:	f2 0e 00 38 	add	r8,r9,lr<<0x3
80006ffc:	f1 4c fd 88 	st.w	r8[-632],r12
80007000:	fc c8 ff ff 	sub	r8,lr,-1
80007004:	fb 48 06 c4 	st.w	sp[1732],r8
80007008:	c0 58       	rjmp	80007012 <_vfprintf_r+0xfba>
8000700a:	f8 c8 ff fc 	sub	r8,r12,-4
8000700e:	51 48       	stdsp	sp[0x50],r8
80007010:	78 0c       	ld.w	r12,r12[0x0]
80007012:	40 98       	lddsp	r8,sp[0x24]
80007014:	a1 b8       	sbr	r8,0x1
80007016:	50 98       	stdsp	sp[0x24],r8
80007018:	33 08       	mov	r8,48
8000701a:	18 94       	mov	r4,r12
8000701c:	fb 68 06 c8 	st.b	sp[1736],r8
80007020:	37 8c       	mov	r12,120
80007022:	37 88       	mov	r8,120
80007024:	4d 5b       	lddpc	r11,80007178 <_vfprintf_r+0x1120>
80007026:	30 05       	mov	r5,0
80007028:	fb 68 06 c9 	st.b	sp[1737],r8
8000702c:	50 8c       	stdsp	sp[0x20],r12
8000702e:	30 2e       	mov	lr,2
80007030:	51 2b       	stdsp	sp[0x48],r11
80007032:	e0 8f 02 70 	bral	80007512 <_vfprintf_r+0x14ba>
80007036:	30 0a       	mov	r10,0
80007038:	fb 6a 06 cb 	st.b	sp[1739],r10
8000703c:	00 98       	mov	r8,r0
8000703e:	fa fe 06 c4 	ld.w	lr,sp[1732]
80007042:	58 02       	cp.w	r2,0
80007044:	c1 d0       	breq	8000707e <_vfprintf_r+0x1026>
80007046:	1c 37       	cp.w	r7,lr
80007048:	c0 64       	brge	80007054 <_vfprintf_r+0xffc>
8000704a:	fa c9 f9 34 	sub	r9,sp,-1740
8000704e:	f2 07 00 38 	add	r8,r9,r7<<0x3
80007052:	c1 d8       	rjmp	8000708c <_vfprintf_r+0x1034>
80007054:	fa c8 f9 40 	sub	r8,sp,-1728
80007058:	1a d8       	st.w	--sp,r8
8000705a:	fa c8 fa a8 	sub	r8,sp,-1368
8000705e:	1a d8       	st.w	--sp,r8
80007060:	fa c8 fb a4 	sub	r8,sp,-1116
80007064:	06 9a       	mov	r10,r3
80007066:	1a d8       	st.w	--sp,r8
80007068:	0e 9b       	mov	r11,r7
8000706a:	fa c8 f9 30 	sub	r8,sp,-1744
8000706e:	fa c9 ff a4 	sub	r9,sp,-92
80007072:	40 8c       	lddsp	r12,sp[0x20]
80007074:	fe b0 f6 50 	rcall	80005d14 <get_arg>
80007078:	2f dd       	sub	sp,-12
8000707a:	78 03       	ld.w	r3,r12[0x0]
8000707c:	c2 28       	rjmp	800070c0 <_vfprintf_r+0x1068>
8000707e:	2f f0       	sub	r0,-1
80007080:	1c 38       	cp.w	r8,lr
80007082:	c0 84       	brge	80007092 <_vfprintf_r+0x103a>
80007084:	fa cc f9 34 	sub	r12,sp,-1740
80007088:	f8 07 00 38 	add	r8,r12,r7<<0x3
8000708c:	f0 f3 fd 88 	ld.w	r3,r8[-632]
80007090:	c1 88       	rjmp	800070c0 <_vfprintf_r+0x1068>
80007092:	41 4c       	lddsp	r12,sp[0x50]
80007094:	59 fe       	cp.w	lr,31
80007096:	e0 89 00 11 	brgt	800070b8 <_vfprintf_r+0x1060>
8000709a:	f8 c8 ff fc 	sub	r8,r12,-4
8000709e:	51 48       	stdsp	sp[0x50],r8
800070a0:	78 03       	ld.w	r3,r12[0x0]
800070a2:	fa cb f9 34 	sub	r11,sp,-1740
800070a6:	f6 0e 00 38 	add	r8,r11,lr<<0x3
800070aa:	f1 43 fd 88 	st.w	r8[-632],r3
800070ae:	fc c8 ff ff 	sub	r8,lr,-1
800070b2:	fb 48 06 c4 	st.w	sp[1732],r8
800070b6:	c0 58       	rjmp	800070c0 <_vfprintf_r+0x1068>
800070b8:	f8 c8 ff fc 	sub	r8,r12,-4
800070bc:	78 03       	ld.w	r3,r12[0x0]
800070be:	51 48       	stdsp	sp[0x50],r8
800070c0:	40 ca       	lddsp	r10,sp[0x30]
800070c2:	58 0a       	cp.w	r10,0
800070c4:	c0 f5       	brlt	800070e2 <_vfprintf_r+0x108a>
800070c6:	30 0b       	mov	r11,0
800070c8:	06 9c       	mov	r12,r3
800070ca:	e0 a0 12 47 	rcall	80009558 <memchr>
800070ce:	e0 80 02 b5 	breq	80007638 <_vfprintf_r+0x15e0>
800070d2:	f8 03 01 07 	sub	r7,r12,r3
800070d6:	40 c9       	lddsp	r9,sp[0x30]
800070d8:	12 37       	cp.w	r7,r9
800070da:	e0 89 02 af 	brgt	80007638 <_vfprintf_r+0x15e0>
800070de:	e0 8f 02 ae 	bral	8000763a <_vfprintf_r+0x15e2>
800070e2:	06 9c       	mov	r12,r3
800070e4:	30 02       	mov	r2,0
800070e6:	e0 8f 02 87 	bral	800075f4 <_vfprintf_r+0x159c>
800070ea:	40 98       	lddsp	r8,sp[0x24]
800070ec:	a5 a8       	sbr	r8,0x4
800070ee:	50 98       	stdsp	sp[0x24],r8
800070f0:	00 99       	mov	r9,r0
800070f2:	40 98       	lddsp	r8,sp[0x24]
800070f4:	ed b8 00 05 	bld	r8,0x5
800070f8:	c4 a1       	brne	8000718c <_vfprintf_r+0x1134>
800070fa:	fa fe 06 c4 	ld.w	lr,sp[1732]
800070fe:	58 02       	cp.w	r2,0
80007100:	c1 e0       	breq	8000713c <_vfprintf_r+0x10e4>
80007102:	1c 37       	cp.w	r7,lr
80007104:	c0 64       	brge	80007110 <_vfprintf_r+0x10b8>
80007106:	fa cc f9 34 	sub	r12,sp,-1740
8000710a:	f8 07 00 38 	add	r8,r12,r7<<0x3
8000710e:	c1 e8       	rjmp	8000714a <_vfprintf_r+0x10f2>
80007110:	fa c8 f9 40 	sub	r8,sp,-1728
80007114:	1a d8       	st.w	--sp,r8
80007116:	fa c8 fa a8 	sub	r8,sp,-1368
8000711a:	1a d8       	st.w	--sp,r8
8000711c:	fa c8 fb a4 	sub	r8,sp,-1116
80007120:	06 9a       	mov	r10,r3
80007122:	1a d8       	st.w	--sp,r8
80007124:	0e 9b       	mov	r11,r7
80007126:	fa c8 f9 30 	sub	r8,sp,-1744
8000712a:	fa c9 ff a4 	sub	r9,sp,-92
8000712e:	40 8c       	lddsp	r12,sp[0x20]
80007130:	fe b0 f5 f2 	rcall	80005d14 <get_arg>
80007134:	2f dd       	sub	sp,-12
80007136:	f8 e4 00 00 	ld.d	r4,r12[0]
8000713a:	c2 68       	rjmp	80007186 <_vfprintf_r+0x112e>
8000713c:	2f f0       	sub	r0,-1
8000713e:	1c 39       	cp.w	r9,lr
80007140:	c0 84       	brge	80007150 <_vfprintf_r+0x10f8>
80007142:	fa cb f9 34 	sub	r11,sp,-1740
80007146:	f6 07 00 38 	add	r8,r11,r7<<0x3
8000714a:	f0 e4 fd 88 	ld.d	r4,r8[-632]
8000714e:	c1 c8       	rjmp	80007186 <_vfprintf_r+0x112e>
80007150:	41 4c       	lddsp	r12,sp[0x50]
80007152:	59 fe       	cp.w	lr,31
80007154:	e0 89 00 14 	brgt	8000717c <_vfprintf_r+0x1124>
80007158:	f8 c8 ff f8 	sub	r8,r12,-8
8000715c:	51 48       	stdsp	sp[0x50],r8
8000715e:	f8 e4 00 00 	ld.d	r4,r12[0]
80007162:	fa ca f9 34 	sub	r10,sp,-1740
80007166:	f4 0e 00 38 	add	r8,r10,lr<<0x3
8000716a:	f0 e5 fd 88 	st.d	r8[-632],r4
8000716e:	fc c8 ff ff 	sub	r8,lr,-1
80007172:	fb 48 06 c4 	st.w	sp[1732],r8
80007176:	c0 88       	rjmp	80007186 <_vfprintf_r+0x112e>
80007178:	80 00       	ld.sh	r0,r0[0x0]
8000717a:	bf fc       	*unknown*
8000717c:	f8 c8 ff f8 	sub	r8,r12,-8
80007180:	f8 e4 00 00 	ld.d	r4,r12[0]
80007184:	51 48       	stdsp	sp[0x50],r8
80007186:	30 1e       	mov	lr,1
80007188:	e0 8f 01 c5 	bral	80007512 <_vfprintf_r+0x14ba>
8000718c:	40 98       	lddsp	r8,sp[0x24]
8000718e:	ed b8 00 04 	bld	r8,0x4
80007192:	c1 e1       	brne	800071ce <_vfprintf_r+0x1176>
80007194:	fa fe 06 c4 	ld.w	lr,sp[1732]
80007198:	58 02       	cp.w	r2,0
8000719a:	c0 50       	breq	800071a4 <_vfprintf_r+0x114c>
8000719c:	1c 37       	cp.w	r7,lr
8000719e:	e0 85 00 85 	brlt	800072a8 <_vfprintf_r+0x1250>
800071a2:	c6 b8       	rjmp	80007278 <_vfprintf_r+0x1220>
800071a4:	2f f0       	sub	r0,-1
800071a6:	1c 39       	cp.w	r9,lr
800071a8:	c0 64       	brge	800071b4 <_vfprintf_r+0x115c>
800071aa:	fa cc f9 34 	sub	r12,sp,-1740
800071ae:	f8 07 00 38 	add	r8,r12,r7<<0x3
800071b2:	c7 f8       	rjmp	800072b0 <_vfprintf_r+0x1258>
800071b4:	41 4c       	lddsp	r12,sp[0x50]
800071b6:	59 fe       	cp.w	lr,31
800071b8:	e0 89 00 92 	brgt	800072dc <_vfprintf_r+0x1284>
800071bc:	f8 c8 ff fc 	sub	r8,r12,-4
800071c0:	fa ca f9 34 	sub	r10,sp,-1740
800071c4:	51 48       	stdsp	sp[0x50],r8
800071c6:	78 0b       	ld.w	r11,r12[0x0]
800071c8:	f4 0e 00 38 	add	r8,r10,lr<<0x3
800071cc:	c8 18       	rjmp	800072ce <_vfprintf_r+0x1276>
800071ce:	40 98       	lddsp	r8,sp[0x24]
800071d0:	ed b8 00 06 	bld	r8,0x6
800071d4:	c4 71       	brne	80007262 <_vfprintf_r+0x120a>
800071d6:	fa fe 06 c4 	ld.w	lr,sp[1732]
800071da:	58 02       	cp.w	r2,0
800071dc:	c1 d0       	breq	80007216 <_vfprintf_r+0x11be>
800071de:	1c 37       	cp.w	r7,lr
800071e0:	c0 64       	brge	800071ec <_vfprintf_r+0x1194>
800071e2:	fa c9 f9 34 	sub	r9,sp,-1740
800071e6:	f2 07 00 38 	add	r8,r9,r7<<0x3
800071ea:	c1 d8       	rjmp	80007224 <_vfprintf_r+0x11cc>
800071ec:	fa c8 f9 40 	sub	r8,sp,-1728
800071f0:	1a d8       	st.w	--sp,r8
800071f2:	fa c8 fa a8 	sub	r8,sp,-1368
800071f6:	0e 9b       	mov	r11,r7
800071f8:	1a d8       	st.w	--sp,r8
800071fa:	fa c8 fb a4 	sub	r8,sp,-1116
800071fe:	06 9a       	mov	r10,r3
80007200:	1a d8       	st.w	--sp,r8
80007202:	fa c8 f9 30 	sub	r8,sp,-1744
80007206:	fa c9 ff a4 	sub	r9,sp,-92
8000720a:	40 8c       	lddsp	r12,sp[0x20]
8000720c:	fe b0 f5 84 	rcall	80005d14 <get_arg>
80007210:	2f dd       	sub	sp,-12
80007212:	98 1b       	ld.sh	r11,r12[0x2]
80007214:	c2 48       	rjmp	8000725c <_vfprintf_r+0x1204>
80007216:	2f f0       	sub	r0,-1
80007218:	1c 39       	cp.w	r9,lr
8000721a:	c0 84       	brge	8000722a <_vfprintf_r+0x11d2>
8000721c:	fa cc f9 34 	sub	r12,sp,-1740
80007220:	f8 07 00 38 	add	r8,r12,r7<<0x3
80007224:	f1 0b fd 8a 	ld.sh	r11,r8[-630]
80007228:	c1 a8       	rjmp	8000725c <_vfprintf_r+0x1204>
8000722a:	41 4c       	lddsp	r12,sp[0x50]
8000722c:	59 fe       	cp.w	lr,31
8000722e:	e0 89 00 13 	brgt	80007254 <_vfprintf_r+0x11fc>
80007232:	f8 c8 ff fc 	sub	r8,r12,-4
80007236:	51 48       	stdsp	sp[0x50],r8
80007238:	78 09       	ld.w	r9,r12[0x0]
8000723a:	fa cb f9 34 	sub	r11,sp,-1740
8000723e:	f6 0e 00 38 	add	r8,r11,lr<<0x3
80007242:	f1 49 fd 88 	st.w	r8[-632],r9
80007246:	f7 d9 b0 10 	bfexts	r11,r9,0x0,0x10
8000724a:	fc c8 ff ff 	sub	r8,lr,-1
8000724e:	fb 48 06 c4 	st.w	sp[1732],r8
80007252:	c0 58       	rjmp	8000725c <_vfprintf_r+0x1204>
80007254:	f8 c8 ff fc 	sub	r8,r12,-4
80007258:	98 1b       	ld.sh	r11,r12[0x2]
8000725a:	51 48       	stdsp	sp[0x50],r8
8000725c:	e9 db c0 10 	bfextu	r4,r11,0x0,0x10
80007260:	c4 38       	rjmp	800072e6 <_vfprintf_r+0x128e>
80007262:	fa fe 06 c4 	ld.w	lr,sp[1732]
80007266:	58 02       	cp.w	r2,0
80007268:	c1 d0       	breq	800072a2 <_vfprintf_r+0x124a>
8000726a:	1c 37       	cp.w	r7,lr
8000726c:	c0 64       	brge	80007278 <_vfprintf_r+0x1220>
8000726e:	fa ca f9 34 	sub	r10,sp,-1740
80007272:	f4 07 00 38 	add	r8,r10,r7<<0x3
80007276:	c1 d8       	rjmp	800072b0 <_vfprintf_r+0x1258>
80007278:	fa c8 f9 40 	sub	r8,sp,-1728
8000727c:	1a d8       	st.w	--sp,r8
8000727e:	fa c8 fa a8 	sub	r8,sp,-1368
80007282:	0e 9b       	mov	r11,r7
80007284:	1a d8       	st.w	--sp,r8
80007286:	fa c8 fb a4 	sub	r8,sp,-1116
8000728a:	06 9a       	mov	r10,r3
8000728c:	1a d8       	st.w	--sp,r8
8000728e:	fa c8 f9 30 	sub	r8,sp,-1744
80007292:	fa c9 ff a4 	sub	r9,sp,-92
80007296:	40 8c       	lddsp	r12,sp[0x20]
80007298:	fe b0 f5 3e 	rcall	80005d14 <get_arg>
8000729c:	2f dd       	sub	sp,-12
8000729e:	78 0b       	ld.w	r11,r12[0x0]
800072a0:	c2 28       	rjmp	800072e4 <_vfprintf_r+0x128c>
800072a2:	2f f0       	sub	r0,-1
800072a4:	1c 39       	cp.w	r9,lr
800072a6:	c0 84       	brge	800072b6 <_vfprintf_r+0x125e>
800072a8:	fa c9 f9 34 	sub	r9,sp,-1740
800072ac:	f2 07 00 38 	add	r8,r9,r7<<0x3
800072b0:	f0 fb fd 88 	ld.w	r11,r8[-632]
800072b4:	c1 88       	rjmp	800072e4 <_vfprintf_r+0x128c>
800072b6:	41 4c       	lddsp	r12,sp[0x50]
800072b8:	59 fe       	cp.w	lr,31
800072ba:	e0 89 00 11 	brgt	800072dc <_vfprintf_r+0x1284>
800072be:	f8 c8 ff fc 	sub	r8,r12,-4
800072c2:	78 0b       	ld.w	r11,r12[0x0]
800072c4:	51 48       	stdsp	sp[0x50],r8
800072c6:	fa cc f9 34 	sub	r12,sp,-1740
800072ca:	f8 0e 00 38 	add	r8,r12,lr<<0x3
800072ce:	f1 4b fd 88 	st.w	r8[-632],r11
800072d2:	fc c8 ff ff 	sub	r8,lr,-1
800072d6:	fb 48 06 c4 	st.w	sp[1732],r8
800072da:	c0 58       	rjmp	800072e4 <_vfprintf_r+0x128c>
800072dc:	78 0b       	ld.w	r11,r12[0x0]
800072de:	f8 c8 ff fc 	sub	r8,r12,-4
800072e2:	51 48       	stdsp	sp[0x50],r8
800072e4:	16 94       	mov	r4,r11
800072e6:	30 1e       	mov	lr,1
800072e8:	30 05       	mov	r5,0
800072ea:	c1 49       	rjmp	80007512 <_vfprintf_r+0x14ba>
800072ec:	00 99       	mov	r9,r0
800072ee:	4c fb       	lddpc	r11,80007428 <_vfprintf_r+0x13d0>
800072f0:	51 2b       	stdsp	sp[0x48],r11
800072f2:	40 98       	lddsp	r8,sp[0x24]
800072f4:	ed b8 00 05 	bld	r8,0x5
800072f8:	c4 61       	brne	80007384 <_vfprintf_r+0x132c>
800072fa:	fa fe 06 c4 	ld.w	lr,sp[1732]
800072fe:	58 02       	cp.w	r2,0
80007300:	c1 e0       	breq	8000733c <_vfprintf_r+0x12e4>
80007302:	1c 37       	cp.w	r7,lr
80007304:	c0 64       	brge	80007310 <_vfprintf_r+0x12b8>
80007306:	fa ca f9 34 	sub	r10,sp,-1740
8000730a:	f4 07 00 38 	add	r8,r10,r7<<0x3
8000730e:	c1 e8       	rjmp	8000734a <_vfprintf_r+0x12f2>
80007310:	fa c8 f9 40 	sub	r8,sp,-1728
80007314:	1a d8       	st.w	--sp,r8
80007316:	fa c8 fa a8 	sub	r8,sp,-1368
8000731a:	1a d8       	st.w	--sp,r8
8000731c:	fa c8 fb a4 	sub	r8,sp,-1116
80007320:	06 9a       	mov	r10,r3
80007322:	1a d8       	st.w	--sp,r8
80007324:	0e 9b       	mov	r11,r7
80007326:	fa c8 f9 30 	sub	r8,sp,-1744
8000732a:	fa c9 ff a4 	sub	r9,sp,-92
8000732e:	40 8c       	lddsp	r12,sp[0x20]
80007330:	fe b0 f4 f2 	rcall	80005d14 <get_arg>
80007334:	2f dd       	sub	sp,-12
80007336:	f8 e4 00 00 	ld.d	r4,r12[0]
8000733a:	cd 88       	rjmp	800074ea <_vfprintf_r+0x1492>
8000733c:	2f f0       	sub	r0,-1
8000733e:	1c 39       	cp.w	r9,lr
80007340:	c0 84       	brge	80007350 <_vfprintf_r+0x12f8>
80007342:	fa c9 f9 34 	sub	r9,sp,-1740
80007346:	f2 07 00 38 	add	r8,r9,r7<<0x3
8000734a:	f0 e4 fd 88 	ld.d	r4,r8[-632]
8000734e:	cc e8       	rjmp	800074ea <_vfprintf_r+0x1492>
80007350:	41 4c       	lddsp	r12,sp[0x50]
80007352:	59 fe       	cp.w	lr,31
80007354:	e0 89 00 12 	brgt	80007378 <_vfprintf_r+0x1320>
80007358:	f8 c8 ff f8 	sub	r8,r12,-8
8000735c:	51 48       	stdsp	sp[0x50],r8
8000735e:	f8 e4 00 00 	ld.d	r4,r12[0]
80007362:	fa cc f9 34 	sub	r12,sp,-1740
80007366:	f8 0e 00 38 	add	r8,r12,lr<<0x3
8000736a:	f0 e5 fd 88 	st.d	r8[-632],r4
8000736e:	fc c8 ff ff 	sub	r8,lr,-1
80007372:	fb 48 06 c4 	st.w	sp[1732],r8
80007376:	cb a8       	rjmp	800074ea <_vfprintf_r+0x1492>
80007378:	f8 c8 ff f8 	sub	r8,r12,-8
8000737c:	f8 e4 00 00 	ld.d	r4,r12[0]
80007380:	51 48       	stdsp	sp[0x50],r8
80007382:	cb 48       	rjmp	800074ea <_vfprintf_r+0x1492>
80007384:	40 98       	lddsp	r8,sp[0x24]
80007386:	ed b8 00 04 	bld	r8,0x4
8000738a:	c2 11       	brne	800073cc <_vfprintf_r+0x1374>
8000738c:	fa fe 06 c4 	ld.w	lr,sp[1732]
80007390:	58 02       	cp.w	r2,0
80007392:	c0 80       	breq	800073a2 <_vfprintf_r+0x134a>
80007394:	1c 37       	cp.w	r7,lr
80007396:	c7 24       	brge	8000747a <_vfprintf_r+0x1422>
80007398:	fa cb f9 34 	sub	r11,sp,-1740
8000739c:	f6 07 00 38 	add	r8,r11,r7<<0x3
800073a0:	c8 98       	rjmp	800074b2 <_vfprintf_r+0x145a>
800073a2:	2f f0       	sub	r0,-1
800073a4:	1c 39       	cp.w	r9,lr
800073a6:	c0 64       	brge	800073b2 <_vfprintf_r+0x135a>
800073a8:	fa ca f9 34 	sub	r10,sp,-1740
800073ac:	f4 07 00 38 	add	r8,r10,r7<<0x3
800073b0:	c8 18       	rjmp	800074b2 <_vfprintf_r+0x145a>
800073b2:	41 4c       	lddsp	r12,sp[0x50]
800073b4:	59 fe       	cp.w	lr,31
800073b6:	e0 89 00 94 	brgt	800074de <_vfprintf_r+0x1486>
800073ba:	f8 c8 ff fc 	sub	r8,r12,-4
800073be:	fa c9 f9 34 	sub	r9,sp,-1740
800073c2:	51 48       	stdsp	sp[0x50],r8
800073c4:	78 0b       	ld.w	r11,r12[0x0]
800073c6:	f2 0e 00 38 	add	r8,r9,lr<<0x3
800073ca:	c8 38       	rjmp	800074d0 <_vfprintf_r+0x1478>
800073cc:	40 98       	lddsp	r8,sp[0x24]
800073ce:	ed b8 00 06 	bld	r8,0x6
800073d2:	c4 91       	brne	80007464 <_vfprintf_r+0x140c>
800073d4:	fa fe 06 c4 	ld.w	lr,sp[1732]
800073d8:	58 02       	cp.w	r2,0
800073da:	c1 d0       	breq	80007414 <_vfprintf_r+0x13bc>
800073dc:	1c 37       	cp.w	r7,lr
800073de:	c0 64       	brge	800073ea <_vfprintf_r+0x1392>
800073e0:	fa cc f9 34 	sub	r12,sp,-1740
800073e4:	f8 07 00 38 	add	r8,r12,r7<<0x3
800073e8:	c1 d8       	rjmp	80007422 <_vfprintf_r+0x13ca>
800073ea:	fa c8 f9 40 	sub	r8,sp,-1728
800073ee:	1a d8       	st.w	--sp,r8
800073f0:	fa c8 fa a8 	sub	r8,sp,-1368
800073f4:	0e 9b       	mov	r11,r7
800073f6:	1a d8       	st.w	--sp,r8
800073f8:	fa c8 fb a4 	sub	r8,sp,-1116
800073fc:	06 9a       	mov	r10,r3
800073fe:	1a d8       	st.w	--sp,r8
80007400:	fa c8 f9 30 	sub	r8,sp,-1744
80007404:	fa c9 ff a4 	sub	r9,sp,-92
80007408:	40 8c       	lddsp	r12,sp[0x20]
8000740a:	fe b0 f4 85 	rcall	80005d14 <get_arg>
8000740e:	2f dd       	sub	sp,-12
80007410:	98 1b       	ld.sh	r11,r12[0x2]
80007412:	c2 68       	rjmp	8000745e <_vfprintf_r+0x1406>
80007414:	2f f0       	sub	r0,-1
80007416:	1c 39       	cp.w	r9,lr
80007418:	c0 a4       	brge	8000742c <_vfprintf_r+0x13d4>
8000741a:	fa cb f9 34 	sub	r11,sp,-1740
8000741e:	f6 07 00 38 	add	r8,r11,r7<<0x3
80007422:	f1 0b fd 8a 	ld.sh	r11,r8[-630]
80007426:	c1 c8       	rjmp	8000745e <_vfprintf_r+0x1406>
80007428:	80 00       	ld.sh	r0,r0[0x0]
8000742a:	bf fc       	*unknown*
8000742c:	41 4c       	lddsp	r12,sp[0x50]
8000742e:	59 fe       	cp.w	lr,31
80007430:	e0 89 00 13 	brgt	80007456 <_vfprintf_r+0x13fe>
80007434:	f8 c8 ff fc 	sub	r8,r12,-4
80007438:	51 48       	stdsp	sp[0x50],r8
8000743a:	78 09       	ld.w	r9,r12[0x0]
8000743c:	fa ca f9 34 	sub	r10,sp,-1740
80007440:	f4 0e 00 38 	add	r8,r10,lr<<0x3
80007444:	f1 49 fd 88 	st.w	r8[-632],r9
80007448:	f7 d9 b0 10 	bfexts	r11,r9,0x0,0x10
8000744c:	fc c8 ff ff 	sub	r8,lr,-1
80007450:	fb 48 06 c4 	st.w	sp[1732],r8
80007454:	c0 58       	rjmp	8000745e <_vfprintf_r+0x1406>
80007456:	f8 c8 ff fc 	sub	r8,r12,-4
8000745a:	98 1b       	ld.sh	r11,r12[0x2]
8000745c:	51 48       	stdsp	sp[0x50],r8
8000745e:	e9 db c0 10 	bfextu	r4,r11,0x0,0x10
80007462:	c4 38       	rjmp	800074e8 <_vfprintf_r+0x1490>
80007464:	fa fe 06 c4 	ld.w	lr,sp[1732]
80007468:	58 02       	cp.w	r2,0
8000746a:	c1 d0       	breq	800074a4 <_vfprintf_r+0x144c>
8000746c:	1c 37       	cp.w	r7,lr
8000746e:	c0 64       	brge	8000747a <_vfprintf_r+0x1422>
80007470:	fa c9 f9 34 	sub	r9,sp,-1740
80007474:	f2 07 00 38 	add	r8,r9,r7<<0x3
80007478:	c1 d8       	rjmp	800074b2 <_vfprintf_r+0x145a>
8000747a:	fa c8 f9 40 	sub	r8,sp,-1728
8000747e:	1a d8       	st.w	--sp,r8
80007480:	fa c8 fa a8 	sub	r8,sp,-1368
80007484:	0e 9b       	mov	r11,r7
80007486:	1a d8       	st.w	--sp,r8
80007488:	fa c8 fb a4 	sub	r8,sp,-1116
8000748c:	06 9a       	mov	r10,r3
8000748e:	1a d8       	st.w	--sp,r8
80007490:	fa c8 f9 30 	sub	r8,sp,-1744
80007494:	fa c9 ff a4 	sub	r9,sp,-92
80007498:	40 8c       	lddsp	r12,sp[0x20]
8000749a:	fe b0 f4 3d 	rcall	80005d14 <get_arg>
8000749e:	2f dd       	sub	sp,-12
800074a0:	78 0b       	ld.w	r11,r12[0x0]
800074a2:	c2 28       	rjmp	800074e6 <_vfprintf_r+0x148e>
800074a4:	2f f0       	sub	r0,-1
800074a6:	1c 39       	cp.w	r9,lr
800074a8:	c0 84       	brge	800074b8 <_vfprintf_r+0x1460>
800074aa:	fa cc f9 34 	sub	r12,sp,-1740
800074ae:	f8 07 00 38 	add	r8,r12,r7<<0x3
800074b2:	f0 fb fd 88 	ld.w	r11,r8[-632]
800074b6:	c1 88       	rjmp	800074e6 <_vfprintf_r+0x148e>
800074b8:	41 4c       	lddsp	r12,sp[0x50]
800074ba:	59 fe       	cp.w	lr,31
800074bc:	e0 89 00 11 	brgt	800074de <_vfprintf_r+0x1486>
800074c0:	f8 c8 ff fc 	sub	r8,r12,-4
800074c4:	fa ca f9 34 	sub	r10,sp,-1740
800074c8:	51 48       	stdsp	sp[0x50],r8
800074ca:	78 0b       	ld.w	r11,r12[0x0]
800074cc:	f4 0e 00 38 	add	r8,r10,lr<<0x3
800074d0:	f1 4b fd 88 	st.w	r8[-632],r11
800074d4:	fc c8 ff ff 	sub	r8,lr,-1
800074d8:	fb 48 06 c4 	st.w	sp[1732],r8
800074dc:	c0 58       	rjmp	800074e6 <_vfprintf_r+0x148e>
800074de:	78 0b       	ld.w	r11,r12[0x0]
800074e0:	f8 c8 ff fc 	sub	r8,r12,-4
800074e4:	51 48       	stdsp	sp[0x50],r8
800074e6:	16 94       	mov	r4,r11
800074e8:	30 05       	mov	r5,0
800074ea:	eb e4 10 08 	or	r8,r5,r4
800074ee:	40 99       	lddsp	r9,sp[0x24]
800074f0:	5f 18       	srne	r8
800074f2:	30 0c       	mov	r12,0
800074f4:	f3 e8 00 08 	and	r8,r9,r8
800074f8:	f8 08 18 00 	cp.b	r8,r12
800074fc:	c0 a0       	breq	80007510 <_vfprintf_r+0x14b8>
800074fe:	40 9a       	lddsp	r10,sp[0x24]
80007500:	40 8b       	lddsp	r11,sp[0x20]
80007502:	a1 ba       	sbr	r10,0x1
80007504:	33 08       	mov	r8,48
80007506:	fb 6b 06 c9 	st.b	sp[1737],r11
8000750a:	50 9a       	stdsp	sp[0x24],r10
8000750c:	fb 68 06 c8 	st.b	sp[1736],r8
80007510:	30 2e       	mov	lr,2
80007512:	30 09       	mov	r9,0
80007514:	fb 69 06 cb 	st.b	sp[1739],r9
80007518:	40 c8       	lddsp	r8,sp[0x30]
8000751a:	40 9c       	lddsp	r12,sp[0x24]
8000751c:	58 08       	cp.w	r8,0
8000751e:	5f 19       	srne	r9
80007520:	40 98       	lddsp	r8,sp[0x24]
80007522:	40 cb       	lddsp	r11,sp[0x30]
80007524:	a7 d8       	cbr	r8,0x7
80007526:	58 0b       	cp.w	r11,0
80007528:	f0 0c 17 40 	movge	r12,r8
8000752c:	50 9c       	stdsp	sp[0x24],r12
8000752e:	eb e4 10 08 	or	r8,r5,r4
80007532:	fa c6 f9 68 	sub	r6,sp,-1688
80007536:	58 08       	cp.w	r8,0
80007538:	5f 18       	srne	r8
8000753a:	30 0a       	mov	r10,0
8000753c:	12 48       	or	r8,r9
8000753e:	f4 08 18 00 	cp.b	r8,r10
80007542:	c5 d0       	breq	800075fc <_vfprintf_r+0x15a4>
80007544:	30 18       	mov	r8,1
80007546:	f0 0e 18 00 	cp.b	lr,r8
8000754a:	c0 70       	breq	80007558 <_vfprintf_r+0x1500>
8000754c:	c0 83       	brcs	8000755c <_vfprintf_r+0x1504>
8000754e:	30 28       	mov	r8,2
80007550:	f0 0e 18 00 	cp.b	lr,r8
80007554:	c4 d1       	brne	800075ee <_vfprintf_r+0x1596>
80007556:	c3 98       	rjmp	800075c8 <_vfprintf_r+0x1570>
80007558:	0c 97       	mov	r7,r6
8000755a:	c2 d8       	rjmp	800075b4 <_vfprintf_r+0x155c>
8000755c:	0c 93       	mov	r3,r6
8000755e:	f1 d4 c0 03 	bfextu	r8,r4,0x0,0x3
80007562:	f0 cc ff d0 	sub	r12,r8,-48
80007566:	06 fc       	st.b	--r3,r12
80007568:	e8 0a 16 03 	lsr	r10,r4,0x3
8000756c:	ea 0b 16 03 	lsr	r11,r5,0x3
80007570:	f5 e5 11 da 	or	r10,r10,r5<<0x1d
80007574:	16 95       	mov	r5,r11
80007576:	14 94       	mov	r4,r10
80007578:	58 04       	cp.w	r4,0
8000757a:	5c 25       	cpc	r5
8000757c:	cf 11       	brne	8000755e <_vfprintf_r+0x1506>
8000757e:	40 99       	lddsp	r9,sp[0x24]
80007580:	ed b9 00 00 	bld	r9,0x0
80007584:	c4 81       	brne	80007614 <_vfprintf_r+0x15bc>
80007586:	33 08       	mov	r8,48
80007588:	f0 0c 18 00 	cp.b	r12,r8
8000758c:	c4 40       	breq	80007614 <_vfprintf_r+0x15bc>
8000758e:	06 f8       	st.b	--r3,r8
80007590:	c4 28       	rjmp	80007614 <_vfprintf_r+0x15bc>
80007592:	18 97       	mov	r7,r12
80007594:	30 a8       	mov	r8,10
80007596:	30 09       	mov	r9,0
80007598:	08 9a       	mov	r10,r4
8000759a:	0a 9b       	mov	r11,r5
8000759c:	e0 a0 1a be 	rcall	8000ab18 <__avr32_umod64>
800075a0:	2d 0a       	sub	r10,-48
800075a2:	0a 9b       	mov	r11,r5
800075a4:	ae 8a       	st.b	r7[0x0],r10
800075a6:	30 a8       	mov	r8,10
800075a8:	08 9a       	mov	r10,r4
800075aa:	30 09       	mov	r9,0
800075ac:	fe b0 ed 64 	rcall	80005074 <__avr32_udiv64>
800075b0:	14 94       	mov	r4,r10
800075b2:	16 95       	mov	r5,r11
800075b4:	ee cc 00 01 	sub	r12,r7,1
800075b8:	58 94       	cp.w	r4,9
800075ba:	5c 25       	cpc	r5
800075bc:	fe 9b ff eb 	brhi	80007592 <_vfprintf_r+0x153a>
800075c0:	18 93       	mov	r3,r12
800075c2:	e8 c8 ff d0 	sub	r8,r4,-48
800075c6:	c2 48       	rjmp	8000760e <_vfprintf_r+0x15b6>
800075c8:	0c 93       	mov	r3,r6
800075ca:	f1 d4 c0 04 	bfextu	r8,r4,0x0,0x4
800075ce:	41 2c       	lddsp	r12,sp[0x48]
800075d0:	f8 08 07 08 	ld.ub	r8,r12[r8]
800075d4:	06 f8       	st.b	--r3,r8
800075d6:	e8 0a 16 04 	lsr	r10,r4,0x4
800075da:	ea 0b 16 04 	lsr	r11,r5,0x4
800075de:	f5 e5 11 ca 	or	r10,r10,r5<<0x1c
800075e2:	16 95       	mov	r5,r11
800075e4:	14 94       	mov	r4,r10
800075e6:	58 04       	cp.w	r4,0
800075e8:	5c 25       	cpc	r5
800075ea:	cf 01       	brne	800075ca <_vfprintf_r+0x1572>
800075ec:	c1 48       	rjmp	80007614 <_vfprintf_r+0x15bc>
800075ee:	4c ec       	lddpc	r12,80007724 <_vfprintf_r+0x16cc>
800075f0:	40 c2       	lddsp	r2,sp[0x30]
800075f2:	18 93       	mov	r3,r12
800075f4:	e0 a0 15 44 	rcall	8000a07c <strlen>
800075f8:	18 97       	mov	r7,r12
800075fa:	c2 18       	rjmp	8000763c <_vfprintf_r+0x15e4>
800075fc:	58 0e       	cp.w	lr,0
800075fe:	c0 a1       	brne	80007612 <_vfprintf_r+0x15ba>
80007600:	40 9b       	lddsp	r11,sp[0x24]
80007602:	ed bb 00 00 	bld	r11,0x0
80007606:	c0 61       	brne	80007612 <_vfprintf_r+0x15ba>
80007608:	fa c3 f9 69 	sub	r3,sp,-1687
8000760c:	33 08       	mov	r8,48
8000760e:	a6 88       	st.b	r3[0x0],r8
80007610:	c0 28       	rjmp	80007614 <_vfprintf_r+0x15bc>
80007612:	0c 93       	mov	r3,r6
80007614:	ec 03 01 07 	sub	r7,r6,r3
80007618:	40 c2       	lddsp	r2,sp[0x30]
8000761a:	c1 18       	rjmp	8000763c <_vfprintf_r+0x15e4>
8000761c:	40 8a       	lddsp	r10,sp[0x20]
8000761e:	58 0a       	cp.w	r10,0
80007620:	e0 80 04 72 	breq	80007f04 <_vfprintf_r+0x1eac>
80007624:	30 09       	mov	r9,0
80007626:	fb 6a 06 70 	st.b	sp[1648],r10
8000762a:	fb 69 06 cb 	st.b	sp[1739],r9
8000762e:	fa c3 f9 90 	sub	r3,sp,-1648
80007632:	30 02       	mov	r2,0
80007634:	30 17       	mov	r7,1
80007636:	c0 38       	rjmp	8000763c <_vfprintf_r+0x15e4>
80007638:	40 c7       	lddsp	r7,sp[0x30]
8000763a:	30 02       	mov	r2,0
8000763c:	ee 02 0c 48 	max	r8,r7,r2
80007640:	51 18       	stdsp	sp[0x44],r8
80007642:	10 99       	mov	r9,r8
80007644:	2f f9       	sub	r9,-1
80007646:	41 1c       	lddsp	r12,sp[0x44]
80007648:	fb 38 06 cb 	ld.ub	r8,sp[1739]
8000764c:	30 0b       	mov	r11,0
8000764e:	40 9a       	lddsp	r10,sp[0x24]
80007650:	f6 08 18 00 	cp.b	r8,r11
80007654:	f2 0c 17 10 	movne	r12,r9
80007658:	e2 1a 00 02 	andl	r10,0x2,COH
8000765c:	40 99       	lddsp	r9,sp[0x24]
8000765e:	14 0c       	add	r12,r10
80007660:	e2 19 00 84 	andl	r9,0x84,COH
80007664:	50 6a       	stdsp	sp[0x18],r10
80007666:	51 1c       	stdsp	sp[0x44],r12
80007668:	50 79       	stdsp	sp[0x1c],r9
8000766a:	c4 21       	brne	800076ee <_vfprintf_r+0x1696>
8000766c:	40 b6       	lddsp	r6,sp[0x2c]
8000766e:	18 16       	sub	r6,r12
80007670:	58 06       	cp.w	r6,0
80007672:	e0 89 00 1e 	brgt	800076ae <_vfprintf_r+0x1656>
80007676:	c3 c8       	rjmp	800076ee <_vfprintf_r+0x1696>
80007678:	2f 08       	sub	r8,-16
8000767a:	4a cc       	lddpc	r12,80007728 <_vfprintf_r+0x16d0>
8000767c:	fb 48 06 a0 	st.w	sp[1696],r8
80007680:	83 0c       	st.w	r1[0x0],r12
80007682:	f6 c8 ff ff 	sub	r8,r11,-1
80007686:	31 0b       	mov	r11,16
80007688:	fb 48 06 9c 	st.w	sp[1692],r8
8000768c:	83 1b       	st.w	r1[0x4],r11
8000768e:	58 78       	cp.w	r8,7
80007690:	e0 89 00 04 	brgt	80007698 <_vfprintf_r+0x1640>
80007694:	2f 81       	sub	r1,-8
80007696:	c0 b8       	rjmp	800076ac <_vfprintf_r+0x1654>
80007698:	fa ca f9 68 	sub	r10,sp,-1688
8000769c:	40 4b       	lddsp	r11,sp[0x10]
8000769e:	40 5c       	lddsp	r12,sp[0x14]
800076a0:	fe b0 f4 ce 	rcall	8000603c <__sprint_r>
800076a4:	e0 81 04 3e 	brne	80007f20 <_vfprintf_r+0x1ec8>
800076a8:	fa c1 f9 d0 	sub	r1,sp,-1584
800076ac:	21 06       	sub	r6,16
800076ae:	fa f8 06 a0 	ld.w	r8,sp[1696]
800076b2:	fa fb 06 9c 	ld.w	r11,sp[1692]
800076b6:	49 d9       	lddpc	r9,80007728 <_vfprintf_r+0x16d0>
800076b8:	59 06       	cp.w	r6,16
800076ba:	fe 99 ff df 	brgt	80007678 <_vfprintf_r+0x1620>
800076be:	0c 08       	add	r8,r6
800076c0:	83 09       	st.w	r1[0x0],r9
800076c2:	fb 48 06 a0 	st.w	sp[1696],r8
800076c6:	83 16       	st.w	r1[0x4],r6
800076c8:	f6 c8 ff ff 	sub	r8,r11,-1
800076cc:	fb 48 06 9c 	st.w	sp[1692],r8
800076d0:	58 78       	cp.w	r8,7
800076d2:	e0 89 00 04 	brgt	800076da <_vfprintf_r+0x1682>
800076d6:	2f 81       	sub	r1,-8
800076d8:	c0 b8       	rjmp	800076ee <_vfprintf_r+0x1696>
800076da:	fa ca f9 68 	sub	r10,sp,-1688
800076de:	40 4b       	lddsp	r11,sp[0x10]
800076e0:	40 5c       	lddsp	r12,sp[0x14]
800076e2:	fe b0 f4 ad 	rcall	8000603c <__sprint_r>
800076e6:	e0 81 04 1d 	brne	80007f20 <_vfprintf_r+0x1ec8>
800076ea:	fa c1 f9 d0 	sub	r1,sp,-1584
800076ee:	fb 38 06 cb 	ld.ub	r8,sp[1739]
800076f2:	30 0a       	mov	r10,0
800076f4:	f4 08 18 00 	cp.b	r8,r10
800076f8:	c2 40       	breq	80007740 <_vfprintf_r+0x16e8>
800076fa:	fa f8 06 a0 	ld.w	r8,sp[1696]
800076fe:	2f f8       	sub	r8,-1
80007700:	fb 48 06 a0 	st.w	sp[1696],r8
80007704:	fa c8 f9 35 	sub	r8,sp,-1739
80007708:	fa f9 06 9c 	ld.w	r9,sp[1692]
8000770c:	83 08       	st.w	r1[0x0],r8
8000770e:	2f f9       	sub	r9,-1
80007710:	30 18       	mov	r8,1
80007712:	fb 49 06 9c 	st.w	sp[1692],r9
80007716:	83 18       	st.w	r1[0x4],r8
80007718:	58 79       	cp.w	r9,7
8000771a:	e0 89 00 09 	brgt	8000772c <_vfprintf_r+0x16d4>
8000771e:	2f 81       	sub	r1,-8
80007720:	c1 08       	rjmp	80007740 <_vfprintf_r+0x16e8>
80007722:	d7 03       	nop
80007724:	80 00       	ld.sh	r0,r0[0x0]
80007726:	c0 10       	breq	80007728 <_vfprintf_r+0x16d0>
80007728:	80 00       	ld.sh	r0,r0[0x0]
8000772a:	bf 5c       	asr	r12,0x1f
8000772c:	fa ca f9 68 	sub	r10,sp,-1688
80007730:	40 4b       	lddsp	r11,sp[0x10]
80007732:	40 5c       	lddsp	r12,sp[0x14]
80007734:	fe b0 f4 84 	rcall	8000603c <__sprint_r>
80007738:	e0 81 03 f4 	brne	80007f20 <_vfprintf_r+0x1ec8>
8000773c:	fa c1 f9 d0 	sub	r1,sp,-1584
80007740:	40 69       	lddsp	r9,sp[0x18]
80007742:	58 09       	cp.w	r9,0
80007744:	c1 f0       	breq	80007782 <_vfprintf_r+0x172a>
80007746:	fa f8 06 a0 	ld.w	r8,sp[1696]
8000774a:	2f e8       	sub	r8,-2
8000774c:	fb 48 06 a0 	st.w	sp[1696],r8
80007750:	fa c8 f9 38 	sub	r8,sp,-1736
80007754:	fa f9 06 9c 	ld.w	r9,sp[1692]
80007758:	83 08       	st.w	r1[0x0],r8
8000775a:	2f f9       	sub	r9,-1
8000775c:	30 28       	mov	r8,2
8000775e:	fb 49 06 9c 	st.w	sp[1692],r9
80007762:	83 18       	st.w	r1[0x4],r8
80007764:	58 79       	cp.w	r9,7
80007766:	e0 89 00 04 	brgt	8000776e <_vfprintf_r+0x1716>
8000776a:	2f 81       	sub	r1,-8
8000776c:	c0 b8       	rjmp	80007782 <_vfprintf_r+0x172a>
8000776e:	fa ca f9 68 	sub	r10,sp,-1688
80007772:	40 4b       	lddsp	r11,sp[0x10]
80007774:	40 5c       	lddsp	r12,sp[0x14]
80007776:	fe b0 f4 63 	rcall	8000603c <__sprint_r>
8000777a:	e0 81 03 d3 	brne	80007f20 <_vfprintf_r+0x1ec8>
8000777e:	fa c1 f9 d0 	sub	r1,sp,-1584
80007782:	40 78       	lddsp	r8,sp[0x1c]
80007784:	e0 48 00 80 	cp.w	r8,128
80007788:	c4 31       	brne	8000780e <_vfprintf_r+0x17b6>
8000778a:	40 b6       	lddsp	r6,sp[0x2c]
8000778c:	41 1c       	lddsp	r12,sp[0x44]
8000778e:	18 16       	sub	r6,r12
80007790:	58 06       	cp.w	r6,0
80007792:	e0 89 00 1e 	brgt	800077ce <_vfprintf_r+0x1776>
80007796:	c3 c8       	rjmp	8000780e <_vfprintf_r+0x17b6>
80007798:	2f 08       	sub	r8,-16
8000779a:	31 0a       	mov	r10,16
8000779c:	fb 48 06 a0 	st.w	sp[1696],r8
800077a0:	83 1a       	st.w	r1[0x4],r10
800077a2:	f6 c8 ff ff 	sub	r8,r11,-1
800077a6:	4c 8b       	lddpc	r11,800078c4 <_vfprintf_r+0x186c>
800077a8:	fb 48 06 9c 	st.w	sp[1692],r8
800077ac:	83 0b       	st.w	r1[0x0],r11
800077ae:	58 78       	cp.w	r8,7
800077b0:	e0 89 00 04 	brgt	800077b8 <_vfprintf_r+0x1760>
800077b4:	2f 81       	sub	r1,-8
800077b6:	c0 b8       	rjmp	800077cc <_vfprintf_r+0x1774>
800077b8:	fa ca f9 68 	sub	r10,sp,-1688
800077bc:	40 4b       	lddsp	r11,sp[0x10]
800077be:	40 5c       	lddsp	r12,sp[0x14]
800077c0:	fe b0 f4 3e 	rcall	8000603c <__sprint_r>
800077c4:	e0 81 03 ae 	brne	80007f20 <_vfprintf_r+0x1ec8>
800077c8:	fa c1 f9 d0 	sub	r1,sp,-1584
800077cc:	21 06       	sub	r6,16
800077ce:	fa f8 06 a0 	ld.w	r8,sp[1696]
800077d2:	fa fb 06 9c 	ld.w	r11,sp[1692]
800077d6:	4b c9       	lddpc	r9,800078c4 <_vfprintf_r+0x186c>
800077d8:	59 06       	cp.w	r6,16
800077da:	fe 99 ff df 	brgt	80007798 <_vfprintf_r+0x1740>
800077de:	0c 08       	add	r8,r6
800077e0:	83 09       	st.w	r1[0x0],r9
800077e2:	fb 48 06 a0 	st.w	sp[1696],r8
800077e6:	83 16       	st.w	r1[0x4],r6
800077e8:	f6 c8 ff ff 	sub	r8,r11,-1
800077ec:	fb 48 06 9c 	st.w	sp[1692],r8
800077f0:	58 78       	cp.w	r8,7
800077f2:	e0 89 00 04 	brgt	800077fa <_vfprintf_r+0x17a2>
800077f6:	2f 81       	sub	r1,-8
800077f8:	c0 b8       	rjmp	8000780e <_vfprintf_r+0x17b6>
800077fa:	fa ca f9 68 	sub	r10,sp,-1688
800077fe:	40 4b       	lddsp	r11,sp[0x10]
80007800:	40 5c       	lddsp	r12,sp[0x14]
80007802:	fe b0 f4 1d 	rcall	8000603c <__sprint_r>
80007806:	e0 81 03 8d 	brne	80007f20 <_vfprintf_r+0x1ec8>
8000780a:	fa c1 f9 d0 	sub	r1,sp,-1584
8000780e:	e4 07 01 06 	sub	r6,r2,r7
80007812:	58 06       	cp.w	r6,0
80007814:	e0 89 00 1e 	brgt	80007850 <_vfprintf_r+0x17f8>
80007818:	c3 e8       	rjmp	80007894 <_vfprintf_r+0x183c>
8000781a:	2f 08       	sub	r8,-16
8000781c:	4a a9       	lddpc	r9,800078c4 <_vfprintf_r+0x186c>
8000781e:	fb 48 06 a0 	st.w	sp[1696],r8
80007822:	31 0c       	mov	r12,16
80007824:	f6 c8 ff ff 	sub	r8,r11,-1
80007828:	83 09       	st.w	r1[0x0],r9
8000782a:	83 1c       	st.w	r1[0x4],r12
8000782c:	fb 48 06 9c 	st.w	sp[1692],r8
80007830:	58 78       	cp.w	r8,7
80007832:	e0 89 00 04 	brgt	8000783a <_vfprintf_r+0x17e2>
80007836:	2f 81       	sub	r1,-8
80007838:	c0 a8       	rjmp	8000784c <_vfprintf_r+0x17f4>
8000783a:	fa ca f9 68 	sub	r10,sp,-1688
8000783e:	40 4b       	lddsp	r11,sp[0x10]
80007840:	40 5c       	lddsp	r12,sp[0x14]
80007842:	fe b0 f3 fd 	rcall	8000603c <__sprint_r>
80007846:	e0 81 03 6d 	brne	80007f20 <_vfprintf_r+0x1ec8>
8000784a:	04 91       	mov	r1,r2
8000784c:	21 06       	sub	r6,16
8000784e:	c0 38       	rjmp	80007854 <_vfprintf_r+0x17fc>
80007850:	fa c2 f9 d0 	sub	r2,sp,-1584
80007854:	fa f8 06 a0 	ld.w	r8,sp[1696]
80007858:	fa fb 06 9c 	ld.w	r11,sp[1692]
8000785c:	49 a9       	lddpc	r9,800078c4 <_vfprintf_r+0x186c>
8000785e:	59 06       	cp.w	r6,16
80007860:	fe 99 ff dd 	brgt	8000781a <_vfprintf_r+0x17c2>
80007864:	0c 08       	add	r8,r6
80007866:	83 09       	st.w	r1[0x0],r9
80007868:	fb 48 06 a0 	st.w	sp[1696],r8
8000786c:	83 16       	st.w	r1[0x4],r6
8000786e:	f6 c8 ff ff 	sub	r8,r11,-1
80007872:	fb 48 06 9c 	st.w	sp[1692],r8
80007876:	58 78       	cp.w	r8,7
80007878:	e0 89 00 04 	brgt	80007880 <_vfprintf_r+0x1828>
8000787c:	2f 81       	sub	r1,-8
8000787e:	c0 b8       	rjmp	80007894 <_vfprintf_r+0x183c>
80007880:	fa ca f9 68 	sub	r10,sp,-1688
80007884:	40 4b       	lddsp	r11,sp[0x10]
80007886:	40 5c       	lddsp	r12,sp[0x14]
80007888:	fe b0 f3 da 	rcall	8000603c <__sprint_r>
8000788c:	e0 81 03 4a 	brne	80007f20 <_vfprintf_r+0x1ec8>
80007890:	fa c1 f9 d0 	sub	r1,sp,-1584
80007894:	40 98       	lddsp	r8,sp[0x24]
80007896:	ed b8 00 08 	bld	r8,0x8
8000789a:	c1 70       	breq	800078c8 <_vfprintf_r+0x1870>
8000789c:	fa f8 06 a0 	ld.w	r8,sp[1696]
800078a0:	0e 08       	add	r8,r7
800078a2:	83 03       	st.w	r1[0x0],r3
800078a4:	fb 48 06 a0 	st.w	sp[1696],r8
800078a8:	83 17       	st.w	r1[0x4],r7
800078aa:	fa f8 06 9c 	ld.w	r8,sp[1692]
800078ae:	2f f8       	sub	r8,-1
800078b0:	fb 48 06 9c 	st.w	sp[1692],r8
800078b4:	58 78       	cp.w	r8,7
800078b6:	e0 89 02 c0 	brgt	80007e36 <_vfprintf_r+0x1dde>
800078ba:	e2 ca ff f8 	sub	r10,r1,-8
800078be:	e0 8f 02 c5 	bral	80007e48 <_vfprintf_r+0x1df0>
800078c2:	d7 03       	nop
800078c4:	80 00       	ld.sh	r0,r0[0x0]
800078c6:	c0 30       	breq	800078cc <_vfprintf_r+0x1874>
800078c8:	40 8b       	lddsp	r11,sp[0x20]
800078ca:	e0 4b 00 65 	cp.w	r11,101
800078ce:	e0 8a 01 ee 	brle	80007caa <_vfprintf_r+0x1c52>
800078d2:	30 08       	mov	r8,0
800078d4:	30 09       	mov	r9,0
800078d6:	40 1b       	lddsp	r11,sp[0x4]
800078d8:	40 0a       	lddsp	r10,sp[0x0]
800078da:	e0 a0 17 03 	rcall	8000a6e0 <__avr32_f64_cmp_eq>
800078de:	c7 b0       	breq	800079d4 <_vfprintf_r+0x197c>
800078e0:	fa f8 06 a0 	ld.w	r8,sp[1696]
800078e4:	2f f8       	sub	r8,-1
800078e6:	fb 48 06 a0 	st.w	sp[1696],r8
800078ea:	4c 88       	lddpc	r8,80007a08 <_vfprintf_r+0x19b0>
800078ec:	fa f9 06 9c 	ld.w	r9,sp[1692]
800078f0:	83 08       	st.w	r1[0x0],r8
800078f2:	2f f9       	sub	r9,-1
800078f4:	30 18       	mov	r8,1
800078f6:	fb 49 06 9c 	st.w	sp[1692],r9
800078fa:	83 18       	st.w	r1[0x4],r8
800078fc:	58 79       	cp.w	r9,7
800078fe:	e0 89 00 05 	brgt	80007908 <_vfprintf_r+0x18b0>
80007902:	e2 ca ff f8 	sub	r10,r1,-8
80007906:	c0 b8       	rjmp	8000791c <_vfprintf_r+0x18c4>
80007908:	fa ca f9 68 	sub	r10,sp,-1688
8000790c:	40 4b       	lddsp	r11,sp[0x10]
8000790e:	40 5c       	lddsp	r12,sp[0x14]
80007910:	fe b0 f3 96 	rcall	8000603c <__sprint_r>
80007914:	e0 81 03 06 	brne	80007f20 <_vfprintf_r+0x1ec8>
80007918:	fa ca f9 d0 	sub	r10,sp,-1584
8000791c:	fa f8 06 bc 	ld.w	r8,sp[1724]
80007920:	41 09       	lddsp	r9,sp[0x40]
80007922:	12 38       	cp.w	r8,r9
80007924:	c0 65       	brlt	80007930 <_vfprintf_r+0x18d8>
80007926:	40 9c       	lddsp	r12,sp[0x24]
80007928:	ed bc 00 00 	bld	r12,0x0
8000792c:	e0 81 02 8e 	brne	80007e48 <_vfprintf_r+0x1df0>
80007930:	fa f8 06 a0 	ld.w	r8,sp[1696]
80007934:	2f f8       	sub	r8,-1
80007936:	40 db       	lddsp	r11,sp[0x34]
80007938:	fb 48 06 a0 	st.w	sp[1696],r8
8000793c:	30 19       	mov	r9,1
8000793e:	fa f8 06 9c 	ld.w	r8,sp[1692]
80007942:	95 0b       	st.w	r10[0x0],r11
80007944:	2f f8       	sub	r8,-1
80007946:	95 19       	st.w	r10[0x4],r9
80007948:	fb 48 06 9c 	st.w	sp[1692],r8
8000794c:	58 78       	cp.w	r8,7
8000794e:	e0 89 00 04 	brgt	80007956 <_vfprintf_r+0x18fe>
80007952:	2f 8a       	sub	r10,-8
80007954:	c0 b8       	rjmp	8000796a <_vfprintf_r+0x1912>
80007956:	fa ca f9 68 	sub	r10,sp,-1688
8000795a:	40 4b       	lddsp	r11,sp[0x10]
8000795c:	40 5c       	lddsp	r12,sp[0x14]
8000795e:	fe b0 f3 6f 	rcall	8000603c <__sprint_r>
80007962:	e0 81 02 df 	brne	80007f20 <_vfprintf_r+0x1ec8>
80007966:	fa ca f9 d0 	sub	r10,sp,-1584
8000796a:	41 06       	lddsp	r6,sp[0x40]
8000796c:	20 16       	sub	r6,1
8000796e:	58 06       	cp.w	r6,0
80007970:	e0 89 00 1c 	brgt	800079a8 <_vfprintf_r+0x1950>
80007974:	e0 8f 02 6a 	bral	80007e48 <_vfprintf_r+0x1df0>
80007978:	2f 08       	sub	r8,-16
8000797a:	95 01       	st.w	r10[0x0],r1
8000797c:	fb 48 06 a0 	st.w	sp[1696],r8
80007980:	95 12       	st.w	r10[0x4],r2
80007982:	f6 c8 ff ff 	sub	r8,r11,-1
80007986:	fb 48 06 9c 	st.w	sp[1692],r8
8000798a:	58 78       	cp.w	r8,7
8000798c:	e0 89 00 04 	brgt	80007994 <_vfprintf_r+0x193c>
80007990:	2f 8a       	sub	r10,-8
80007992:	c0 98       	rjmp	800079a4 <_vfprintf_r+0x194c>
80007994:	06 9a       	mov	r10,r3
80007996:	40 4b       	lddsp	r11,sp[0x10]
80007998:	40 5c       	lddsp	r12,sp[0x14]
8000799a:	fe b0 f3 51 	rcall	8000603c <__sprint_r>
8000799e:	e0 81 02 c1 	brne	80007f20 <_vfprintf_r+0x1ec8>
800079a2:	0e 9a       	mov	r10,r7
800079a4:	21 06       	sub	r6,16
800079a6:	c0 78       	rjmp	800079b4 <_vfprintf_r+0x195c>
800079a8:	49 91       	lddpc	r1,80007a0c <_vfprintf_r+0x19b4>
800079aa:	31 02       	mov	r2,16
800079ac:	fa c3 f9 68 	sub	r3,sp,-1688
800079b0:	fa c7 f9 d0 	sub	r7,sp,-1584
800079b4:	fa f8 06 a0 	ld.w	r8,sp[1696]
800079b8:	fa fb 06 9c 	ld.w	r11,sp[1692]
800079bc:	49 49       	lddpc	r9,80007a0c <_vfprintf_r+0x19b4>
800079be:	59 06       	cp.w	r6,16
800079c0:	fe 99 ff dc 	brgt	80007978 <_vfprintf_r+0x1920>
800079c4:	0c 08       	add	r8,r6
800079c6:	95 09       	st.w	r10[0x0],r9
800079c8:	fb 48 06 a0 	st.w	sp[1696],r8
800079cc:	95 16       	st.w	r10[0x4],r6
800079ce:	f6 c8 ff ff 	sub	r8,r11,-1
800079d2:	c6 59       	rjmp	80007c9c <_vfprintf_r+0x1c44>
800079d4:	fa f9 06 bc 	ld.w	r9,sp[1724]
800079d8:	58 09       	cp.w	r9,0
800079da:	e0 89 00 9a 	brgt	80007b0e <_vfprintf_r+0x1ab6>
800079de:	fa f8 06 a0 	ld.w	r8,sp[1696]
800079e2:	2f f8       	sub	r8,-1
800079e4:	fb 48 06 a0 	st.w	sp[1696],r8
800079e8:	48 88       	lddpc	r8,80007a08 <_vfprintf_r+0x19b0>
800079ea:	fa f9 06 9c 	ld.w	r9,sp[1692]
800079ee:	83 08       	st.w	r1[0x0],r8
800079f0:	2f f9       	sub	r9,-1
800079f2:	30 18       	mov	r8,1
800079f4:	fb 49 06 9c 	st.w	sp[1692],r9
800079f8:	83 18       	st.w	r1[0x4],r8
800079fa:	58 79       	cp.w	r9,7
800079fc:	e0 89 00 0a 	brgt	80007a10 <_vfprintf_r+0x19b8>
80007a00:	e2 ca ff f8 	sub	r10,r1,-8
80007a04:	c1 08       	rjmp	80007a24 <_vfprintf_r+0x19cc>
80007a06:	d7 03       	nop
80007a08:	80 00       	ld.sh	r0,r0[0x0]
80007a0a:	c0 2c       	rcall	80007a0e <_vfprintf_r+0x19b6>
80007a0c:	80 00       	ld.sh	r0,r0[0x0]
80007a0e:	c0 30       	breq	80007a14 <_vfprintf_r+0x19bc>
80007a10:	fa ca f9 68 	sub	r10,sp,-1688
80007a14:	40 4b       	lddsp	r11,sp[0x10]
80007a16:	40 5c       	lddsp	r12,sp[0x14]
80007a18:	fe b0 f3 12 	rcall	8000603c <__sprint_r>
80007a1c:	e0 81 02 82 	brne	80007f20 <_vfprintf_r+0x1ec8>
80007a20:	fa ca f9 d0 	sub	r10,sp,-1584
80007a24:	fa f8 06 bc 	ld.w	r8,sp[1724]
80007a28:	58 08       	cp.w	r8,0
80007a2a:	c0 91       	brne	80007a3c <_vfprintf_r+0x19e4>
80007a2c:	41 09       	lddsp	r9,sp[0x40]
80007a2e:	58 09       	cp.w	r9,0
80007a30:	c0 61       	brne	80007a3c <_vfprintf_r+0x19e4>
80007a32:	40 9c       	lddsp	r12,sp[0x24]
80007a34:	ed bc 00 00 	bld	r12,0x0
80007a38:	e0 81 02 08 	brne	80007e48 <_vfprintf_r+0x1df0>
80007a3c:	fa f8 06 a0 	ld.w	r8,sp[1696]
80007a40:	2f f8       	sub	r8,-1
80007a42:	40 db       	lddsp	r11,sp[0x34]
80007a44:	fb 48 06 a0 	st.w	sp[1696],r8
80007a48:	30 19       	mov	r9,1
80007a4a:	fa f8 06 9c 	ld.w	r8,sp[1692]
80007a4e:	95 0b       	st.w	r10[0x0],r11
80007a50:	2f f8       	sub	r8,-1
80007a52:	95 19       	st.w	r10[0x4],r9
80007a54:	fb 48 06 9c 	st.w	sp[1692],r8
80007a58:	58 78       	cp.w	r8,7
80007a5a:	e0 89 00 04 	brgt	80007a62 <_vfprintf_r+0x1a0a>
80007a5e:	2f 8a       	sub	r10,-8
80007a60:	c0 b8       	rjmp	80007a76 <_vfprintf_r+0x1a1e>
80007a62:	fa ca f9 68 	sub	r10,sp,-1688
80007a66:	40 4b       	lddsp	r11,sp[0x10]
80007a68:	40 5c       	lddsp	r12,sp[0x14]
80007a6a:	fe b0 f2 e9 	rcall	8000603c <__sprint_r>
80007a6e:	e0 81 02 59 	brne	80007f20 <_vfprintf_r+0x1ec8>
80007a72:	fa ca f9 d0 	sub	r10,sp,-1584
80007a76:	fa f8 06 bc 	ld.w	r8,sp[1724]
80007a7a:	f0 06 11 00 	rsub	r6,r8,0
80007a7e:	58 06       	cp.w	r6,0
80007a80:	e0 89 00 1c 	brgt	80007ab8 <_vfprintf_r+0x1a60>
80007a84:	c3 f8       	rjmp	80007b02 <_vfprintf_r+0x1aaa>
80007a86:	2f 08       	sub	r8,-16
80007a88:	4d 09       	lddpc	r9,80007bc8 <_vfprintf_r+0x1b70>
80007a8a:	fb 48 06 a0 	st.w	sp[1696],r8
80007a8e:	95 09       	st.w	r10[0x0],r9
80007a90:	f6 c8 ff ff 	sub	r8,r11,-1
80007a94:	95 11       	st.w	r10[0x4],r1
80007a96:	fb 48 06 9c 	st.w	sp[1692],r8
80007a9a:	58 78       	cp.w	r8,7
80007a9c:	e0 89 00 04 	brgt	80007aa4 <_vfprintf_r+0x1a4c>
80007aa0:	2f 8a       	sub	r10,-8
80007aa2:	c0 98       	rjmp	80007ab4 <_vfprintf_r+0x1a5c>
80007aa4:	04 9a       	mov	r10,r2
80007aa6:	40 4b       	lddsp	r11,sp[0x10]
80007aa8:	40 5c       	lddsp	r12,sp[0x14]
80007aaa:	fe b0 f2 c9 	rcall	8000603c <__sprint_r>
80007aae:	e0 81 02 39 	brne	80007f20 <_vfprintf_r+0x1ec8>
80007ab2:	0e 9a       	mov	r10,r7
80007ab4:	21 06       	sub	r6,16
80007ab6:	c0 68       	rjmp	80007ac2 <_vfprintf_r+0x1a6a>
80007ab8:	31 01       	mov	r1,16
80007aba:	fa c2 f9 68 	sub	r2,sp,-1688
80007abe:	fa c7 f9 d0 	sub	r7,sp,-1584
80007ac2:	fa f8 06 a0 	ld.w	r8,sp[1696]
80007ac6:	fa fb 06 9c 	ld.w	r11,sp[1692]
80007aca:	4c 09       	lddpc	r9,80007bc8 <_vfprintf_r+0x1b70>
80007acc:	59 06       	cp.w	r6,16
80007ace:	fe 99 ff dc 	brgt	80007a86 <_vfprintf_r+0x1a2e>
80007ad2:	0c 08       	add	r8,r6
80007ad4:	95 09       	st.w	r10[0x0],r9
80007ad6:	fb 48 06 a0 	st.w	sp[1696],r8
80007ada:	95 16       	st.w	r10[0x4],r6
80007adc:	f6 c8 ff ff 	sub	r8,r11,-1
80007ae0:	fb 48 06 9c 	st.w	sp[1692],r8
80007ae4:	58 78       	cp.w	r8,7
80007ae6:	e0 89 00 04 	brgt	80007aee <_vfprintf_r+0x1a96>
80007aea:	2f 8a       	sub	r10,-8
80007aec:	c0 b8       	rjmp	80007b02 <_vfprintf_r+0x1aaa>
80007aee:	fa ca f9 68 	sub	r10,sp,-1688
80007af2:	40 4b       	lddsp	r11,sp[0x10]
80007af4:	40 5c       	lddsp	r12,sp[0x14]
80007af6:	fe b0 f2 a3 	rcall	8000603c <__sprint_r>
80007afa:	e0 81 02 13 	brne	80007f20 <_vfprintf_r+0x1ec8>
80007afe:	fa ca f9 d0 	sub	r10,sp,-1584
80007b02:	41 08       	lddsp	r8,sp[0x40]
80007b04:	95 03       	st.w	r10[0x0],r3
80007b06:	95 18       	st.w	r10[0x4],r8
80007b08:	fa f8 06 a0 	ld.w	r8,sp[1696]
80007b0c:	cc 18       	rjmp	80007c8e <_vfprintf_r+0x1c36>
80007b0e:	fa f8 06 a0 	ld.w	r8,sp[1696]
80007b12:	fa fb 06 9c 	ld.w	r11,sp[1692]
80007b16:	41 0a       	lddsp	r10,sp[0x40]
80007b18:	14 39       	cp.w	r9,r10
80007b1a:	c7 75       	brlt	80007c08 <_vfprintf_r+0x1bb0>
80007b1c:	14 08       	add	r8,r10
80007b1e:	83 03       	st.w	r1[0x0],r3
80007b20:	fb 48 06 a0 	st.w	sp[1696],r8
80007b24:	83 1a       	st.w	r1[0x4],r10
80007b26:	f6 c8 ff ff 	sub	r8,r11,-1
80007b2a:	fb 48 06 9c 	st.w	sp[1692],r8
80007b2e:	58 78       	cp.w	r8,7
80007b30:	e0 89 00 05 	brgt	80007b3a <_vfprintf_r+0x1ae2>
80007b34:	e2 ca ff f8 	sub	r10,r1,-8
80007b38:	c0 b8       	rjmp	80007b4e <_vfprintf_r+0x1af6>
80007b3a:	fa ca f9 68 	sub	r10,sp,-1688
80007b3e:	40 4b       	lddsp	r11,sp[0x10]
80007b40:	40 5c       	lddsp	r12,sp[0x14]
80007b42:	fe b0 f2 7d 	rcall	8000603c <__sprint_r>
80007b46:	e0 81 01 ed 	brne	80007f20 <_vfprintf_r+0x1ec8>
80007b4a:	fa ca f9 d0 	sub	r10,sp,-1584
80007b4e:	fa f8 06 bc 	ld.w	r8,sp[1724]
80007b52:	41 09       	lddsp	r9,sp[0x40]
80007b54:	f0 09 01 06 	sub	r6,r8,r9
80007b58:	58 06       	cp.w	r6,0
80007b5a:	e0 89 00 1b 	brgt	80007b90 <_vfprintf_r+0x1b38>
80007b5e:	c4 18       	rjmp	80007be0 <_vfprintf_r+0x1b88>
80007b60:	2f 08       	sub	r8,-16
80007b62:	95 01       	st.w	r10[0x0],r1
80007b64:	fb 48 06 a0 	st.w	sp[1696],r8
80007b68:	95 12       	st.w	r10[0x4],r2
80007b6a:	f6 c8 ff ff 	sub	r8,r11,-1
80007b6e:	fb 48 06 9c 	st.w	sp[1692],r8
80007b72:	58 78       	cp.w	r8,7
80007b74:	e0 89 00 04 	brgt	80007b7c <_vfprintf_r+0x1b24>
80007b78:	2f 8a       	sub	r10,-8
80007b7a:	c0 98       	rjmp	80007b8c <_vfprintf_r+0x1b34>
80007b7c:	06 9a       	mov	r10,r3
80007b7e:	40 4b       	lddsp	r11,sp[0x10]
80007b80:	40 5c       	lddsp	r12,sp[0x14]
80007b82:	fe b0 f2 5d 	rcall	8000603c <__sprint_r>
80007b86:	e0 81 01 cd 	brne	80007f20 <_vfprintf_r+0x1ec8>
80007b8a:	0e 9a       	mov	r10,r7
80007b8c:	21 06       	sub	r6,16
80007b8e:	c0 78       	rjmp	80007b9c <_vfprintf_r+0x1b44>
80007b90:	48 e1       	lddpc	r1,80007bc8 <_vfprintf_r+0x1b70>
80007b92:	31 02       	mov	r2,16
80007b94:	fa c3 f9 68 	sub	r3,sp,-1688
80007b98:	fa c7 f9 d0 	sub	r7,sp,-1584
80007b9c:	fa f8 06 a0 	ld.w	r8,sp[1696]
80007ba0:	fa fb 06 9c 	ld.w	r11,sp[1692]
80007ba4:	48 99       	lddpc	r9,80007bc8 <_vfprintf_r+0x1b70>
80007ba6:	59 06       	cp.w	r6,16
80007ba8:	fe 99 ff dc 	brgt	80007b60 <_vfprintf_r+0x1b08>
80007bac:	0c 08       	add	r8,r6
80007bae:	95 09       	st.w	r10[0x0],r9
80007bb0:	fb 48 06 a0 	st.w	sp[1696],r8
80007bb4:	95 16       	st.w	r10[0x4],r6
80007bb6:	f6 c8 ff ff 	sub	r8,r11,-1
80007bba:	fb 48 06 9c 	st.w	sp[1692],r8
80007bbe:	58 78       	cp.w	r8,7
80007bc0:	e0 89 00 06 	brgt	80007bcc <_vfprintf_r+0x1b74>
80007bc4:	2f 8a       	sub	r10,-8
80007bc6:	c0 d8       	rjmp	80007be0 <_vfprintf_r+0x1b88>
80007bc8:	80 00       	ld.sh	r0,r0[0x0]
80007bca:	c0 30       	breq	80007bd0 <_vfprintf_r+0x1b78>
80007bcc:	fa ca f9 68 	sub	r10,sp,-1688
80007bd0:	40 4b       	lddsp	r11,sp[0x10]
80007bd2:	40 5c       	lddsp	r12,sp[0x14]
80007bd4:	fe b0 f2 34 	rcall	8000603c <__sprint_r>
80007bd8:	e0 81 01 a4 	brne	80007f20 <_vfprintf_r+0x1ec8>
80007bdc:	fa ca f9 d0 	sub	r10,sp,-1584
80007be0:	40 9c       	lddsp	r12,sp[0x24]
80007be2:	ed bc 00 00 	bld	r12,0x0
80007be6:	e0 81 01 31 	brne	80007e48 <_vfprintf_r+0x1df0>
80007bea:	fa f8 06 a0 	ld.w	r8,sp[1696]
80007bee:	2f f8       	sub	r8,-1
80007bf0:	40 db       	lddsp	r11,sp[0x34]
80007bf2:	fb 48 06 a0 	st.w	sp[1696],r8
80007bf6:	30 19       	mov	r9,1
80007bf8:	fa f8 06 9c 	ld.w	r8,sp[1692]
80007bfc:	95 0b       	st.w	r10[0x0],r11
80007bfe:	2f f8       	sub	r8,-1
80007c00:	95 19       	st.w	r10[0x4],r9
80007c02:	fb 48 06 9c 	st.w	sp[1692],r8
80007c06:	c4 d8       	rjmp	80007ca0 <_vfprintf_r+0x1c48>
80007c08:	12 08       	add	r8,r9
80007c0a:	83 03       	st.w	r1[0x0],r3
80007c0c:	fb 48 06 a0 	st.w	sp[1696],r8
80007c10:	83 19       	st.w	r1[0x4],r9
80007c12:	f6 c8 ff ff 	sub	r8,r11,-1
80007c16:	fb 48 06 9c 	st.w	sp[1692],r8
80007c1a:	58 78       	cp.w	r8,7
80007c1c:	e0 89 00 05 	brgt	80007c26 <_vfprintf_r+0x1bce>
80007c20:	e2 ca ff f8 	sub	r10,r1,-8
80007c24:	c0 b8       	rjmp	80007c3a <_vfprintf_r+0x1be2>
80007c26:	fa ca f9 68 	sub	r10,sp,-1688
80007c2a:	40 4b       	lddsp	r11,sp[0x10]
80007c2c:	40 5c       	lddsp	r12,sp[0x14]
80007c2e:	fe b0 f2 07 	rcall	8000603c <__sprint_r>
80007c32:	e0 81 01 77 	brne	80007f20 <_vfprintf_r+0x1ec8>
80007c36:	fa ca f9 d0 	sub	r10,sp,-1584
80007c3a:	40 d9       	lddsp	r9,sp[0x34]
80007c3c:	fa f8 06 a0 	ld.w	r8,sp[1696]
80007c40:	2f f8       	sub	r8,-1
80007c42:	95 09       	st.w	r10[0x0],r9
80007c44:	fb 48 06 a0 	st.w	sp[1696],r8
80007c48:	fa f9 06 9c 	ld.w	r9,sp[1692]
80007c4c:	30 18       	mov	r8,1
80007c4e:	2f f9       	sub	r9,-1
80007c50:	95 18       	st.w	r10[0x4],r8
80007c52:	fb 49 06 9c 	st.w	sp[1692],r9
80007c56:	fa f7 06 bc 	ld.w	r7,sp[1724]
80007c5a:	58 79       	cp.w	r9,7
80007c5c:	e0 89 00 04 	brgt	80007c64 <_vfprintf_r+0x1c0c>
80007c60:	2f 8a       	sub	r10,-8
80007c62:	c0 b8       	rjmp	80007c78 <_vfprintf_r+0x1c20>
80007c64:	fa ca f9 68 	sub	r10,sp,-1688
80007c68:	40 4b       	lddsp	r11,sp[0x10]
80007c6a:	40 5c       	lddsp	r12,sp[0x14]
80007c6c:	fe b0 f1 e8 	rcall	8000603c <__sprint_r>
80007c70:	e0 81 01 58 	brne	80007f20 <_vfprintf_r+0x1ec8>
80007c74:	fa ca f9 d0 	sub	r10,sp,-1584
80007c78:	e6 07 00 08 	add	r8,r3,r7
80007c7c:	fa f9 06 bc 	ld.w	r9,sp[1724]
80007c80:	95 08       	st.w	r10[0x0],r8
80007c82:	41 08       	lddsp	r8,sp[0x40]
80007c84:	12 18       	sub	r8,r9
80007c86:	95 18       	st.w	r10[0x4],r8
80007c88:	fa f8 06 a0 	ld.w	r8,sp[1696]
80007c8c:	12 18       	sub	r8,r9
80007c8e:	41 0c       	lddsp	r12,sp[0x40]
80007c90:	18 08       	add	r8,r12
80007c92:	fb 48 06 a0 	st.w	sp[1696],r8
80007c96:	fa f8 06 9c 	ld.w	r8,sp[1692]
80007c9a:	2f f8       	sub	r8,-1
80007c9c:	fb 48 06 9c 	st.w	sp[1692],r8
80007ca0:	58 78       	cp.w	r8,7
80007ca2:	e0 89 00 ca 	brgt	80007e36 <_vfprintf_r+0x1dde>
80007ca6:	2f 8a       	sub	r10,-8
80007ca8:	cd 08       	rjmp	80007e48 <_vfprintf_r+0x1df0>
80007caa:	41 0b       	lddsp	r11,sp[0x40]
80007cac:	58 1b       	cp.w	r11,1
80007cae:	e0 89 00 07 	brgt	80007cbc <_vfprintf_r+0x1c64>
80007cb2:	40 9a       	lddsp	r10,sp[0x24]
80007cb4:	ed ba 00 00 	bld	r10,0x0
80007cb8:	e0 81 00 8d 	brne	80007dd2 <_vfprintf_r+0x1d7a>
80007cbc:	fa f8 06 a0 	ld.w	r8,sp[1696]
80007cc0:	2f f8       	sub	r8,-1
80007cc2:	30 19       	mov	r9,1
80007cc4:	fb 48 06 a0 	st.w	sp[1696],r8
80007cc8:	83 03       	st.w	r1[0x0],r3
80007cca:	fa f8 06 9c 	ld.w	r8,sp[1692]
80007cce:	83 19       	st.w	r1[0x4],r9
80007cd0:	2f f8       	sub	r8,-1
80007cd2:	fb 48 06 9c 	st.w	sp[1692],r8
80007cd6:	58 78       	cp.w	r8,7
80007cd8:	e0 89 00 05 	brgt	80007ce2 <_vfprintf_r+0x1c8a>
80007cdc:	e2 ca ff f8 	sub	r10,r1,-8
80007ce0:	c0 b8       	rjmp	80007cf6 <_vfprintf_r+0x1c9e>
80007ce2:	fa ca f9 68 	sub	r10,sp,-1688
80007ce6:	40 4b       	lddsp	r11,sp[0x10]
80007ce8:	40 5c       	lddsp	r12,sp[0x14]
80007cea:	fe b0 f1 a9 	rcall	8000603c <__sprint_r>
80007cee:	e0 81 01 19 	brne	80007f20 <_vfprintf_r+0x1ec8>
80007cf2:	fa ca f9 d0 	sub	r10,sp,-1584
80007cf6:	40 d9       	lddsp	r9,sp[0x34]
80007cf8:	fa f8 06 a0 	ld.w	r8,sp[1696]
80007cfc:	2f f8       	sub	r8,-1
80007cfe:	95 09       	st.w	r10[0x0],r9
80007d00:	fb 48 06 a0 	st.w	sp[1696],r8
80007d04:	30 19       	mov	r9,1
80007d06:	fa f8 06 9c 	ld.w	r8,sp[1692]
80007d0a:	95 19       	st.w	r10[0x4],r9
80007d0c:	2f f8       	sub	r8,-1
80007d0e:	fb 48 06 9c 	st.w	sp[1692],r8
80007d12:	58 78       	cp.w	r8,7
80007d14:	e0 89 00 05 	brgt	80007d1e <_vfprintf_r+0x1cc6>
80007d18:	f4 c7 ff f8 	sub	r7,r10,-8
80007d1c:	c0 b8       	rjmp	80007d32 <_vfprintf_r+0x1cda>
80007d1e:	fa ca f9 68 	sub	r10,sp,-1688
80007d22:	40 4b       	lddsp	r11,sp[0x10]
80007d24:	40 5c       	lddsp	r12,sp[0x14]
80007d26:	fe b0 f1 8b 	rcall	8000603c <__sprint_r>
80007d2a:	e0 81 00 fb 	brne	80007f20 <_vfprintf_r+0x1ec8>
80007d2e:	fa c7 f9 d0 	sub	r7,sp,-1584
80007d32:	30 09       	mov	r9,0
80007d34:	30 08       	mov	r8,0
80007d36:	40 1b       	lddsp	r11,sp[0x4]
80007d38:	40 0a       	lddsp	r10,sp[0x0]
80007d3a:	e0 a0 14 d3 	rcall	8000a6e0 <__avr32_f64_cmp_eq>
80007d3e:	41 09       	lddsp	r9,sp[0x40]
80007d40:	20 19       	sub	r9,1
80007d42:	58 0c       	cp.w	r12,0
80007d44:	c0 e1       	brne	80007d60 <_vfprintf_r+0x1d08>
80007d46:	e6 c8 ff ff 	sub	r8,r3,-1
80007d4a:	8f 08       	st.w	r7[0x0],r8
80007d4c:	fa f8 06 a0 	ld.w	r8,sp[1696]
80007d50:	12 08       	add	r8,r9
80007d52:	8f 19       	st.w	r7[0x4],r9
80007d54:	fb 48 06 a0 	st.w	sp[1696],r8
80007d58:	fa f8 06 9c 	ld.w	r8,sp[1692]
80007d5c:	2f f8       	sub	r8,-1
80007d5e:	c3 38       	rjmp	80007dc4 <_vfprintf_r+0x1d6c>
80007d60:	12 96       	mov	r6,r9
80007d62:	58 09       	cp.w	r9,0
80007d64:	e0 89 00 1c 	brgt	80007d9c <_vfprintf_r+0x1d44>
80007d68:	c5 28       	rjmp	80007e0c <_vfprintf_r+0x1db4>
80007d6a:	2f 08       	sub	r8,-16
80007d6c:	4c 8c       	lddpc	r12,80007e8c <_vfprintf_r+0x1e34>
80007d6e:	fb 48 06 a0 	st.w	sp[1696],r8
80007d72:	8f 0c       	st.w	r7[0x0],r12
80007d74:	f6 c8 ff ff 	sub	r8,r11,-1
80007d78:	8f 11       	st.w	r7[0x4],r1
80007d7a:	fb 48 06 9c 	st.w	sp[1692],r8
80007d7e:	58 78       	cp.w	r8,7
80007d80:	e0 89 00 04 	brgt	80007d88 <_vfprintf_r+0x1d30>
80007d84:	2f 87       	sub	r7,-8
80007d86:	c0 98       	rjmp	80007d98 <_vfprintf_r+0x1d40>
80007d88:	04 9a       	mov	r10,r2
80007d8a:	40 4b       	lddsp	r11,sp[0x10]
80007d8c:	40 5c       	lddsp	r12,sp[0x14]
80007d8e:	fe b0 f1 57 	rcall	8000603c <__sprint_r>
80007d92:	e0 81 00 c7 	brne	80007f20 <_vfprintf_r+0x1ec8>
80007d96:	06 97       	mov	r7,r3
80007d98:	21 06       	sub	r6,16
80007d9a:	c0 68       	rjmp	80007da6 <_vfprintf_r+0x1d4e>
80007d9c:	31 01       	mov	r1,16
80007d9e:	fa c2 f9 68 	sub	r2,sp,-1688
80007da2:	fa c3 f9 d0 	sub	r3,sp,-1584
80007da6:	fa f8 06 a0 	ld.w	r8,sp[1696]
80007daa:	fa fb 06 9c 	ld.w	r11,sp[1692]
80007dae:	4b 89       	lddpc	r9,80007e8c <_vfprintf_r+0x1e34>
80007db0:	59 06       	cp.w	r6,16
80007db2:	fe 99 ff dc 	brgt	80007d6a <_vfprintf_r+0x1d12>
80007db6:	0c 08       	add	r8,r6
80007db8:	8f 09       	st.w	r7[0x0],r9
80007dba:	fb 48 06 a0 	st.w	sp[1696],r8
80007dbe:	8f 16       	st.w	r7[0x4],r6
80007dc0:	f6 c8 ff ff 	sub	r8,r11,-1
80007dc4:	fb 48 06 9c 	st.w	sp[1692],r8
80007dc8:	58 78       	cp.w	r8,7
80007dca:	e0 89 00 17 	brgt	80007df8 <_vfprintf_r+0x1da0>
80007dce:	2f 87       	sub	r7,-8
80007dd0:	c1 e8       	rjmp	80007e0c <_vfprintf_r+0x1db4>
80007dd2:	fa f8 06 a0 	ld.w	r8,sp[1696]
80007dd6:	2f f8       	sub	r8,-1
80007dd8:	30 19       	mov	r9,1
80007dda:	fb 48 06 a0 	st.w	sp[1696],r8
80007dde:	83 03       	st.w	r1[0x0],r3
80007de0:	fa f8 06 9c 	ld.w	r8,sp[1692]
80007de4:	83 19       	st.w	r1[0x4],r9
80007de6:	2f f8       	sub	r8,-1
80007de8:	fb 48 06 9c 	st.w	sp[1692],r8
80007dec:	58 78       	cp.w	r8,7
80007dee:	e0 89 00 05 	brgt	80007df8 <_vfprintf_r+0x1da0>
80007df2:	e2 c7 ff f8 	sub	r7,r1,-8
80007df6:	c0 b8       	rjmp	80007e0c <_vfprintf_r+0x1db4>
80007df8:	fa ca f9 68 	sub	r10,sp,-1688
80007dfc:	40 4b       	lddsp	r11,sp[0x10]
80007dfe:	40 5c       	lddsp	r12,sp[0x14]
80007e00:	fe b0 f1 1e 	rcall	8000603c <__sprint_r>
80007e04:	e0 81 00 8e 	brne	80007f20 <_vfprintf_r+0x1ec8>
80007e08:	fa c7 f9 d0 	sub	r7,sp,-1584
80007e0c:	40 fb       	lddsp	r11,sp[0x3c]
80007e0e:	fa f8 06 a0 	ld.w	r8,sp[1696]
80007e12:	16 08       	add	r8,r11
80007e14:	fa c9 f9 54 	sub	r9,sp,-1708
80007e18:	fb 48 06 a0 	st.w	sp[1696],r8
80007e1c:	8f 1b       	st.w	r7[0x4],r11
80007e1e:	fa f8 06 9c 	ld.w	r8,sp[1692]
80007e22:	8f 09       	st.w	r7[0x0],r9
80007e24:	2f f8       	sub	r8,-1
80007e26:	fb 48 06 9c 	st.w	sp[1692],r8
80007e2a:	58 78       	cp.w	r8,7
80007e2c:	e0 89 00 05 	brgt	80007e36 <_vfprintf_r+0x1dde>
80007e30:	ee ca ff f8 	sub	r10,r7,-8
80007e34:	c0 a8       	rjmp	80007e48 <_vfprintf_r+0x1df0>
80007e36:	fa ca f9 68 	sub	r10,sp,-1688
80007e3a:	40 4b       	lddsp	r11,sp[0x10]
80007e3c:	40 5c       	lddsp	r12,sp[0x14]
80007e3e:	fe b0 f0 ff 	rcall	8000603c <__sprint_r>
80007e42:	c6 f1       	brne	80007f20 <_vfprintf_r+0x1ec8>
80007e44:	fa ca f9 d0 	sub	r10,sp,-1584
80007e48:	40 99       	lddsp	r9,sp[0x24]
80007e4a:	ed b9 00 02 	bld	r9,0x2
80007e4e:	c4 21       	brne	80007ed2 <_vfprintf_r+0x1e7a>
80007e50:	40 b6       	lddsp	r6,sp[0x2c]
80007e52:	41 18       	lddsp	r8,sp[0x44]
80007e54:	10 16       	sub	r6,r8
80007e56:	58 06       	cp.w	r6,0
80007e58:	e0 89 00 1c 	brgt	80007e90 <_vfprintf_r+0x1e38>
80007e5c:	c3 b8       	rjmp	80007ed2 <_vfprintf_r+0x1e7a>
80007e5e:	2f 08       	sub	r8,-16
80007e60:	95 01       	st.w	r10[0x0],r1
80007e62:	fb 48 06 a0 	st.w	sp[1696],r8
80007e66:	95 12       	st.w	r10[0x4],r2
80007e68:	f6 c8 ff ff 	sub	r8,r11,-1
80007e6c:	fb 48 06 9c 	st.w	sp[1692],r8
80007e70:	58 78       	cp.w	r8,7
80007e72:	e0 89 00 04 	brgt	80007e7a <_vfprintf_r+0x1e22>
80007e76:	2f 8a       	sub	r10,-8
80007e78:	c0 88       	rjmp	80007e88 <_vfprintf_r+0x1e30>
80007e7a:	06 9a       	mov	r10,r3
80007e7c:	40 4b       	lddsp	r11,sp[0x10]
80007e7e:	40 5c       	lddsp	r12,sp[0x14]
80007e80:	fe b0 f0 de 	rcall	8000603c <__sprint_r>
80007e84:	c4 e1       	brne	80007f20 <_vfprintf_r+0x1ec8>
80007e86:	0e 9a       	mov	r10,r7
80007e88:	21 06       	sub	r6,16
80007e8a:	c0 98       	rjmp	80007e9c <_vfprintf_r+0x1e44>
80007e8c:	80 00       	ld.sh	r0,r0[0x0]
80007e8e:	c0 30       	breq	80007e94 <_vfprintf_r+0x1e3c>
80007e90:	4a a1       	lddpc	r1,80007f38 <_vfprintf_r+0x1ee0>
80007e92:	31 02       	mov	r2,16
80007e94:	fa c3 f9 68 	sub	r3,sp,-1688
80007e98:	fa c7 f9 d0 	sub	r7,sp,-1584
80007e9c:	fa f8 06 a0 	ld.w	r8,sp[1696]
80007ea0:	fa fb 06 9c 	ld.w	r11,sp[1692]
80007ea4:	4a 59       	lddpc	r9,80007f38 <_vfprintf_r+0x1ee0>
80007ea6:	59 06       	cp.w	r6,16
80007ea8:	fe 99 ff db 	brgt	80007e5e <_vfprintf_r+0x1e06>
80007eac:	0c 08       	add	r8,r6
80007eae:	95 09       	st.w	r10[0x0],r9
80007eb0:	fb 48 06 a0 	st.w	sp[1696],r8
80007eb4:	95 16       	st.w	r10[0x4],r6
80007eb6:	f6 c8 ff ff 	sub	r8,r11,-1
80007eba:	fb 48 06 9c 	st.w	sp[1692],r8
80007ebe:	58 78       	cp.w	r8,7
80007ec0:	e0 8a 00 09 	brle	80007ed2 <_vfprintf_r+0x1e7a>
80007ec4:	fa ca f9 68 	sub	r10,sp,-1688
80007ec8:	40 4b       	lddsp	r11,sp[0x10]
80007eca:	40 5c       	lddsp	r12,sp[0x14]
80007ecc:	fe b0 f0 b8 	rcall	8000603c <__sprint_r>
80007ed0:	c2 81       	brne	80007f20 <_vfprintf_r+0x1ec8>
80007ed2:	40 aa       	lddsp	r10,sp[0x28]
80007ed4:	41 1c       	lddsp	r12,sp[0x44]
80007ed6:	40 bb       	lddsp	r11,sp[0x2c]
80007ed8:	f8 0b 0c 48 	max	r8,r12,r11
80007edc:	10 0a       	add	r10,r8
80007ede:	50 aa       	stdsp	sp[0x28],r10
80007ee0:	fa f8 06 a0 	ld.w	r8,sp[1696]
80007ee4:	58 08       	cp.w	r8,0
80007ee6:	c0 80       	breq	80007ef6 <_vfprintf_r+0x1e9e>
80007ee8:	fa ca f9 68 	sub	r10,sp,-1688
80007eec:	40 4b       	lddsp	r11,sp[0x10]
80007eee:	40 5c       	lddsp	r12,sp[0x14]
80007ef0:	fe b0 f0 a6 	rcall	8000603c <__sprint_r>
80007ef4:	c1 61       	brne	80007f20 <_vfprintf_r+0x1ec8>
80007ef6:	30 09       	mov	r9,0
80007ef8:	fa c1 f9 d0 	sub	r1,sp,-1584
80007efc:	fb 49 06 9c 	st.w	sp[1692],r9
80007f00:	fe 9f f1 41 	bral	80006182 <_vfprintf_r+0x12a>
80007f04:	fa f8 06 a0 	ld.w	r8,sp[1696]
80007f08:	58 08       	cp.w	r8,0
80007f0a:	c0 80       	breq	80007f1a <_vfprintf_r+0x1ec2>
80007f0c:	40 5c       	lddsp	r12,sp[0x14]
80007f0e:	fa ca f9 68 	sub	r10,sp,-1688
80007f12:	40 4b       	lddsp	r11,sp[0x10]
80007f14:	fe b0 f0 94 	rcall	8000603c <__sprint_r>
80007f18:	c0 41       	brne	80007f20 <_vfprintf_r+0x1ec8>
80007f1a:	30 08       	mov	r8,0
80007f1c:	fb 48 06 9c 	st.w	sp[1692],r8
80007f20:	40 4c       	lddsp	r12,sp[0x10]
80007f22:	98 68       	ld.sh	r8,r12[0xc]
80007f24:	ed b8 00 06 	bld	r8,0x6
80007f28:	c0 31       	brne	80007f2e <_vfprintf_r+0x1ed6>
80007f2a:	3f fb       	mov	r11,-1
80007f2c:	50 ab       	stdsp	sp[0x28],r11
80007f2e:	40 ac       	lddsp	r12,sp[0x28]
80007f30:	fe 3d f9 34 	sub	sp,-1740
80007f34:	d8 32       	popm	r0-r7,pc
80007f36:	d7 03       	nop
80007f38:	80 00       	ld.sh	r0,r0[0x0]
80007f3a:	bf 5c       	asr	r12,0x1f

80007f3c <_write_r>:
80007f3c:	d4 21       	pushm	r4-r7,lr
80007f3e:	16 98       	mov	r8,r11
80007f40:	18 96       	mov	r6,r12
80007f42:	10 9c       	mov	r12,r8
80007f44:	30 08       	mov	r8,0
80007f46:	14 9b       	mov	r11,r10
80007f48:	48 67       	lddpc	r7,80007f60 <_write_r+0x24>
80007f4a:	12 9a       	mov	r10,r9
80007f4c:	8f 08       	st.w	r7[0x0],r8
80007f4e:	fe b0 e8 0b 	rcall	80004f64 <_write>
80007f52:	5b fc       	cp.w	r12,-1
80007f54:	c0 51       	brne	80007f5e <_write_r+0x22>
80007f56:	6e 08       	ld.w	r8,r7[0x0]
80007f58:	58 08       	cp.w	r8,0
80007f5a:	c0 20       	breq	80007f5e <_write_r+0x22>
80007f5c:	8d 38       	st.w	r6[0xc],r8
80007f5e:	d8 22       	popm	r4-r7,pc
80007f60:	00 00       	add	r0,r0
80007f62:	12 d8       	st.w	--r9,r8

80007f64 <__swsetup_r>:
80007f64:	d4 21       	pushm	r4-r7,lr
80007f66:	4b 48       	lddpc	r8,80008034 <__swsetup_r+0xd0>
80007f68:	18 96       	mov	r6,r12
80007f6a:	16 97       	mov	r7,r11
80007f6c:	70 0c       	ld.w	r12,r8[0x0]
80007f6e:	58 0c       	cp.w	r12,0
80007f70:	c0 60       	breq	80007f7c <__swsetup_r+0x18>
80007f72:	78 68       	ld.w	r8,r12[0x18]
80007f74:	58 08       	cp.w	r8,0
80007f76:	c0 31       	brne	80007f7c <__swsetup_r+0x18>
80007f78:	fe b0 ea f0 	rcall	80005558 <__sinit>
80007f7c:	4a f8       	lddpc	r8,80008038 <__swsetup_r+0xd4>
80007f7e:	10 37       	cp.w	r7,r8
80007f80:	c0 51       	brne	80007f8a <__swsetup_r+0x26>
80007f82:	4a d8       	lddpc	r8,80008034 <__swsetup_r+0xd0>
80007f84:	70 08       	ld.w	r8,r8[0x0]
80007f86:	70 07       	ld.w	r7,r8[0x0]
80007f88:	c0 e8       	rjmp	80007fa4 <__swsetup_r+0x40>
80007f8a:	4a d8       	lddpc	r8,8000803c <__swsetup_r+0xd8>
80007f8c:	10 37       	cp.w	r7,r8
80007f8e:	c0 51       	brne	80007f98 <__swsetup_r+0x34>
80007f90:	4a 98       	lddpc	r8,80008034 <__swsetup_r+0xd0>
80007f92:	70 08       	ld.w	r8,r8[0x0]
80007f94:	70 17       	ld.w	r7,r8[0x4]
80007f96:	c0 78       	rjmp	80007fa4 <__swsetup_r+0x40>
80007f98:	4a a8       	lddpc	r8,80008040 <__swsetup_r+0xdc>
80007f9a:	10 37       	cp.w	r7,r8
80007f9c:	c0 41       	brne	80007fa4 <__swsetup_r+0x40>
80007f9e:	4a 68       	lddpc	r8,80008034 <__swsetup_r+0xd0>
80007fa0:	70 08       	ld.w	r8,r8[0x0]
80007fa2:	70 27       	ld.w	r7,r8[0x8]
80007fa4:	8e 69       	ld.sh	r9,r7[0xc]
80007fa6:	ed b9 00 03 	bld	r9,0x3
80007faa:	c1 e0       	breq	80007fe6 <__swsetup_r+0x82>
80007fac:	ed b9 00 04 	bld	r9,0x4
80007fb0:	c4 01       	brne	80008030 <__swsetup_r+0xcc>
80007fb2:	ed b9 00 02 	bld	r9,0x2
80007fb6:	c1 51       	brne	80007fe0 <__swsetup_r+0x7c>
80007fb8:	6e db       	ld.w	r11,r7[0x34]
80007fba:	58 0b       	cp.w	r11,0
80007fbc:	c0 a0       	breq	80007fd0 <__swsetup_r+0x6c>
80007fbe:	ee c8 ff bc 	sub	r8,r7,-68
80007fc2:	10 3b       	cp.w	r11,r8
80007fc4:	c0 40       	breq	80007fcc <__swsetup_r+0x68>
80007fc6:	0c 9c       	mov	r12,r6
80007fc8:	e0 a0 08 46 	rcall	80009054 <_free_r>
80007fcc:	30 08       	mov	r8,0
80007fce:	8f d8       	st.w	r7[0x34],r8
80007fd0:	8e 68       	ld.sh	r8,r7[0xc]
80007fd2:	e0 18 ff db 	andl	r8,0xffdb
80007fd6:	ae 68       	st.h	r7[0xc],r8
80007fd8:	30 08       	mov	r8,0
80007fda:	8f 18       	st.w	r7[0x4],r8
80007fdc:	6e 48       	ld.w	r8,r7[0x10]
80007fde:	8f 08       	st.w	r7[0x0],r8
80007fe0:	8e 68       	ld.sh	r8,r7[0xc]
80007fe2:	a3 b8       	sbr	r8,0x3
80007fe4:	ae 68       	st.h	r7[0xc],r8
80007fe6:	6e 48       	ld.w	r8,r7[0x10]
80007fe8:	58 08       	cp.w	r8,0
80007fea:	c0 b1       	brne	80008000 <__swsetup_r+0x9c>
80007fec:	8e 68       	ld.sh	r8,r7[0xc]
80007fee:	e2 18 02 80 	andl	r8,0x280,COH
80007ff2:	e0 48 02 00 	cp.w	r8,512
80007ff6:	c0 50       	breq	80008000 <__swsetup_r+0x9c>
80007ff8:	0c 9c       	mov	r12,r6
80007ffa:	0e 9b       	mov	r11,r7
80007ffc:	e0 a0 0a 4e 	rcall	80009498 <__smakebuf_r>
80008000:	8e 68       	ld.sh	r8,r7[0xc]
80008002:	f3 d8 c0 01 	bfextu	r9,r8,0x0,0x1
80008006:	c0 70       	breq	80008014 <__swsetup_r+0xb0>
80008008:	30 08       	mov	r8,0
8000800a:	8f 28       	st.w	r7[0x8],r8
8000800c:	6e 58       	ld.w	r8,r7[0x14]
8000800e:	5c 38       	neg	r8
80008010:	8f 68       	st.w	r7[0x18],r8
80008012:	c0 88       	rjmp	80008022 <__swsetup_r+0xbe>
80008014:	ed b8 00 01 	bld	r8,0x1
80008018:	c0 31       	brne	8000801e <__swsetup_r+0xba>
8000801a:	12 98       	mov	r8,r9
8000801c:	c0 28       	rjmp	80008020 <__swsetup_r+0xbc>
8000801e:	6e 58       	ld.w	r8,r7[0x14]
80008020:	8f 28       	st.w	r7[0x8],r8
80008022:	6e 48       	ld.w	r8,r7[0x10]
80008024:	58 08       	cp.w	r8,0
80008026:	c0 61       	brne	80008032 <__swsetup_r+0xce>
80008028:	8e 68       	ld.sh	r8,r7[0xc]
8000802a:	ed b8 00 07 	bld	r8,0x7
8000802e:	c0 21       	brne	80008032 <__swsetup_r+0xce>
80008030:	dc 2a       	popm	r4-r7,pc,r12=-1
80008032:	d8 2a       	popm	r4-r7,pc,r12=0
80008034:	00 00       	add	r0,r0
80008036:	01 1c       	ld.sh	r12,r0++
80008038:	80 00       	ld.sh	r0,r0[0x0]
8000803a:	bc e8       	st.b	lr[0x6],r8
8000803c:	80 00       	ld.sh	r0,r0[0x0]
8000803e:	bd 08       	ld.d	r8,lr
80008040:	80 00       	ld.sh	r0,r0[0x0]
80008042:	bd 28       	st.d	lr++,r8

80008044 <__register_exitproc>:
80008044:	d4 31       	pushm	r0-r7,lr
80008046:	4a 88       	lddpc	r8,800080e4 <__register_exitproc+0xa0>
80008048:	18 95       	mov	r5,r12
8000804a:	70 06       	ld.w	r6,r8[0x0]
8000804c:	16 92       	mov	r2,r11
8000804e:	14 94       	mov	r4,r10
80008050:	12 93       	mov	r3,r9
80008052:	6d 27       	ld.w	r7,r6[0x48]
80008054:	58 07       	cp.w	r7,0
80008056:	c0 51       	brne	80008060 <__register_exitproc+0x1c>
80008058:	ec c7 ff b4 	sub	r7,r6,-76
8000805c:	ed 47 00 48 	st.w	r6[72],r7
80008060:	6e 18       	ld.w	r8,r7[0x4]
80008062:	59 f8       	cp.w	r8,31
80008064:	e0 8a 00 0e 	brle	80008080 <__register_exitproc+0x3c>
80008068:	e0 6c 00 8c 	mov	r12,140
8000806c:	fe b0 eb 18 	rcall	8000569c <malloc>
80008070:	18 97       	mov	r7,r12
80008072:	c3 80       	breq	800080e2 <__register_exitproc+0x9e>
80008074:	6d 28       	ld.w	r8,r6[0x48]
80008076:	99 08       	st.w	r12[0x0],r8
80008078:	ed 4c 00 48 	st.w	r6[72],r12
8000807c:	30 08       	mov	r8,0
8000807e:	99 18       	st.w	r12[0x4],r8
80008080:	58 05       	cp.w	r5,0
80008082:	c2 70       	breq	800080d0 <__register_exitproc+0x8c>
80008084:	ee fc 00 88 	ld.w	r12,r7[136]
80008088:	58 0c       	cp.w	r12,0
8000808a:	c0 d1       	brne	800080a4 <__register_exitproc+0x60>
8000808c:	e0 6c 01 08 	mov	r12,264
80008090:	fe b0 eb 06 	rcall	8000569c <malloc>
80008094:	c2 70       	breq	800080e2 <__register_exitproc+0x9e>
80008096:	30 08       	mov	r8,0
80008098:	ef 4c 00 88 	st.w	r7[136],r12
8000809c:	f9 48 01 04 	st.w	r12[260],r8
800080a0:	f9 48 01 00 	st.w	r12[256],r8
800080a4:	6e 1a       	ld.w	r10,r7[0x4]
800080a6:	f4 c8 ff e0 	sub	r8,r10,-32
800080aa:	30 19       	mov	r9,1
800080ac:	f8 08 09 23 	st.w	r12[r8<<0x2],r3
800080b0:	f2 0a 09 49 	lsl	r9,r9,r10
800080b4:	f8 f8 01 00 	ld.w	r8,r12[256]
800080b8:	f8 0a 09 24 	st.w	r12[r10<<0x2],r4
800080bc:	12 48       	or	r8,r9
800080be:	f9 48 01 00 	st.w	r12[256],r8
800080c2:	58 25       	cp.w	r5,2
800080c4:	c0 61       	brne	800080d0 <__register_exitproc+0x8c>
800080c6:	f8 f8 01 04 	ld.w	r8,r12[260]
800080ca:	12 48       	or	r8,r9
800080cc:	f9 48 01 04 	st.w	r12[260],r8
800080d0:	6e 18       	ld.w	r8,r7[0x4]
800080d2:	30 0c       	mov	r12,0
800080d4:	f0 c9 ff ff 	sub	r9,r8,-1
800080d8:	2f e8       	sub	r8,-2
800080da:	8f 19       	st.w	r7[0x4],r9
800080dc:	ee 08 09 22 	st.w	r7[r8<<0x2],r2
800080e0:	d8 32       	popm	r0-r7,pc
800080e2:	dc 3a       	popm	r0-r7,pc,r12=-1
800080e4:	80 00       	ld.sh	r0,r0[0x0]
800080e6:	bd 4c       	asr	r12,0x1c

800080e8 <__call_exitprocs>:
800080e8:	d4 31       	pushm	r0-r7,lr
800080ea:	20 3d       	sub	sp,12
800080ec:	4b 28       	lddpc	r8,800081b4 <__call_exitprocs+0xcc>
800080ee:	50 0c       	stdsp	sp[0x0],r12
800080f0:	70 08       	ld.w	r8,r8[0x0]
800080f2:	16 90       	mov	r0,r11
800080f4:	50 18       	stdsp	sp[0x4],r8
800080f6:	2b 88       	sub	r8,-72
800080f8:	50 28       	stdsp	sp[0x8],r8
800080fa:	40 18       	lddsp	r8,sp[0x4]
800080fc:	40 22       	lddsp	r2,sp[0x8]
800080fe:	71 27       	ld.w	r7,r8[0x48]
80008100:	c5 68       	rjmp	800081ac <__call_exitprocs+0xc4>
80008102:	6e 19       	ld.w	r9,r7[0x4]
80008104:	ee f5 00 88 	ld.w	r5,r7[136]
80008108:	f2 c8 ff ff 	sub	r8,r9,-1
8000810c:	f2 c6 00 01 	sub	r6,r9,1
80008110:	ee 08 00 23 	add	r3,r7,r8<<0x2
80008114:	ea 06 00 24 	add	r4,r5,r6<<0x2
80008118:	c3 58       	rjmp	80008182 <__call_exitprocs+0x9a>
8000811a:	58 00       	cp.w	r0,0
8000811c:	c0 70       	breq	8000812a <__call_exitprocs+0x42>
8000811e:	58 05       	cp.w	r5,0
80008120:	c2 e0       	breq	8000817c <__call_exitprocs+0x94>
80008122:	e8 f8 00 80 	ld.w	r8,r4[128]
80008126:	00 38       	cp.w	r8,r0
80008128:	c2 a1       	brne	8000817c <__call_exitprocs+0x94>
8000812a:	6e 18       	ld.w	r8,r7[0x4]
8000812c:	66 0a       	ld.w	r10,r3[0x0]
8000812e:	20 18       	sub	r8,1
80008130:	10 36       	cp.w	r6,r8
80008132:	c0 31       	brne	80008138 <__call_exitprocs+0x50>
80008134:	8f 16       	st.w	r7[0x4],r6
80008136:	c0 38       	rjmp	8000813c <__call_exitprocs+0x54>
80008138:	30 08       	mov	r8,0
8000813a:	87 08       	st.w	r3[0x0],r8
8000813c:	58 0a       	cp.w	r10,0
8000813e:	c1 f0       	breq	8000817c <__call_exitprocs+0x94>
80008140:	6e 11       	ld.w	r1,r7[0x4]
80008142:	58 05       	cp.w	r5,0
80008144:	c0 90       	breq	80008156 <__call_exitprocs+0x6e>
80008146:	30 18       	mov	r8,1
80008148:	f0 06 09 49 	lsl	r9,r8,r6
8000814c:	ea f8 01 00 	ld.w	r8,r5[256]
80008150:	f3 e8 00 08 	and	r8,r9,r8
80008154:	c0 31       	brne	8000815a <__call_exitprocs+0x72>
80008156:	5d 1a       	icall	r10
80008158:	c0 c8       	rjmp	80008170 <__call_exitprocs+0x88>
8000815a:	ea f8 01 04 	ld.w	r8,r5[260]
8000815e:	68 0c       	ld.w	r12,r4[0x0]
80008160:	f3 e8 00 08 	and	r8,r9,r8
80008164:	c0 51       	brne	8000816e <__call_exitprocs+0x86>
80008166:	18 9b       	mov	r11,r12
80008168:	40 0c       	lddsp	r12,sp[0x0]
8000816a:	5d 1a       	icall	r10
8000816c:	c0 28       	rjmp	80008170 <__call_exitprocs+0x88>
8000816e:	5d 1a       	icall	r10
80008170:	6e 18       	ld.w	r8,r7[0x4]
80008172:	10 31       	cp.w	r1,r8
80008174:	cc 31       	brne	800080fa <__call_exitprocs+0x12>
80008176:	64 08       	ld.w	r8,r2[0x0]
80008178:	0e 38       	cp.w	r8,r7
8000817a:	cc 01       	brne	800080fa <__call_exitprocs+0x12>
8000817c:	20 16       	sub	r6,1
8000817e:	20 44       	sub	r4,4
80008180:	20 43       	sub	r3,4
80008182:	58 06       	cp.w	r6,0
80008184:	cc b4       	brge	8000811a <__call_exitprocs+0x32>
80008186:	6e 18       	ld.w	r8,r7[0x4]
80008188:	58 08       	cp.w	r8,0
8000818a:	c0 f1       	brne	800081a8 <__call_exitprocs+0xc0>
8000818c:	6e 08       	ld.w	r8,r7[0x0]
8000818e:	58 08       	cp.w	r8,0
80008190:	c0 c0       	breq	800081a8 <__call_exitprocs+0xc0>
80008192:	85 08       	st.w	r2[0x0],r8
80008194:	58 05       	cp.w	r5,0
80008196:	c0 40       	breq	8000819e <__call_exitprocs+0xb6>
80008198:	0a 9c       	mov	r12,r5
8000819a:	fe b0 ea 77 	rcall	80005688 <free>
8000819e:	0e 9c       	mov	r12,r7
800081a0:	fe b0 ea 74 	rcall	80005688 <free>
800081a4:	64 07       	ld.w	r7,r2[0x0]
800081a6:	c0 38       	rjmp	800081ac <__call_exitprocs+0xc4>
800081a8:	0e 92       	mov	r2,r7
800081aa:	6e 07       	ld.w	r7,r7[0x0]
800081ac:	58 07       	cp.w	r7,0
800081ae:	ca a1       	brne	80008102 <__call_exitprocs+0x1a>
800081b0:	2f dd       	sub	sp,-12
800081b2:	d8 32       	popm	r0-r7,pc
800081b4:	80 00       	ld.sh	r0,r0[0x0]
800081b6:	bd 4c       	asr	r12,0x1c

800081b8 <_close_r>:
800081b8:	d4 21       	pushm	r4-r7,lr
800081ba:	30 08       	mov	r8,0
800081bc:	18 96       	mov	r6,r12
800081be:	48 77       	lddpc	r7,800081d8 <_close_r+0x20>
800081c0:	16 9c       	mov	r12,r11
800081c2:	8f 08       	st.w	r7[0x0],r8
800081c4:	fe b0 e6 c4 	rcall	80004f4c <_close>
800081c8:	5b fc       	cp.w	r12,-1
800081ca:	c0 51       	brne	800081d4 <_close_r+0x1c>
800081cc:	6e 08       	ld.w	r8,r7[0x0]
800081ce:	58 08       	cp.w	r8,0
800081d0:	c0 20       	breq	800081d4 <_close_r+0x1c>
800081d2:	8d 38       	st.w	r6[0xc],r8
800081d4:	d8 22       	popm	r4-r7,pc
800081d6:	d7 03       	nop
800081d8:	00 00       	add	r0,r0
800081da:	12 d8       	st.w	--r9,r8

800081dc <quorem>:
800081dc:	d4 31       	pushm	r0-r7,lr
800081de:	20 2d       	sub	sp,8
800081e0:	16 93       	mov	r3,r11
800081e2:	18 95       	mov	r5,r12
800081e4:	78 48       	ld.w	r8,r12[0x10]
800081e6:	76 4b       	ld.w	r11,r11[0x10]
800081e8:	16 38       	cp.w	r8,r11
800081ea:	c0 34       	brge	800081f0 <quorem+0x14>
800081ec:	30 0c       	mov	r12,0
800081ee:	c8 68       	rjmp	800082fa <quorem+0x11e>
800081f0:	f6 ca ff fc 	sub	r10,r11,-4
800081f4:	f8 0a 03 2c 	ld.w	r12,r12[r10<<0x2]
800081f8:	e6 0a 03 29 	ld.w	r9,r3[r10<<0x2]
800081fc:	50 0c       	stdsp	sp[0x0],r12
800081fe:	e6 0a 00 2a 	add	r10,r3,r10<<0x2
80008202:	50 1a       	stdsp	sp[0x4],r10
80008204:	2f f9       	sub	r9,-1
80008206:	e6 c1 ff ec 	sub	r1,r3,-20
8000820a:	f8 09 0d 08 	divu	r8,r12,r9
8000820e:	f6 c6 00 01 	sub	r6,r11,1
80008212:	ea c0 ff ec 	sub	r0,r5,-20
80008216:	10 92       	mov	r2,r8
80008218:	58 08       	cp.w	r8,0
8000821a:	c3 d0       	breq	80008294 <quorem+0xb8>
8000821c:	30 07       	mov	r7,0
8000821e:	00 9e       	mov	lr,r0
80008220:	02 94       	mov	r4,r1
80008222:	0e 9c       	mov	r12,r7
80008224:	09 08       	ld.w	r8,r4++
80008226:	f0 0a 16 10 	lsr	r10,r8,0x10
8000822a:	e4 0a 02 4a 	mul	r10,r2,r10
8000822e:	7c 09       	ld.w	r9,lr[0x0]
80008230:	f1 d8 c0 10 	bfextu	r8,r8,0x0,0x10
80008234:	f2 0b 16 10 	lsr	r11,r9,0x10
80008238:	e4 08 02 48 	mul	r8,r2,r8
8000823c:	f3 d9 c0 10 	bfextu	r9,r9,0x0,0x10
80008240:	f8 08 00 08 	add	r8,r12,r8
80008244:	ee 09 00 09 	add	r9,r7,r9
80008248:	f9 d8 c0 10 	bfextu	r12,r8,0x0,0x10
8000824c:	b1 88       	lsr	r8,0x10
8000824e:	18 19       	sub	r9,r12
80008250:	14 08       	add	r8,r10
80008252:	bc 19       	st.h	lr[0x2],r9
80008254:	f5 d8 c0 10 	bfextu	r10,r8,0x0,0x10
80008258:	b1 49       	asr	r9,0x10
8000825a:	14 1b       	sub	r11,r10
8000825c:	12 0b       	add	r11,r9
8000825e:	bc 0b       	st.h	lr[0x0],r11
80008260:	f0 0c 16 10 	lsr	r12,r8,0x10
80008264:	2f ce       	sub	lr,-4
80008266:	f6 07 14 10 	asr	r7,r11,0x10
8000826a:	40 18       	lddsp	r8,sp[0x4]
8000826c:	10 34       	cp.w	r4,r8
8000826e:	fe 98 ff db 	brls	80008224 <quorem+0x48>
80008272:	40 0c       	lddsp	r12,sp[0x0]
80008274:	58 0c       	cp.w	r12,0
80008276:	c0 f1       	brne	80008294 <quorem+0xb8>
80008278:	ec c8 ff fb 	sub	r8,r6,-5
8000827c:	ea 08 00 29 	add	r9,r5,r8<<0x2
80008280:	c0 28       	rjmp	80008284 <quorem+0xa8>
80008282:	20 16       	sub	r6,1
80008284:	20 49       	sub	r9,4
80008286:	00 39       	cp.w	r9,r0
80008288:	e0 88 00 05 	brls	80008292 <quorem+0xb6>
8000828c:	72 08       	ld.w	r8,r9[0x0]
8000828e:	58 08       	cp.w	r8,0
80008290:	cf 90       	breq	80008282 <quorem+0xa6>
80008292:	8b 46       	st.w	r5[0x10],r6
80008294:	06 9b       	mov	r11,r3
80008296:	0a 9c       	mov	r12,r5
80008298:	e0 a0 0a bb 	rcall	8000980e <__mcmp>
8000829c:	c2 e5       	brlt	800082f8 <quorem+0x11c>
8000829e:	2f f2       	sub	r2,-1
800082a0:	00 9c       	mov	r12,r0
800082a2:	30 0e       	mov	lr,0
800082a4:	78 08       	ld.w	r8,r12[0x0]
800082a6:	03 09       	ld.w	r9,r1++
800082a8:	f0 0b 16 10 	lsr	r11,r8,0x10
800082ac:	f2 0a 16 10 	lsr	r10,r9,0x10
800082b0:	f1 d8 c0 10 	bfextu	r8,r8,0x0,0x10
800082b4:	14 1b       	sub	r11,r10
800082b6:	f3 d9 c0 10 	bfextu	r9,r9,0x0,0x10
800082ba:	12 18       	sub	r8,r9
800082bc:	1c 08       	add	r8,lr
800082be:	b8 18       	st.h	r12[0x2],r8
800082c0:	b1 48       	asr	r8,0x10
800082c2:	10 0b       	add	r11,r8
800082c4:	b8 0b       	st.h	r12[0x0],r11
800082c6:	f6 0e 14 10 	asr	lr,r11,0x10
800082ca:	2f cc       	sub	r12,-4
800082cc:	40 18       	lddsp	r8,sp[0x4]
800082ce:	10 31       	cp.w	r1,r8
800082d0:	fe 98 ff ea 	brls	800082a4 <quorem+0xc8>
800082d4:	ec c9 ff fb 	sub	r9,r6,-5
800082d8:	ea 09 03 28 	ld.w	r8,r5[r9<<0x2]
800082dc:	58 08       	cp.w	r8,0
800082de:	c0 d1       	brne	800082f8 <quorem+0x11c>
800082e0:	ea 09 00 29 	add	r9,r5,r9<<0x2
800082e4:	c0 28       	rjmp	800082e8 <quorem+0x10c>
800082e6:	20 16       	sub	r6,1
800082e8:	20 49       	sub	r9,4
800082ea:	00 39       	cp.w	r9,r0
800082ec:	e0 88 00 05 	brls	800082f6 <quorem+0x11a>
800082f0:	72 08       	ld.w	r8,r9[0x0]
800082f2:	58 08       	cp.w	r8,0
800082f4:	cf 90       	breq	800082e6 <quorem+0x10a>
800082f6:	8b 46       	st.w	r5[0x10],r6
800082f8:	04 9c       	mov	r12,r2
800082fa:	2f ed       	sub	sp,-8
800082fc:	d8 32       	popm	r0-r7,pc
800082fe:	d7 03       	nop

80008300 <_dtoa_r>:
80008300:	d4 31       	pushm	r0-r7,lr
80008302:	21 9d       	sub	sp,100
80008304:	fa ce ff 78 	sub	lr,sp,-136
80008308:	50 5c       	stdsp	sp[0x14],r12
8000830a:	50 49       	stdsp	sp[0x10],r9
8000830c:	7c 2c       	ld.w	r12,lr[0x8]
8000830e:	14 90       	mov	r0,r10
80008310:	50 38       	stdsp	sp[0xc],r8
80008312:	7c 0a       	ld.w	r10,lr[0x0]
80008314:	50 1c       	stdsp	sp[0x4],r12
80008316:	50 2a       	stdsp	sp[0x8],r10
80008318:	40 59       	lddsp	r9,sp[0x14]
8000831a:	16 91       	mov	r1,r11
8000831c:	7c 16       	ld.w	r6,lr[0x4]
8000831e:	72 97       	ld.w	r7,r9[0x24]
80008320:	58 07       	cp.w	r7,0
80008322:	c0 a1       	brne	80008336 <_dtoa_r+0x36>
80008324:	31 0c       	mov	r12,16
80008326:	fe b0 e9 bb 	rcall	8000569c <malloc>
8000832a:	40 58       	lddsp	r8,sp[0x14]
8000832c:	99 37       	st.w	r12[0xc],r7
8000832e:	91 9c       	st.w	r8[0x24],r12
80008330:	99 17       	st.w	r12[0x4],r7
80008332:	99 27       	st.w	r12[0x8],r7
80008334:	99 07       	st.w	r12[0x0],r7
80008336:	40 5c       	lddsp	r12,sp[0x14]
80008338:	78 99       	ld.w	r9,r12[0x24]
8000833a:	72 0a       	ld.w	r10,r9[0x0]
8000833c:	58 0a       	cp.w	r10,0
8000833e:	c0 f0       	breq	8000835c <_dtoa_r+0x5c>
80008340:	72 18       	ld.w	r8,r9[0x4]
80008342:	95 18       	st.w	r10[0x4],r8
80008344:	30 18       	mov	r8,1
80008346:	72 19       	ld.w	r9,r9[0x4]
80008348:	f0 09 09 48 	lsl	r8,r8,r9
8000834c:	14 9b       	mov	r11,r10
8000834e:	95 28       	st.w	r10[0x8],r8
80008350:	e0 a0 0a 7c 	rcall	80009848 <_Bfree>
80008354:	40 5a       	lddsp	r10,sp[0x14]
80008356:	30 08       	mov	r8,0
80008358:	74 99       	ld.w	r9,r10[0x24]
8000835a:	93 08       	st.w	r9[0x0],r8
8000835c:	58 01       	cp.w	r1,0
8000835e:	c0 54       	brge	80008368 <_dtoa_r+0x68>
80008360:	e3 d1 c0 1f 	bfextu	r1,r1,0x0,0x1f
80008364:	30 18       	mov	r8,1
80008366:	c0 28       	rjmp	8000836a <_dtoa_r+0x6a>
80008368:	30 08       	mov	r8,0
8000836a:	8d 08       	st.w	r6[0x0],r8
8000836c:	02 97       	mov	r7,r1
8000836e:	02 98       	mov	r8,r1
80008370:	30 09       	mov	r9,0
80008372:	ea 19 7f f0 	orh	r9,0x7ff0
80008376:	e6 18 7f f0 	andh	r8,0x7ff0,COH
8000837a:	12 38       	cp.w	r8,r9
8000837c:	c1 c1       	brne	800083b4 <_dtoa_r+0xb4>
8000837e:	e0 68 27 0f 	mov	r8,9999
80008382:	40 2c       	lddsp	r12,sp[0x8]
80008384:	99 08       	st.w	r12[0x0],r8
80008386:	58 00       	cp.w	r0,0
80008388:	c0 61       	brne	80008394 <_dtoa_r+0x94>
8000838a:	f1 d1 c0 14 	bfextu	r8,r1,0x0,0x14
8000838e:	c0 31       	brne	80008394 <_dtoa_r+0x94>
80008390:	4a dc       	lddpc	r12,80008444 <_dtoa_r+0x144>
80008392:	c0 28       	rjmp	80008396 <_dtoa_r+0x96>
80008394:	4a dc       	lddpc	r12,80008448 <_dtoa_r+0x148>
80008396:	40 1a       	lddsp	r10,sp[0x4]
80008398:	58 0a       	cp.w	r10,0
8000839a:	e0 80 05 a8 	breq	80008eea <_dtoa_r+0xbea>
8000839e:	f8 c8 ff fd 	sub	r8,r12,-3
800083a2:	f8 ca ff f8 	sub	r10,r12,-8
800083a6:	11 8b       	ld.ub	r11,r8[0x0]
800083a8:	30 09       	mov	r9,0
800083aa:	f2 0b 18 00 	cp.b	r11,r9
800083ae:	f4 08 17 10 	movne	r8,r10
800083b2:	c1 68       	rjmp	800083de <_dtoa_r+0xde>
800083b4:	fa e1 00 50 	st.d	sp[80],r0
800083b8:	30 08       	mov	r8,0
800083ba:	30 09       	mov	r9,0
800083bc:	00 9a       	mov	r10,r0
800083be:	02 9b       	mov	r11,r1
800083c0:	e0 a0 11 90 	rcall	8000a6e0 <__avr32_f64_cmp_eq>
800083c4:	c1 10       	breq	800083e6 <_dtoa_r+0xe6>
800083c6:	30 18       	mov	r8,1
800083c8:	40 2c       	lddsp	r12,sp[0x8]
800083ca:	99 08       	st.w	r12[0x0],r8
800083cc:	40 1a       	lddsp	r10,sp[0x4]
800083ce:	4a 08       	lddpc	r8,8000844c <_dtoa_r+0x14c>
800083d0:	58 0a       	cp.w	r10,0
800083d2:	c0 41       	brne	800083da <_dtoa_r+0xda>
800083d4:	10 9c       	mov	r12,r8
800083d6:	e0 8f 05 8a 	bral	80008eea <_dtoa_r+0xbea>
800083da:	10 9c       	mov	r12,r8
800083dc:	2f f8       	sub	r8,-1
800083de:	40 19       	lddsp	r9,sp[0x4]
800083e0:	93 08       	st.w	r9[0x0],r8
800083e2:	e0 8f 05 84 	bral	80008eea <_dtoa_r+0xbea>
800083e6:	fa c8 ff a0 	sub	r8,sp,-96
800083ea:	fa c9 ff a4 	sub	r9,sp,-92
800083ee:	fa ea 00 50 	ld.d	r10,sp[80]
800083f2:	40 5c       	lddsp	r12,sp[0x14]
800083f4:	e0 a0 0a 7c 	rcall	800098ec <__d2b>
800083f8:	51 0c       	stdsp	sp[0x40],r12
800083fa:	f9 d1 c2 8b 	bfextu	r12,r1,0x14,0xb
800083fe:	c0 d0       	breq	80008418 <_dtoa_r+0x118>
80008400:	fa ea 00 50 	ld.d	r10,sp[80]
80008404:	30 08       	mov	r8,0
80008406:	f8 c5 03 ff 	sub	r5,r12,1023
8000840a:	50 f8       	stdsp	sp[0x3c],r8
8000840c:	f1 db c0 14 	bfextu	r8,r11,0x0,0x14
80008410:	10 9b       	mov	r11,r8
80008412:	ea 1b 3f f0 	orh	r11,0x3ff0
80008416:	c2 c8       	rjmp	8000846e <_dtoa_r+0x16e>
80008418:	41 79       	lddsp	r9,sp[0x5c]
8000841a:	41 88       	lddsp	r8,sp[0x60]
8000841c:	f0 09 00 09 	add	r9,r8,r9
80008420:	f2 ca fb ce 	sub	r10,r9,-1074
80008424:	e0 4a 00 20 	cp.w	r10,32
80008428:	e0 8a 00 14 	brle	80008450 <_dtoa_r+0x150>
8000842c:	f2 c9 fb ee 	sub	r9,r9,-1042
80008430:	f4 08 11 40 	rsub	r8,r10,64
80008434:	e0 09 0a 49 	lsr	r9,r0,r9
80008438:	e2 08 09 48 	lsl	r8,r1,r8
8000843c:	f3 e8 10 0c 	or	r12,r9,r8
80008440:	c0 c8       	rjmp	80008458 <_dtoa_r+0x158>
80008442:	d7 03       	nop
80008444:	80 00       	ld.sh	r0,r0[0x0]
80008446:	c1 40       	breq	8000846e <_dtoa_r+0x16e>
80008448:	80 00       	ld.sh	r0,r0[0x0]
8000844a:	c1 4c       	rcall	80008472 <_dtoa_r+0x172>
8000844c:	80 00       	ld.sh	r0,r0[0x0]
8000844e:	c0 2c       	rcall	80008452 <_dtoa_r+0x152>
80008450:	f4 08 11 20 	rsub	r8,r10,32
80008454:	e0 08 09 4c 	lsl	r12,r0,r8
80008458:	f4 c5 04 33 	sub	r5,r10,1075
8000845c:	e0 a0 10 c6 	rcall	8000a5e8 <__avr32_u32_to_f64>
80008460:	30 08       	mov	r8,0
80008462:	ea 18 fe 10 	orh	r8,0xfe10
80008466:	30 1c       	mov	r12,1
80008468:	f0 0b 00 0b 	add	r11,r8,r11
8000846c:	50 fc       	stdsp	sp[0x3c],r12
8000846e:	30 08       	mov	r8,0
80008470:	30 09       	mov	r9,0
80008472:	ea 19 3f f8 	orh	r9,0x3ff8
80008476:	e0 a0 0f 43 	rcall	8000a2fc <__avr32_f64_sub>
8000847a:	e0 68 43 61 	mov	r8,17249
8000847e:	ea 18 63 6f 	orh	r8,0x636f
80008482:	e0 69 87 a7 	mov	r9,34727
80008486:	ea 19 3f d2 	orh	r9,0x3fd2
8000848a:	e0 a0 0e 45 	rcall	8000a114 <__avr32_f64_mul>
8000848e:	e0 68 c8 b3 	mov	r8,51379
80008492:	ea 18 8b 60 	orh	r8,0x8b60
80008496:	e0 69 8a 28 	mov	r9,35368
8000849a:	ea 19 3f c6 	orh	r9,0x3fc6
8000849e:	e0 a0 0f fd 	rcall	8000a498 <__avr32_f64_add>
800084a2:	0a 9c       	mov	r12,r5
800084a4:	14 92       	mov	r2,r10
800084a6:	16 93       	mov	r3,r11
800084a8:	e0 a0 10 a4 	rcall	8000a5f0 <__avr32_s32_to_f64>
800084ac:	e0 68 79 fb 	mov	r8,31227
800084b0:	ea 18 50 9f 	orh	r8,0x509f
800084b4:	e0 69 44 13 	mov	r9,17427
800084b8:	ea 19 3f d3 	orh	r9,0x3fd3
800084bc:	e0 a0 0e 2c 	rcall	8000a114 <__avr32_f64_mul>
800084c0:	14 98       	mov	r8,r10
800084c2:	16 99       	mov	r9,r11
800084c4:	04 9a       	mov	r10,r2
800084c6:	06 9b       	mov	r11,r3
800084c8:	e0 a0 0f e8 	rcall	8000a498 <__avr32_f64_add>
800084cc:	16 97       	mov	r7,r11
800084ce:	14 96       	mov	r6,r10
800084d0:	0e 9b       	mov	r11,r7
800084d2:	e0 a0 10 71 	rcall	8000a5b4 <__avr32_f64_to_s32>
800084d6:	30 08       	mov	r8,0
800084d8:	50 ac       	stdsp	sp[0x28],r12
800084da:	30 09       	mov	r9,0
800084dc:	0c 9a       	mov	r10,r6
800084de:	0e 9b       	mov	r11,r7
800084e0:	e0 a0 11 50 	rcall	8000a780 <__avr32_f64_cmp_lt>
800084e4:	c0 f0       	breq	80008502 <_dtoa_r+0x202>
800084e6:	40 ac       	lddsp	r12,sp[0x28]
800084e8:	e0 a0 10 84 	rcall	8000a5f0 <__avr32_s32_to_f64>
800084ec:	14 98       	mov	r8,r10
800084ee:	16 99       	mov	r9,r11
800084f0:	0c 9a       	mov	r10,r6
800084f2:	0e 9b       	mov	r11,r7
800084f4:	e0 a0 10 f6 	rcall	8000a6e0 <__avr32_f64_cmp_eq>
800084f8:	40 a8       	lddsp	r8,sp[0x28]
800084fa:	20 18       	sub	r8,1
800084fc:	58 0c       	cp.w	r12,0
800084fe:	c0 21       	brne	80008502 <_dtoa_r+0x202>
80008500:	50 a8       	stdsp	sp[0x28],r8
80008502:	40 aa       	lddsp	r10,sp[0x28]
80008504:	59 6a       	cp.w	r10,22
80008506:	e0 88 00 05 	brls	80008510 <_dtoa_r+0x210>
8000850a:	30 19       	mov	r9,1
8000850c:	50 b9       	stdsp	sp[0x2c],r9
8000850e:	c1 28       	rjmp	80008532 <_dtoa_r+0x232>
80008510:	40 ac       	lddsp	r12,sp[0x28]
80008512:	fa ea 00 50 	ld.d	r10,sp[80]
80008516:	4c 28       	lddpc	r8,8000861c <_dtoa_r+0x31c>
80008518:	f0 0c 02 38 	ld.d	r8,r8[r12<<0x3]
8000851c:	e0 a0 11 32 	rcall	8000a780 <__avr32_f64_cmp_lt>
80008520:	30 0a       	mov	r10,0
80008522:	40 a8       	lddsp	r8,sp[0x28]
80008524:	40 a9       	lddsp	r9,sp[0x28]
80008526:	20 18       	sub	r8,1
80008528:	50 ba       	stdsp	sp[0x2c],r10
8000852a:	14 3c       	cp.w	r12,r10
8000852c:	f0 09 17 10 	movne	r9,r8
80008530:	50 a9       	stdsp	sp[0x28],r9
80008532:	41 88       	lddsp	r8,sp[0x60]
80008534:	20 18       	sub	r8,1
80008536:	f0 05 01 0a 	sub	r10,r8,r5
8000853a:	c0 56       	brmi	80008544 <_dtoa_r+0x244>
8000853c:	30 08       	mov	r8,0
8000853e:	50 da       	stdsp	sp[0x34],r10
80008540:	50 68       	stdsp	sp[0x18],r8
80008542:	c0 58       	rjmp	8000854c <_dtoa_r+0x24c>
80008544:	5c 3a       	neg	r10
80008546:	30 0c       	mov	r12,0
80008548:	50 6a       	stdsp	sp[0x18],r10
8000854a:	50 dc       	stdsp	sp[0x34],r12
8000854c:	40 aa       	lddsp	r10,sp[0x28]
8000854e:	58 0a       	cp.w	r10,0
80008550:	c0 85       	brlt	80008560 <_dtoa_r+0x260>
80008552:	40 d9       	lddsp	r9,sp[0x34]
80008554:	30 08       	mov	r8,0
80008556:	14 09       	add	r9,r10
80008558:	50 ea       	stdsp	sp[0x38],r10
8000855a:	50 d9       	stdsp	sp[0x34],r9
8000855c:	50 78       	stdsp	sp[0x1c],r8
8000855e:	c0 98       	rjmp	80008570 <_dtoa_r+0x270>
80008560:	40 6c       	lddsp	r12,sp[0x18]
80008562:	40 aa       	lddsp	r10,sp[0x28]
80008564:	30 09       	mov	r9,0
80008566:	14 1c       	sub	r12,r10
80008568:	50 e9       	stdsp	sp[0x38],r9
8000856a:	5c 3a       	neg	r10
8000856c:	50 6c       	stdsp	sp[0x18],r12
8000856e:	50 7a       	stdsp	sp[0x1c],r10
80008570:	40 48       	lddsp	r8,sp[0x10]
80008572:	58 98       	cp.w	r8,9
80008574:	e0 8b 00 24 	brhi	800085bc <_dtoa_r+0x2bc>
80008578:	20 48       	sub	r8,4
8000857a:	40 4c       	lddsp	r12,sp[0x10]
8000857c:	58 5c       	cp.w	r12,5
8000857e:	e0 89 00 04 	brgt	80008586 <_dtoa_r+0x286>
80008582:	30 16       	mov	r6,1
80008584:	c0 38       	rjmp	8000858a <_dtoa_r+0x28a>
80008586:	50 48       	stdsp	sp[0x10],r8
80008588:	30 06       	mov	r6,0
8000858a:	40 4a       	lddsp	r10,sp[0x10]
8000858c:	58 2a       	cp.w	r10,2
8000858e:	c2 30       	breq	800085d4 <_dtoa_r+0x2d4>
80008590:	e0 89 00 05 	brgt	8000859a <_dtoa_r+0x29a>
80008594:	58 0a       	cp.w	r10,0
80008596:	c1 64       	brge	800085c2 <_dtoa_r+0x2c2>
80008598:	c0 78       	rjmp	800085a6 <_dtoa_r+0x2a6>
8000859a:	40 49       	lddsp	r9,sp[0x10]
8000859c:	58 49       	cp.w	r9,4
8000859e:	c0 a0       	breq	800085b2 <_dtoa_r+0x2b2>
800085a0:	c2 95       	brlt	800085f2 <_dtoa_r+0x2f2>
800085a2:	58 59       	cp.w	r9,5
800085a4:	c0 a0       	breq	800085b8 <_dtoa_r+0x2b8>
800085a6:	3f f8       	mov	r8,-1
800085a8:	30 1c       	mov	r12,1
800085aa:	50 88       	stdsp	sp[0x20],r8
800085ac:	50 cc       	stdsp	sp[0x30],r12
800085ae:	50 98       	stdsp	sp[0x24],r8
800085b0:	c3 08       	rjmp	80008610 <_dtoa_r+0x310>
800085b2:	30 1a       	mov	r10,1
800085b4:	50 ca       	stdsp	sp[0x30],r10
800085b6:	c1 18       	rjmp	800085d8 <_dtoa_r+0x2d8>
800085b8:	30 19       	mov	r9,1
800085ba:	c1 d8       	rjmp	800085f4 <_dtoa_r+0x2f4>
800085bc:	30 08       	mov	r8,0
800085be:	30 16       	mov	r6,1
800085c0:	50 48       	stdsp	sp[0x10],r8
800085c2:	3f fc       	mov	r12,-1
800085c4:	30 0a       	mov	r10,0
800085c6:	30 19       	mov	r9,1
800085c8:	50 8c       	stdsp	sp[0x20],r12
800085ca:	50 3a       	stdsp	sp[0xc],r10
800085cc:	31 25       	mov	r5,18
800085ce:	50 9c       	stdsp	sp[0x24],r12
800085d0:	50 c9       	stdsp	sp[0x30],r9
800085d2:	c1 f8       	rjmp	80008610 <_dtoa_r+0x310>
800085d4:	30 08       	mov	r8,0
800085d6:	50 c8       	stdsp	sp[0x30],r8
800085d8:	40 3c       	lddsp	r12,sp[0xc]
800085da:	58 0c       	cp.w	r12,0
800085dc:	e0 89 00 07 	brgt	800085ea <_dtoa_r+0x2ea>
800085e0:	30 1a       	mov	r10,1
800085e2:	50 3a       	stdsp	sp[0xc],r10
800085e4:	14 95       	mov	r5,r10
800085e6:	50 8a       	stdsp	sp[0x20],r10
800085e8:	c0 38       	rjmp	800085ee <_dtoa_r+0x2ee>
800085ea:	40 35       	lddsp	r5,sp[0xc]
800085ec:	50 85       	stdsp	sp[0x20],r5
800085ee:	50 95       	stdsp	sp[0x24],r5
800085f0:	c1 08       	rjmp	80008610 <_dtoa_r+0x310>
800085f2:	30 09       	mov	r9,0
800085f4:	40 a8       	lddsp	r8,sp[0x28]
800085f6:	40 3c       	lddsp	r12,sp[0xc]
800085f8:	50 c9       	stdsp	sp[0x30],r9
800085fa:	18 08       	add	r8,r12
800085fc:	50 98       	stdsp	sp[0x24],r8
800085fe:	10 95       	mov	r5,r8
80008600:	2f f5       	sub	r5,-1
80008602:	58 05       	cp.w	r5,0
80008604:	e0 89 00 05 	brgt	8000860e <_dtoa_r+0x30e>
80008608:	50 85       	stdsp	sp[0x20],r5
8000860a:	30 15       	mov	r5,1
8000860c:	c0 28       	rjmp	80008610 <_dtoa_r+0x310>
8000860e:	50 85       	stdsp	sp[0x20],r5
80008610:	40 5a       	lddsp	r10,sp[0x14]
80008612:	74 99       	ld.w	r9,r10[0x24]
80008614:	30 08       	mov	r8,0
80008616:	93 18       	st.w	r9[0x4],r8
80008618:	30 49       	mov	r9,4
8000861a:	c0 78       	rjmp	80008628 <_dtoa_r+0x328>
8000861c:	80 00       	ld.sh	r0,r0[0x0]
8000861e:	c1 90       	breq	80008650 <_dtoa_r+0x350>
80008620:	6e 18       	ld.w	r8,r7[0x4]
80008622:	a1 79       	lsl	r9,0x1
80008624:	2f f8       	sub	r8,-1
80008626:	8f 18       	st.w	r7[0x4],r8
80008628:	40 58       	lddsp	r8,sp[0x14]
8000862a:	70 97       	ld.w	r7,r8[0x24]
8000862c:	f2 c8 ff ec 	sub	r8,r9,-20
80008630:	0a 38       	cp.w	r8,r5
80008632:	fe 98 ff f7 	brls	80008620 <_dtoa_r+0x320>
80008636:	6e 1b       	ld.w	r11,r7[0x4]
80008638:	40 5c       	lddsp	r12,sp[0x14]
8000863a:	e0 a0 09 21 	rcall	8000987c <_Balloc>
8000863e:	40 5a       	lddsp	r10,sp[0x14]
80008640:	8f 0c       	st.w	r7[0x0],r12
80008642:	74 99       	ld.w	r9,r10[0x24]
80008644:	72 09       	ld.w	r9,r9[0x0]
80008646:	51 69       	stdsp	sp[0x58],r9
80008648:	40 8c       	lddsp	r12,sp[0x20]
8000864a:	58 ec       	cp.w	r12,14
8000864c:	5f 88       	srls	r8
8000864e:	0c 68       	and	r8,r6
80008650:	e0 80 01 78 	breq	80008940 <_dtoa_r+0x640>
80008654:	40 a9       	lddsp	r9,sp[0x28]
80008656:	58 09       	cp.w	r9,0
80008658:	e0 8a 00 35 	brle	800086c2 <_dtoa_r+0x3c2>
8000865c:	f1 d9 c0 04 	bfextu	r8,r9,0x0,0x4
80008660:	40 a7       	lddsp	r7,sp[0x28]
80008662:	4c 29       	lddpc	r9,80008768 <_dtoa_r+0x468>
80008664:	a5 47       	asr	r7,0x4
80008666:	f2 08 02 34 	ld.d	r4,r9[r8<<0x3]
8000866a:	ed b7 00 04 	bld	r7,0x4
8000866e:	c0 30       	breq	80008674 <_dtoa_r+0x374>
80008670:	30 23       	mov	r3,2
80008672:	c0 d8       	rjmp	8000868c <_dtoa_r+0x38c>
80008674:	ef d7 c0 04 	bfextu	r7,r7,0x0,0x4
80008678:	4b d8       	lddpc	r8,8000876c <_dtoa_r+0x46c>
8000867a:	fa ea 00 50 	ld.d	r10,sp[80]
8000867e:	f0 e8 00 20 	ld.d	r8,r8[32]
80008682:	30 33       	mov	r3,3
80008684:	e0 a0 10 bc 	rcall	8000a7fc <__avr32_f64_div>
80008688:	14 90       	mov	r0,r10
8000868a:	16 91       	mov	r1,r11
8000868c:	4b 86       	lddpc	r6,8000876c <_dtoa_r+0x46c>
8000868e:	c0 f8       	rjmp	800086ac <_dtoa_r+0x3ac>
80008690:	08 9a       	mov	r10,r4
80008692:	0a 9b       	mov	r11,r5
80008694:	ed b7 00 00 	bld	r7,0x0
80008698:	c0 81       	brne	800086a8 <_dtoa_r+0x3a8>
8000869a:	ec e8 00 00 	ld.d	r8,r6[0]
8000869e:	2f f3       	sub	r3,-1
800086a0:	e0 a0 0d 3a 	rcall	8000a114 <__avr32_f64_mul>
800086a4:	14 94       	mov	r4,r10
800086a6:	16 95       	mov	r5,r11
800086a8:	a1 57       	asr	r7,0x1
800086aa:	2f 86       	sub	r6,-8
800086ac:	58 07       	cp.w	r7,0
800086ae:	cf 11       	brne	80008690 <_dtoa_r+0x390>
800086b0:	00 9a       	mov	r10,r0
800086b2:	02 9b       	mov	r11,r1
800086b4:	08 98       	mov	r8,r4
800086b6:	0a 99       	mov	r9,r5
800086b8:	e0 a0 10 a2 	rcall	8000a7fc <__avr32_f64_div>
800086bc:	14 90       	mov	r0,r10
800086be:	16 91       	mov	r1,r11
800086c0:	c2 88       	rjmp	80008710 <_dtoa_r+0x410>
800086c2:	40 a9       	lddsp	r9,sp[0x28]
800086c4:	5c 39       	neg	r9
800086c6:	c0 31       	brne	800086cc <_dtoa_r+0x3cc>
800086c8:	30 23       	mov	r3,2
800086ca:	c2 38       	rjmp	80008710 <_dtoa_r+0x410>
800086cc:	f2 04 14 04 	asr	r4,r9,0x4
800086d0:	4a 68       	lddpc	r8,80008768 <_dtoa_r+0x468>
800086d2:	f3 d9 c0 04 	bfextu	r9,r9,0x0,0x4
800086d6:	fa ea 00 50 	ld.d	r10,sp[80]
800086da:	f0 09 02 38 	ld.d	r8,r8[r9<<0x3]
800086de:	4a 45       	lddpc	r5,8000876c <_dtoa_r+0x46c>
800086e0:	e0 a0 0d 1a 	rcall	8000a114 <__avr32_f64_mul>
800086e4:	30 23       	mov	r3,2
800086e6:	14 96       	mov	r6,r10
800086e8:	16 97       	mov	r7,r11
800086ea:	c0 f8       	rjmp	80008708 <_dtoa_r+0x408>
800086ec:	0c 9a       	mov	r10,r6
800086ee:	0e 9b       	mov	r11,r7
800086f0:	ed b4 00 00 	bld	r4,0x0
800086f4:	c0 81       	brne	80008704 <_dtoa_r+0x404>
800086f6:	ea e8 00 00 	ld.d	r8,r5[0]
800086fa:	2f f3       	sub	r3,-1
800086fc:	e0 a0 0d 0c 	rcall	8000a114 <__avr32_f64_mul>
80008700:	14 96       	mov	r6,r10
80008702:	16 97       	mov	r7,r11
80008704:	a1 54       	asr	r4,0x1
80008706:	2f 85       	sub	r5,-8
80008708:	58 04       	cp.w	r4,0
8000870a:	cf 11       	brne	800086ec <_dtoa_r+0x3ec>
8000870c:	0c 90       	mov	r0,r6
8000870e:	0e 91       	mov	r1,r7
80008710:	40 b8       	lddsp	r8,sp[0x2c]
80008712:	58 08       	cp.w	r8,0
80008714:	c2 e0       	breq	80008770 <_dtoa_r+0x470>
80008716:	30 08       	mov	r8,0
80008718:	00 9a       	mov	r10,r0
8000871a:	02 97       	mov	r7,r1
8000871c:	30 09       	mov	r9,0
8000871e:	ea 19 3f f0 	orh	r9,0x3ff0
80008722:	02 9b       	mov	r11,r1
80008724:	e0 a0 10 2e 	rcall	8000a780 <__avr32_f64_cmp_lt>
80008728:	40 8a       	lddsp	r10,sp[0x20]
8000872a:	f9 bc 00 00 	moveq	r12,0
8000872e:	f9 bc 01 01 	movne	r12,1
80008732:	58 0a       	cp.w	r10,0
80008734:	5f 98       	srgt	r8
80008736:	00 96       	mov	r6,r0
80008738:	18 68       	and	r8,r12
8000873a:	c1 b0       	breq	80008770 <_dtoa_r+0x470>
8000873c:	40 99       	lddsp	r9,sp[0x24]
8000873e:	58 09       	cp.w	r9,0
80008740:	e0 8a 00 fe 	brle	8000893c <_dtoa_r+0x63c>
80008744:	40 ac       	lddsp	r12,sp[0x28]
80008746:	20 1c       	sub	r12,1
80008748:	00 9a       	mov	r10,r0
8000874a:	02 9b       	mov	r11,r1
8000874c:	30 08       	mov	r8,0
8000874e:	30 09       	mov	r9,0
80008750:	ea 19 40 24 	orh	r9,0x4024
80008754:	51 3c       	stdsp	sp[0x4c],r12
80008756:	e0 a0 0c df 	rcall	8000a114 <__avr32_f64_mul>
8000875a:	2f f3       	sub	r3,-1
8000875c:	14 90       	mov	r0,r10
8000875e:	16 91       	mov	r1,r11
80008760:	40 9a       	lddsp	r10,sp[0x24]
80008762:	51 2a       	stdsp	sp[0x48],r10
80008764:	c0 a8       	rjmp	80008778 <_dtoa_r+0x478>
80008766:	d7 03       	nop
80008768:	80 00       	ld.sh	r0,r0[0x0]
8000876a:	c1 90       	breq	8000879c <_dtoa_r+0x49c>
8000876c:	80 00       	ld.sh	r0,r0[0x0]
8000876e:	c2 58       	rjmp	800087b8 <_dtoa_r+0x4b8>
80008770:	40 89       	lddsp	r9,sp[0x20]
80008772:	40 a8       	lddsp	r8,sp[0x28]
80008774:	51 29       	stdsp	sp[0x48],r9
80008776:	51 38       	stdsp	sp[0x4c],r8
80008778:	06 9c       	mov	r12,r3
8000877a:	e0 a0 0f 3b 	rcall	8000a5f0 <__avr32_s32_to_f64>
8000877e:	00 98       	mov	r8,r0
80008780:	02 99       	mov	r9,r1
80008782:	e0 a0 0c c9 	rcall	8000a114 <__avr32_f64_mul>
80008786:	30 08       	mov	r8,0
80008788:	30 09       	mov	r9,0
8000878a:	ea 19 40 1c 	orh	r9,0x401c
8000878e:	e0 a0 0e 85 	rcall	8000a498 <__avr32_f64_add>
80008792:	30 08       	mov	r8,0
80008794:	ea 18 fc c0 	orh	r8,0xfcc0
80008798:	16 97       	mov	r7,r11
8000879a:	00 94       	mov	r4,r0
8000879c:	02 95       	mov	r5,r1
8000879e:	14 96       	mov	r6,r10
800087a0:	f0 07 00 07 	add	r7,r8,r7
800087a4:	41 2c       	lddsp	r12,sp[0x48]
800087a6:	58 0c       	cp.w	r12,0
800087a8:	c2 11       	brne	800087ea <_dtoa_r+0x4ea>
800087aa:	30 08       	mov	r8,0
800087ac:	30 09       	mov	r9,0
800087ae:	ea 19 40 14 	orh	r9,0x4014
800087b2:	00 9a       	mov	r10,r0
800087b4:	02 9b       	mov	r11,r1
800087b6:	e0 a0 0d a3 	rcall	8000a2fc <__avr32_f64_sub>
800087ba:	0c 93       	mov	r3,r6
800087bc:	16 95       	mov	r5,r11
800087be:	14 94       	mov	r4,r10
800087c0:	14 98       	mov	r8,r10
800087c2:	0a 99       	mov	r9,r5
800087c4:	0e 9b       	mov	r11,r7
800087c6:	0c 9a       	mov	r10,r6
800087c8:	e0 a0 0f dc 	rcall	8000a780 <__avr32_f64_cmp_lt>
800087cc:	e0 81 02 64 	brne	80008c94 <_dtoa_r+0x994>
800087d0:	0e 98       	mov	r8,r7
800087d2:	ee 18 80 00 	eorh	r8,0x8000
800087d6:	08 9a       	mov	r10,r4
800087d8:	10 93       	mov	r3,r8
800087da:	0a 9b       	mov	r11,r5
800087dc:	0c 98       	mov	r8,r6
800087de:	06 99       	mov	r9,r3
800087e0:	e0 a0 0f d0 	rcall	8000a780 <__avr32_f64_cmp_lt>
800087e4:	e0 81 02 51 	brne	80008c86 <_dtoa_r+0x986>
800087e8:	ca a8       	rjmp	8000893c <_dtoa_r+0x63c>
800087ea:	41 28       	lddsp	r8,sp[0x48]
800087ec:	4d 39       	lddpc	r9,80008938 <_dtoa_r+0x638>
800087ee:	20 18       	sub	r8,1
800087f0:	40 ca       	lddsp	r10,sp[0x30]
800087f2:	58 0a       	cp.w	r10,0
800087f4:	c5 10       	breq	80008896 <_dtoa_r+0x596>
800087f6:	f2 08 02 38 	ld.d	r8,r9[r8<<0x3]
800087fa:	30 0a       	mov	r10,0
800087fc:	30 0b       	mov	r11,0
800087fe:	ea 1b 3f e0 	orh	r11,0x3fe0
80008802:	e0 a0 0f fd 	rcall	8000a7fc <__avr32_f64_div>
80008806:	0e 99       	mov	r9,r7
80008808:	0c 98       	mov	r8,r6
8000880a:	30 07       	mov	r7,0
8000880c:	41 61       	lddsp	r1,sp[0x58]
8000880e:	e0 a0 0d 77 	rcall	8000a2fc <__avr32_f64_sub>
80008812:	14 92       	mov	r2,r10
80008814:	16 93       	mov	r3,r11
80008816:	08 9a       	mov	r10,r4
80008818:	0a 9b       	mov	r11,r5
8000881a:	e0 a0 0e cd 	rcall	8000a5b4 <__avr32_f64_to_s32>
8000881e:	18 96       	mov	r6,r12
80008820:	e0 a0 0e e8 	rcall	8000a5f0 <__avr32_s32_to_f64>
80008824:	14 98       	mov	r8,r10
80008826:	16 99       	mov	r9,r11
80008828:	08 9a       	mov	r10,r4
8000882a:	0a 9b       	mov	r11,r5
8000882c:	e0 a0 0d 68 	rcall	8000a2fc <__avr32_f64_sub>
80008830:	2d 06       	sub	r6,-48
80008832:	16 95       	mov	r5,r11
80008834:	14 94       	mov	r4,r10
80008836:	02 c6       	st.b	r1++,r6
80008838:	2f f7       	sub	r7,-1
8000883a:	04 98       	mov	r8,r2
8000883c:	06 99       	mov	r9,r3
8000883e:	0a 9b       	mov	r11,r5
80008840:	e0 a0 0f a0 	rcall	8000a780 <__avr32_f64_cmp_lt>
80008844:	e0 81 03 43 	brne	80008eca <_dtoa_r+0xbca>
80008848:	08 98       	mov	r8,r4
8000884a:	0a 99       	mov	r9,r5
8000884c:	30 0a       	mov	r10,0
8000884e:	30 0b       	mov	r11,0
80008850:	ea 1b 3f f0 	orh	r11,0x3ff0
80008854:	e0 a0 0d 54 	rcall	8000a2fc <__avr32_f64_sub>
80008858:	04 98       	mov	r8,r2
8000885a:	06 99       	mov	r9,r3
8000885c:	e0 a0 0f 92 	rcall	8000a780 <__avr32_f64_cmp_lt>
80008860:	04 9a       	mov	r10,r2
80008862:	06 9b       	mov	r11,r3
80008864:	30 08       	mov	r8,0
80008866:	30 09       	mov	r9,0
80008868:	ea 19 40 24 	orh	r9,0x4024
8000886c:	58 0c       	cp.w	r12,0
8000886e:	e0 81 00 e5 	brne	80008a38 <_dtoa_r+0x738>
80008872:	41 2c       	lddsp	r12,sp[0x48]
80008874:	18 37       	cp.w	r7,r12
80008876:	c6 34       	brge	8000893c <_dtoa_r+0x63c>
80008878:	e0 a0 0c 4e 	rcall	8000a114 <__avr32_f64_mul>
8000887c:	30 08       	mov	r8,0
8000887e:	14 92       	mov	r2,r10
80008880:	16 93       	mov	r3,r11
80008882:	08 9a       	mov	r10,r4
80008884:	0a 9b       	mov	r11,r5
80008886:	30 09       	mov	r9,0
80008888:	ea 19 40 24 	orh	r9,0x4024
8000888c:	e0 a0 0c 44 	rcall	8000a114 <__avr32_f64_mul>
80008890:	14 94       	mov	r4,r10
80008892:	16 95       	mov	r5,r11
80008894:	cc 1b       	rjmp	80008816 <_dtoa_r+0x516>
80008896:	41 2c       	lddsp	r12,sp[0x48]
80008898:	f2 08 02 3a 	ld.d	r10,r9[r8<<0x3]
8000889c:	41 61       	lddsp	r1,sp[0x58]
8000889e:	0e 99       	mov	r9,r7
800088a0:	0c 98       	mov	r8,r6
800088a2:	18 01       	add	r1,r12
800088a4:	e0 a0 0c 38 	rcall	8000a114 <__avr32_f64_mul>
800088a8:	41 67       	lddsp	r7,sp[0x58]
800088aa:	14 92       	mov	r2,r10
800088ac:	16 93       	mov	r3,r11
800088ae:	08 9a       	mov	r10,r4
800088b0:	0a 9b       	mov	r11,r5
800088b2:	e0 a0 0e 81 	rcall	8000a5b4 <__avr32_f64_to_s32>
800088b6:	18 96       	mov	r6,r12
800088b8:	e0 a0 0e 9c 	rcall	8000a5f0 <__avr32_s32_to_f64>
800088bc:	2d 06       	sub	r6,-48
800088be:	14 98       	mov	r8,r10
800088c0:	16 99       	mov	r9,r11
800088c2:	08 9a       	mov	r10,r4
800088c4:	0a 9b       	mov	r11,r5
800088c6:	e0 a0 0d 1b 	rcall	8000a2fc <__avr32_f64_sub>
800088ca:	0e c6       	st.b	r7++,r6
800088cc:	14 94       	mov	r4,r10
800088ce:	16 95       	mov	r5,r11
800088d0:	02 37       	cp.w	r7,r1
800088d2:	c2 81       	brne	80008922 <_dtoa_r+0x622>
800088d4:	30 08       	mov	r8,0
800088d6:	30 09       	mov	r9,0
800088d8:	ea 19 3f e0 	orh	r9,0x3fe0
800088dc:	04 9a       	mov	r10,r2
800088de:	06 9b       	mov	r11,r3
800088e0:	e0 a0 0d dc 	rcall	8000a498 <__avr32_f64_add>
800088e4:	0e 91       	mov	r1,r7
800088e6:	08 98       	mov	r8,r4
800088e8:	0a 99       	mov	r9,r5
800088ea:	e0 a0 0f 4b 	rcall	8000a780 <__avr32_f64_cmp_lt>
800088ee:	e0 81 00 a5 	brne	80008a38 <_dtoa_r+0x738>
800088f2:	04 98       	mov	r8,r2
800088f4:	06 99       	mov	r9,r3
800088f6:	30 0a       	mov	r10,0
800088f8:	30 0b       	mov	r11,0
800088fa:	ea 1b 3f e0 	orh	r11,0x3fe0
800088fe:	e0 a0 0c ff 	rcall	8000a2fc <__avr32_f64_sub>
80008902:	14 98       	mov	r8,r10
80008904:	16 99       	mov	r9,r11
80008906:	08 9a       	mov	r10,r4
80008908:	0a 9b       	mov	r11,r5
8000890a:	e0 a0 0f 3b 	rcall	8000a780 <__avr32_f64_cmp_lt>
8000890e:	c1 70       	breq	8000893c <_dtoa_r+0x63c>
80008910:	33 0a       	mov	r10,48
80008912:	02 99       	mov	r9,r1
80008914:	13 78       	ld.ub	r8,--r9
80008916:	f4 08 18 00 	cp.b	r8,r10
8000891a:	e0 81 02 d8 	brne	80008eca <_dtoa_r+0xbca>
8000891e:	12 91       	mov	r1,r9
80008920:	cf 9b       	rjmp	80008912 <_dtoa_r+0x612>
80008922:	0a 9b       	mov	r11,r5
80008924:	30 08       	mov	r8,0
80008926:	30 09       	mov	r9,0
80008928:	ea 19 40 24 	orh	r9,0x4024
8000892c:	e0 a0 0b f4 	rcall	8000a114 <__avr32_f64_mul>
80008930:	14 94       	mov	r4,r10
80008932:	16 95       	mov	r5,r11
80008934:	cb db       	rjmp	800088ae <_dtoa_r+0x5ae>
80008936:	d7 03       	nop
80008938:	80 00       	ld.sh	r0,r0[0x0]
8000893a:	c1 90       	breq	8000896c <_dtoa_r+0x66c>
8000893c:	fa e0 00 50 	ld.d	r0,sp[80]
80008940:	40 aa       	lddsp	r10,sp[0x28]
80008942:	30 0b       	mov	r11,0
80008944:	58 ea       	cp.w	r10,14
80008946:	5f a9       	srle	r9
80008948:	41 7a       	lddsp	r10,sp[0x5c]
8000894a:	f4 08 11 ff 	rsub	r8,r10,-1
8000894e:	f3 e8 03 f9 	and	r9,r9,r8>>0x1f
80008952:	f6 09 18 00 	cp.b	r9,r11
80008956:	e0 80 00 8d 	breq	80008a70 <_dtoa_r+0x770>
8000895a:	40 89       	lddsp	r9,sp[0x20]
8000895c:	40 3c       	lddsp	r12,sp[0xc]
8000895e:	58 09       	cp.w	r9,0
80008960:	5f a8       	srle	r8
80008962:	4c c9       	lddpc	r9,80008a90 <_dtoa_r+0x790>
80008964:	40 aa       	lddsp	r10,sp[0x28]
80008966:	f1 ec 03 f8 	and	r8,r8,r12>>0x1f
8000896a:	f2 0a 02 34 	ld.d	r4,r9[r10<<0x3]
8000896e:	f6 08 18 00 	cp.b	r8,r11
80008972:	c1 60       	breq	8000899e <_dtoa_r+0x69e>
80008974:	40 89       	lddsp	r9,sp[0x20]
80008976:	58 09       	cp.w	r9,0
80008978:	e0 81 01 87 	brne	80008c86 <_dtoa_r+0x986>
8000897c:	30 08       	mov	r8,0
8000897e:	30 09       	mov	r9,0
80008980:	ea 19 40 14 	orh	r9,0x4014
80008984:	08 9a       	mov	r10,r4
80008986:	0a 9b       	mov	r11,r5
80008988:	e0 a0 0b c6 	rcall	8000a114 <__avr32_f64_mul>
8000898c:	00 98       	mov	r8,r0
8000898e:	02 99       	mov	r9,r1
80008990:	e0 a0 0e c3 	rcall	8000a716 <__avr32_f64_cmp_ge>
80008994:	e0 81 01 79 	brne	80008c86 <_dtoa_r+0x986>
80008998:	40 84       	lddsp	r4,sp[0x20]
8000899a:	e0 8f 01 80 	bral	80008c9a <_dtoa_r+0x99a>
8000899e:	02 97       	mov	r7,r1
800089a0:	00 96       	mov	r6,r0
800089a2:	41 61       	lddsp	r1,sp[0x58]
800089a4:	30 13       	mov	r3,1
800089a6:	08 98       	mov	r8,r4
800089a8:	0a 99       	mov	r9,r5
800089aa:	0c 9a       	mov	r10,r6
800089ac:	0e 9b       	mov	r11,r7
800089ae:	e0 a0 0f 27 	rcall	8000a7fc <__avr32_f64_div>
800089b2:	e0 a0 0e 01 	rcall	8000a5b4 <__avr32_f64_to_s32>
800089b6:	18 92       	mov	r2,r12
800089b8:	e0 a0 0e 1c 	rcall	8000a5f0 <__avr32_s32_to_f64>
800089bc:	08 98       	mov	r8,r4
800089be:	0a 99       	mov	r9,r5
800089c0:	e0 a0 0b aa 	rcall	8000a114 <__avr32_f64_mul>
800089c4:	14 98       	mov	r8,r10
800089c6:	16 99       	mov	r9,r11
800089c8:	0c 9a       	mov	r10,r6
800089ca:	0e 9b       	mov	r11,r7
800089cc:	e0 a0 0c 98 	rcall	8000a2fc <__avr32_f64_sub>
800089d0:	e4 c8 ff d0 	sub	r8,r2,-48
800089d4:	02 c8       	st.b	r1++,r8
800089d6:	16 97       	mov	r7,r11
800089d8:	14 96       	mov	r6,r10
800089da:	0e 9b       	mov	r11,r7
800089dc:	30 08       	mov	r8,0
800089de:	30 09       	mov	r9,0
800089e0:	ea 19 40 24 	orh	r9,0x4024
800089e4:	40 8c       	lddsp	r12,sp[0x20]
800089e6:	18 33       	cp.w	r3,r12
800089e8:	c3 71       	brne	80008a56 <_dtoa_r+0x756>
800089ea:	0c 98       	mov	r8,r6
800089ec:	0e 99       	mov	r9,r7
800089ee:	e0 a0 0d 55 	rcall	8000a498 <__avr32_f64_add>
800089f2:	16 97       	mov	r7,r11
800089f4:	14 96       	mov	r6,r10
800089f6:	14 98       	mov	r8,r10
800089f8:	0e 99       	mov	r9,r7
800089fa:	08 9a       	mov	r10,r4
800089fc:	0a 9b       	mov	r11,r5
800089fe:	e0 a0 0e c1 	rcall	8000a780 <__avr32_f64_cmp_lt>
80008a02:	c1 d1       	brne	80008a3c <_dtoa_r+0x73c>
80008a04:	08 98       	mov	r8,r4
80008a06:	0a 99       	mov	r9,r5
80008a08:	0c 9a       	mov	r10,r6
80008a0a:	0e 9b       	mov	r11,r7
80008a0c:	e0 a0 0e 6a 	rcall	8000a6e0 <__avr32_f64_cmp_eq>
80008a10:	e0 80 02 5b 	breq	80008ec6 <_dtoa_r+0xbc6>
80008a14:	ed b2 00 00 	bld	r2,0x0
80008a18:	c1 20       	breq	80008a3c <_dtoa_r+0x73c>
80008a1a:	e0 8f 02 56 	bral	80008ec6 <_dtoa_r+0xbc6>
80008a1e:	41 68       	lddsp	r8,sp[0x58]
80008a20:	10 39       	cp.w	r9,r8
80008a22:	c0 30       	breq	80008a28 <_dtoa_r+0x728>
80008a24:	12 91       	mov	r1,r9
80008a26:	c0 c8       	rjmp	80008a3e <_dtoa_r+0x73e>
80008a28:	40 ac       	lddsp	r12,sp[0x28]
80008a2a:	2f fc       	sub	r12,-1
80008a2c:	50 ac       	stdsp	sp[0x28],r12
80008a2e:	33 08       	mov	r8,48
80008a30:	41 6a       	lddsp	r10,sp[0x58]
80008a32:	b4 88       	st.b	r10[0x0],r8
80008a34:	41 69       	lddsp	r9,sp[0x58]
80008a36:	c0 98       	rjmp	80008a48 <_dtoa_r+0x748>
80008a38:	41 39       	lddsp	r9,sp[0x4c]
80008a3a:	50 a9       	stdsp	sp[0x28],r9
80008a3c:	33 9a       	mov	r10,57
80008a3e:	02 99       	mov	r9,r1
80008a40:	13 78       	ld.ub	r8,--r9
80008a42:	f4 08 18 00 	cp.b	r8,r10
80008a46:	ce c0       	breq	80008a1e <_dtoa_r+0x71e>
80008a48:	40 a8       	lddsp	r8,sp[0x28]
80008a4a:	51 38       	stdsp	sp[0x4c],r8
80008a4c:	13 88       	ld.ub	r8,r9[0x0]
80008a4e:	2f f8       	sub	r8,-1
80008a50:	b2 88       	st.b	r9[0x0],r8
80008a52:	e0 8f 02 3c 	bral	80008eca <_dtoa_r+0xbca>
80008a56:	e0 a0 0b 5f 	rcall	8000a114 <__avr32_f64_mul>
80008a5a:	2f f3       	sub	r3,-1
80008a5c:	16 97       	mov	r7,r11
80008a5e:	14 96       	mov	r6,r10
80008a60:	30 08       	mov	r8,0
80008a62:	30 09       	mov	r9,0
80008a64:	0e 9b       	mov	r11,r7
80008a66:	e0 a0 0e 3d 	rcall	8000a6e0 <__avr32_f64_cmp_eq>
80008a6a:	c9 e0       	breq	800089a6 <_dtoa_r+0x6a6>
80008a6c:	e0 8f 02 2d 	bral	80008ec6 <_dtoa_r+0xbc6>
80008a70:	40 cc       	lddsp	r12,sp[0x30]
80008a72:	58 0c       	cp.w	r12,0
80008a74:	c0 41       	brne	80008a7c <_dtoa_r+0x77c>
80008a76:	40 65       	lddsp	r5,sp[0x18]
80008a78:	40 77       	lddsp	r7,sp[0x1c]
80008a7a:	c3 88       	rjmp	80008aea <_dtoa_r+0x7ea>
80008a7c:	40 49       	lddsp	r9,sp[0x10]
80008a7e:	58 19       	cp.w	r9,1
80008a80:	e0 89 00 10 	brgt	80008aa0 <_dtoa_r+0x7a0>
80008a84:	40 f8       	lddsp	r8,sp[0x3c]
80008a86:	58 08       	cp.w	r8,0
80008a88:	c0 60       	breq	80008a94 <_dtoa_r+0x794>
80008a8a:	f4 c8 fb cd 	sub	r8,r10,-1075
80008a8e:	c0 68       	rjmp	80008a9a <_dtoa_r+0x79a>
80008a90:	80 00       	ld.sh	r0,r0[0x0]
80008a92:	c1 90       	breq	80008ac4 <_dtoa_r+0x7c4>
80008a94:	41 88       	lddsp	r8,sp[0x60]
80008a96:	f0 08 11 36 	rsub	r8,r8,54
80008a9a:	40 65       	lddsp	r5,sp[0x18]
80008a9c:	40 77       	lddsp	r7,sp[0x1c]
80008a9e:	c1 c8       	rjmp	80008ad6 <_dtoa_r+0x7d6>
80008aa0:	40 8a       	lddsp	r10,sp[0x20]
80008aa2:	40 7c       	lddsp	r12,sp[0x1c]
80008aa4:	20 1a       	sub	r10,1
80008aa6:	14 3c       	cp.w	r12,r10
80008aa8:	c0 45       	brlt	80008ab0 <_dtoa_r+0x7b0>
80008aaa:	18 97       	mov	r7,r12
80008aac:	14 17       	sub	r7,r10
80008aae:	c0 a8       	rjmp	80008ac2 <_dtoa_r+0x7c2>
80008ab0:	40 79       	lddsp	r9,sp[0x1c]
80008ab2:	40 ec       	lddsp	r12,sp[0x38]
80008ab4:	f4 09 01 08 	sub	r8,r10,r9
80008ab8:	30 07       	mov	r7,0
80008aba:	10 09       	add	r9,r8
80008abc:	10 0c       	add	r12,r8
80008abe:	50 79       	stdsp	sp[0x1c],r9
80008ac0:	50 ec       	stdsp	sp[0x38],r12
80008ac2:	40 8a       	lddsp	r10,sp[0x20]
80008ac4:	40 68       	lddsp	r8,sp[0x18]
80008ac6:	14 18       	sub	r8,r10
80008ac8:	40 65       	lddsp	r5,sp[0x18]
80008aca:	58 0a       	cp.w	r10,0
80008acc:	f0 05 17 50 	movlt	r5,r8
80008ad0:	14 98       	mov	r8,r10
80008ad2:	f9 b8 05 00 	movlt	r8,0
80008ad6:	40 d9       	lddsp	r9,sp[0x34]
80008ad8:	40 6c       	lddsp	r12,sp[0x18]
80008ada:	10 09       	add	r9,r8
80008adc:	10 0c       	add	r12,r8
80008ade:	50 d9       	stdsp	sp[0x34],r9
80008ae0:	50 6c       	stdsp	sp[0x18],r12
80008ae2:	30 1b       	mov	r11,1
80008ae4:	40 5c       	lddsp	r12,sp[0x14]
80008ae6:	e0 a0 08 85 	rcall	80009bf0 <__i2b>
80008aea:	58 05       	cp.w	r5,0
80008aec:	5f 98       	srgt	r8
80008aee:	40 da       	lddsp	r10,sp[0x34]
80008af0:	18 94       	mov	r4,r12
80008af2:	58 0a       	cp.w	r10,0
80008af4:	5f 99       	srgt	r9
80008af6:	12 68       	and	r8,r9
80008af8:	c0 90       	breq	80008b0a <_dtoa_r+0x80a>
80008afa:	f4 05 0d 48 	min	r8,r10,r5
80008afe:	40 69       	lddsp	r9,sp[0x18]
80008b00:	10 1a       	sub	r10,r8
80008b02:	10 19       	sub	r9,r8
80008b04:	50 da       	stdsp	sp[0x34],r10
80008b06:	50 69       	stdsp	sp[0x18],r9
80008b08:	10 15       	sub	r5,r8
80008b0a:	40 78       	lddsp	r8,sp[0x1c]
80008b0c:	58 08       	cp.w	r8,0
80008b0e:	e0 8a 00 23 	brle	80008b54 <_dtoa_r+0x854>
80008b12:	40 cc       	lddsp	r12,sp[0x30]
80008b14:	58 0c       	cp.w	r12,0
80008b16:	c1 90       	breq	80008b48 <_dtoa_r+0x848>
80008b18:	58 07       	cp.w	r7,0
80008b1a:	e0 8a 00 13 	brle	80008b40 <_dtoa_r+0x840>
80008b1e:	08 9b       	mov	r11,r4
80008b20:	0e 9a       	mov	r10,r7
80008b22:	40 5c       	lddsp	r12,sp[0x14]
80008b24:	e0 a0 08 b0 	rcall	80009c84 <__pow5mult>
80008b28:	41 0a       	lddsp	r10,sp[0x40]
80008b2a:	18 9b       	mov	r11,r12
80008b2c:	18 94       	mov	r4,r12
80008b2e:	40 5c       	lddsp	r12,sp[0x14]
80008b30:	e0 a0 07 de 	rcall	80009aec <__multiply>
80008b34:	41 0b       	lddsp	r11,sp[0x40]
80008b36:	18 96       	mov	r6,r12
80008b38:	40 5c       	lddsp	r12,sp[0x14]
80008b3a:	e0 a0 06 87 	rcall	80009848 <_Bfree>
80008b3e:	51 06       	stdsp	sp[0x40],r6
80008b40:	40 7a       	lddsp	r10,sp[0x1c]
80008b42:	0e 1a       	sub	r10,r7
80008b44:	c0 80       	breq	80008b54 <_dtoa_r+0x854>
80008b46:	c0 28       	rjmp	80008b4a <_dtoa_r+0x84a>
80008b48:	40 7a       	lddsp	r10,sp[0x1c]
80008b4a:	41 0b       	lddsp	r11,sp[0x40]
80008b4c:	40 5c       	lddsp	r12,sp[0x14]
80008b4e:	e0 a0 08 9b 	rcall	80009c84 <__pow5mult>
80008b52:	51 0c       	stdsp	sp[0x40],r12
80008b54:	30 1b       	mov	r11,1
80008b56:	40 5c       	lddsp	r12,sp[0x14]
80008b58:	e0 a0 08 4c 	rcall	80009bf0 <__i2b>
80008b5c:	51 1c       	stdsp	sp[0x44],r12
80008b5e:	40 ea       	lddsp	r10,sp[0x38]
80008b60:	58 0a       	cp.w	r10,0
80008b62:	e0 8a 00 07 	brle	80008b70 <_dtoa_r+0x870>
80008b66:	18 9b       	mov	r11,r12
80008b68:	40 5c       	lddsp	r12,sp[0x14]
80008b6a:	e0 a0 08 8d 	rcall	80009c84 <__pow5mult>
80008b6e:	51 1c       	stdsp	sp[0x44],r12
80008b70:	40 49       	lddsp	r9,sp[0x10]
80008b72:	58 19       	cp.w	r9,1
80008b74:	e0 89 00 13 	brgt	80008b9a <_dtoa_r+0x89a>
80008b78:	58 00       	cp.w	r0,0
80008b7a:	c1 01       	brne	80008b9a <_dtoa_r+0x89a>
80008b7c:	02 99       	mov	r9,r1
80008b7e:	f1 d1 c0 14 	bfextu	r8,r1,0x0,0x14
80008b82:	c0 c1       	brne	80008b9a <_dtoa_r+0x89a>
80008b84:	e6 19 7f f0 	andh	r9,0x7ff0,COH
80008b88:	c0 90       	breq	80008b9a <_dtoa_r+0x89a>
80008b8a:	40 68       	lddsp	r8,sp[0x18]
80008b8c:	40 dc       	lddsp	r12,sp[0x34]
80008b8e:	2f f8       	sub	r8,-1
80008b90:	2f fc       	sub	r12,-1
80008b92:	50 68       	stdsp	sp[0x18],r8
80008b94:	50 dc       	stdsp	sp[0x34],r12
80008b96:	30 17       	mov	r7,1
80008b98:	c0 28       	rjmp	80008b9c <_dtoa_r+0x89c>
80008b9a:	30 07       	mov	r7,0
80008b9c:	40 ea       	lddsp	r10,sp[0x38]
80008b9e:	58 0a       	cp.w	r10,0
80008ba0:	c0 31       	brne	80008ba6 <_dtoa_r+0x8a6>
80008ba2:	30 18       	mov	r8,1
80008ba4:	c0 a8       	rjmp	80008bb8 <_dtoa_r+0x8b8>
80008ba6:	41 19       	lddsp	r9,sp[0x44]
80008ba8:	72 48       	ld.w	r8,r9[0x10]
80008baa:	2f c8       	sub	r8,-4
80008bac:	f2 08 03 2c 	ld.w	r12,r9[r8<<0x2]
80008bb0:	e0 a0 05 a2 	rcall	800096f4 <__hi0bits>
80008bb4:	f8 08 11 20 	rsub	r8,r12,32
80008bb8:	40 dc       	lddsp	r12,sp[0x34]
80008bba:	18 08       	add	r8,r12
80008bbc:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80008bc0:	c0 f0       	breq	80008bde <_dtoa_r+0x8de>
80008bc2:	f0 08 11 20 	rsub	r8,r8,32
80008bc6:	58 48       	cp.w	r8,4
80008bc8:	e0 8a 00 09 	brle	80008bda <_dtoa_r+0x8da>
80008bcc:	20 48       	sub	r8,4
80008bce:	40 6a       	lddsp	r10,sp[0x18]
80008bd0:	10 0c       	add	r12,r8
80008bd2:	10 0a       	add	r10,r8
80008bd4:	50 dc       	stdsp	sp[0x34],r12
80008bd6:	50 6a       	stdsp	sp[0x18],r10
80008bd8:	c0 a8       	rjmp	80008bec <_dtoa_r+0x8ec>
80008bda:	58 48       	cp.w	r8,4
80008bdc:	c0 90       	breq	80008bee <_dtoa_r+0x8ee>
80008bde:	2e 48       	sub	r8,-28
80008be0:	40 d9       	lddsp	r9,sp[0x34]
80008be2:	40 6c       	lddsp	r12,sp[0x18]
80008be4:	10 09       	add	r9,r8
80008be6:	10 0c       	add	r12,r8
80008be8:	50 d9       	stdsp	sp[0x34],r9
80008bea:	50 6c       	stdsp	sp[0x18],r12
80008bec:	10 05       	add	r5,r8
80008bee:	40 6a       	lddsp	r10,sp[0x18]
80008bf0:	58 0a       	cp.w	r10,0
80008bf2:	e0 8a 00 07 	brle	80008c00 <_dtoa_r+0x900>
80008bf6:	41 0b       	lddsp	r11,sp[0x40]
80008bf8:	40 5c       	lddsp	r12,sp[0x14]
80008bfa:	e0 a0 07 33 	rcall	80009a60 <__lshift>
80008bfe:	51 0c       	stdsp	sp[0x40],r12
80008c00:	40 d9       	lddsp	r9,sp[0x34]
80008c02:	58 09       	cp.w	r9,0
80008c04:	e0 8a 00 08 	brle	80008c14 <_dtoa_r+0x914>
80008c08:	12 9a       	mov	r10,r9
80008c0a:	41 1b       	lddsp	r11,sp[0x44]
80008c0c:	40 5c       	lddsp	r12,sp[0x14]
80008c0e:	e0 a0 07 29 	rcall	80009a60 <__lshift>
80008c12:	51 1c       	stdsp	sp[0x44],r12
80008c14:	40 b8       	lddsp	r8,sp[0x2c]
80008c16:	58 08       	cp.w	r8,0
80008c18:	c1 f0       	breq	80008c56 <_dtoa_r+0x956>
80008c1a:	41 1b       	lddsp	r11,sp[0x44]
80008c1c:	41 0c       	lddsp	r12,sp[0x40]
80008c1e:	e0 a0 05 f8 	rcall	8000980e <__mcmp>
80008c22:	c1 a4       	brge	80008c56 <_dtoa_r+0x956>
80008c24:	40 ac       	lddsp	r12,sp[0x28]
80008c26:	20 1c       	sub	r12,1
80008c28:	30 aa       	mov	r10,10
80008c2a:	50 ac       	stdsp	sp[0x28],r12
80008c2c:	41 0b       	lddsp	r11,sp[0x40]
80008c2e:	30 09       	mov	r9,0
80008c30:	40 5c       	lddsp	r12,sp[0x14]
80008c32:	e0 a0 07 e7 	rcall	80009c00 <__multadd>
80008c36:	51 0c       	stdsp	sp[0x40],r12
80008c38:	40 ca       	lddsp	r10,sp[0x30]
80008c3a:	58 0a       	cp.w	r10,0
80008c3c:	c0 41       	brne	80008c44 <_dtoa_r+0x944>
80008c3e:	40 99       	lddsp	r9,sp[0x24]
80008c40:	50 89       	stdsp	sp[0x20],r9
80008c42:	c0 a8       	rjmp	80008c56 <_dtoa_r+0x956>
80008c44:	40 98       	lddsp	r8,sp[0x24]
80008c46:	08 9b       	mov	r11,r4
80008c48:	50 88       	stdsp	sp[0x20],r8
80008c4a:	30 09       	mov	r9,0
80008c4c:	30 aa       	mov	r10,10
80008c4e:	40 5c       	lddsp	r12,sp[0x14]
80008c50:	e0 a0 07 d8 	rcall	80009c00 <__multadd>
80008c54:	18 94       	mov	r4,r12
80008c56:	40 8c       	lddsp	r12,sp[0x20]
80008c58:	40 4a       	lddsp	r10,sp[0x10]
80008c5a:	58 0c       	cp.w	r12,0
80008c5c:	5f a8       	srle	r8
80008c5e:	58 2a       	cp.w	r10,2
80008c60:	5f 99       	srgt	r9
80008c62:	12 68       	and	r8,r9
80008c64:	c2 40       	breq	80008cac <_dtoa_r+0x9ac>
80008c66:	58 0c       	cp.w	r12,0
80008c68:	c1 11       	brne	80008c8a <_dtoa_r+0x98a>
80008c6a:	18 99       	mov	r9,r12
80008c6c:	41 1b       	lddsp	r11,sp[0x44]
80008c6e:	30 5a       	mov	r10,5
80008c70:	40 5c       	lddsp	r12,sp[0x14]
80008c72:	e0 a0 07 c7 	rcall	80009c00 <__multadd>
80008c76:	51 1c       	stdsp	sp[0x44],r12
80008c78:	18 9b       	mov	r11,r12
80008c7a:	41 0c       	lddsp	r12,sp[0x40]
80008c7c:	e0 a0 05 c9 	rcall	8000980e <__mcmp>
80008c80:	e0 89 00 0e 	brgt	80008c9c <_dtoa_r+0x99c>
80008c84:	c0 38       	rjmp	80008c8a <_dtoa_r+0x98a>
80008c86:	30 04       	mov	r4,0
80008c88:	51 14       	stdsp	sp[0x44],r4
80008c8a:	40 39       	lddsp	r9,sp[0xc]
80008c8c:	41 61       	lddsp	r1,sp[0x58]
80008c8e:	5c d9       	com	r9
80008c90:	51 39       	stdsp	sp[0x4c],r9
80008c92:	c0 b8       	rjmp	80008ca8 <_dtoa_r+0x9a8>
80008c94:	41 38       	lddsp	r8,sp[0x4c]
80008c96:	41 24       	lddsp	r4,sp[0x48]
80008c98:	50 a8       	stdsp	sp[0x28],r8
80008c9a:	51 14       	stdsp	sp[0x44],r4
80008c9c:	40 ac       	lddsp	r12,sp[0x28]
80008c9e:	2f fc       	sub	r12,-1
80008ca0:	51 3c       	stdsp	sp[0x4c],r12
80008ca2:	41 61       	lddsp	r1,sp[0x58]
80008ca4:	33 18       	mov	r8,49
80008ca6:	02 c8       	st.b	r1++,r8
80008ca8:	30 02       	mov	r2,0
80008caa:	cf 98       	rjmp	80008e9c <_dtoa_r+0xb9c>
80008cac:	40 ca       	lddsp	r10,sp[0x30]
80008cae:	58 0a       	cp.w	r10,0
80008cb0:	e0 80 00 af 	breq	80008e0e <_dtoa_r+0xb0e>
80008cb4:	58 05       	cp.w	r5,0
80008cb6:	e0 8a 00 08 	brle	80008cc6 <_dtoa_r+0x9c6>
80008cba:	08 9b       	mov	r11,r4
80008cbc:	0a 9a       	mov	r10,r5
80008cbe:	40 5c       	lddsp	r12,sp[0x14]
80008cc0:	e0 a0 06 d0 	rcall	80009a60 <__lshift>
80008cc4:	18 94       	mov	r4,r12
80008cc6:	58 07       	cp.w	r7,0
80008cc8:	c0 31       	brne	80008cce <_dtoa_r+0x9ce>
80008cca:	08 9c       	mov	r12,r4
80008ccc:	c1 38       	rjmp	80008cf2 <_dtoa_r+0x9f2>
80008cce:	68 1b       	ld.w	r11,r4[0x4]
80008cd0:	40 5c       	lddsp	r12,sp[0x14]
80008cd2:	e0 a0 05 d5 	rcall	8000987c <_Balloc>
80008cd6:	68 4a       	ld.w	r10,r4[0x10]
80008cd8:	18 96       	mov	r6,r12
80008cda:	e8 cb ff f4 	sub	r11,r4,-12
80008cde:	2f ea       	sub	r10,-2
80008ce0:	2f 4c       	sub	r12,-12
80008ce2:	a3 6a       	lsl	r10,0x2
80008ce4:	e0 a0 04 45 	rcall	8000956e <memcpy>
80008ce8:	0c 9b       	mov	r11,r6
80008cea:	30 1a       	mov	r10,1
80008cec:	40 5c       	lddsp	r12,sp[0x14]
80008cee:	e0 a0 06 b9 	rcall	80009a60 <__lshift>
80008cf2:	08 92       	mov	r2,r4
80008cf4:	41 61       	lddsp	r1,sp[0x58]
80008cf6:	e1 d0 c0 01 	bfextu	r0,r0,0x0,0x1
80008cfa:	02 99       	mov	r9,r1
80008cfc:	18 94       	mov	r4,r12
80008cfe:	5c 39       	neg	r9
80008d00:	50 09       	stdsp	sp[0x0],r9
80008d02:	41 1b       	lddsp	r11,sp[0x44]
80008d04:	41 0c       	lddsp	r12,sp[0x40]
80008d06:	fe b0 fa 6b 	rcall	800081dc <quorem>
80008d0a:	04 9b       	mov	r11,r2
80008d0c:	f8 c7 ff d0 	sub	r7,r12,-48
80008d10:	41 0c       	lddsp	r12,sp[0x40]
80008d12:	e0 a0 05 7e 	rcall	8000980e <__mcmp>
80008d16:	08 9a       	mov	r10,r4
80008d18:	18 93       	mov	r3,r12
80008d1a:	41 1b       	lddsp	r11,sp[0x44]
80008d1c:	40 5c       	lddsp	r12,sp[0x14]
80008d1e:	e0 a0 06 37 	rcall	8000998c <__mdiff>
80008d22:	18 96       	mov	r6,r12
80008d24:	78 38       	ld.w	r8,r12[0xc]
80008d26:	58 08       	cp.w	r8,0
80008d28:	c0 30       	breq	80008d2e <_dtoa_r+0xa2e>
80008d2a:	30 15       	mov	r5,1
80008d2c:	c0 68       	rjmp	80008d38 <_dtoa_r+0xa38>
80008d2e:	18 9b       	mov	r11,r12
80008d30:	41 0c       	lddsp	r12,sp[0x40]
80008d32:	e0 a0 05 6e 	rcall	8000980e <__mcmp>
80008d36:	18 95       	mov	r5,r12
80008d38:	40 5c       	lddsp	r12,sp[0x14]
80008d3a:	0c 9b       	mov	r11,r6
80008d3c:	e0 a0 05 86 	rcall	80009848 <_Bfree>
80008d40:	40 4c       	lddsp	r12,sp[0x10]
80008d42:	eb ec 10 08 	or	r8,r5,r12
80008d46:	c0 f1       	brne	80008d64 <_dtoa_r+0xa64>
80008d48:	58 00       	cp.w	r0,0
80008d4a:	c0 d1       	brne	80008d64 <_dtoa_r+0xa64>
80008d4c:	e0 47 00 39 	cp.w	r7,57
80008d50:	c3 00       	breq	80008db0 <_dtoa_r+0xab0>
80008d52:	40 aa       	lddsp	r10,sp[0x28]
80008d54:	51 3a       	stdsp	sp[0x4c],r10
80008d56:	ee c8 ff ff 	sub	r8,r7,-1
80008d5a:	58 03       	cp.w	r3,0
80008d5c:	f0 07 17 90 	movgt	r7,r8
80008d60:	02 c7       	st.b	r1++,r7
80008d62:	c9 d8       	rjmp	80008e9c <_dtoa_r+0xb9c>
80008d64:	58 03       	cp.w	r3,0
80008d66:	c0 75       	brlt	80008d74 <_dtoa_r+0xa74>
80008d68:	40 49       	lddsp	r9,sp[0x10]
80008d6a:	e7 e9 10 08 	or	r8,r3,r9
80008d6e:	c1 b1       	brne	80008da4 <_dtoa_r+0xaa4>
80008d70:	58 00       	cp.w	r0,0
80008d72:	c1 91       	brne	80008da4 <_dtoa_r+0xaa4>
80008d74:	58 05       	cp.w	r5,0
80008d76:	e0 8a 00 15 	brle	80008da0 <_dtoa_r+0xaa0>
80008d7a:	41 0b       	lddsp	r11,sp[0x40]
80008d7c:	30 1a       	mov	r10,1
80008d7e:	40 5c       	lddsp	r12,sp[0x14]
80008d80:	e0 a0 06 70 	rcall	80009a60 <__lshift>
80008d84:	41 1b       	lddsp	r11,sp[0x44]
80008d86:	51 0c       	stdsp	sp[0x40],r12
80008d88:	e0 a0 05 43 	rcall	8000980e <__mcmp>
80008d8c:	e0 89 00 06 	brgt	80008d98 <_dtoa_r+0xa98>
80008d90:	c0 81       	brne	80008da0 <_dtoa_r+0xaa0>
80008d92:	ed b7 00 00 	bld	r7,0x0
80008d96:	c0 51       	brne	80008da0 <_dtoa_r+0xaa0>
80008d98:	e0 47 00 39 	cp.w	r7,57
80008d9c:	c0 a0       	breq	80008db0 <_dtoa_r+0xab0>
80008d9e:	2f f7       	sub	r7,-1
80008da0:	02 c7       	st.b	r1++,r7
80008da2:	c7 08       	rjmp	80008e82 <_dtoa_r+0xb82>
80008da4:	58 05       	cp.w	r5,0
80008da6:	e0 8a 00 0c 	brle	80008dbe <_dtoa_r+0xabe>
80008daa:	e0 47 00 39 	cp.w	r7,57
80008dae:	c0 41       	brne	80008db6 <_dtoa_r+0xab6>
80008db0:	33 98       	mov	r8,57
80008db2:	02 c8       	st.b	r1++,r8
80008db4:	c5 f8       	rjmp	80008e72 <_dtoa_r+0xb72>
80008db6:	ee c8 ff ff 	sub	r8,r7,-1
80008dba:	02 c8       	st.b	r1++,r8
80008dbc:	c6 e8       	rjmp	80008e98 <_dtoa_r+0xb98>
80008dbe:	02 c7       	st.b	r1++,r7
80008dc0:	40 0a       	lddsp	r10,sp[0x0]
80008dc2:	40 89       	lddsp	r9,sp[0x20]
80008dc4:	e2 0a 00 08 	add	r8,r1,r10
80008dc8:	12 38       	cp.w	r8,r9
80008dca:	c3 80       	breq	80008e3a <_dtoa_r+0xb3a>
80008dcc:	41 0b       	lddsp	r11,sp[0x40]
80008dce:	30 09       	mov	r9,0
80008dd0:	30 aa       	mov	r10,10
80008dd2:	40 5c       	lddsp	r12,sp[0x14]
80008dd4:	e0 a0 07 16 	rcall	80009c00 <__multadd>
80008dd8:	51 0c       	stdsp	sp[0x40],r12
80008dda:	08 32       	cp.w	r2,r4
80008ddc:	c0 a1       	brne	80008df0 <_dtoa_r+0xaf0>
80008dde:	04 9b       	mov	r11,r2
80008de0:	30 09       	mov	r9,0
80008de2:	30 aa       	mov	r10,10
80008de4:	40 5c       	lddsp	r12,sp[0x14]
80008de6:	e0 a0 07 0d 	rcall	80009c00 <__multadd>
80008dea:	18 92       	mov	r2,r12
80008dec:	18 94       	mov	r4,r12
80008dee:	c8 ab       	rjmp	80008d02 <_dtoa_r+0xa02>
80008df0:	04 9b       	mov	r11,r2
80008df2:	30 09       	mov	r9,0
80008df4:	30 aa       	mov	r10,10
80008df6:	40 5c       	lddsp	r12,sp[0x14]
80008df8:	e0 a0 07 04 	rcall	80009c00 <__multadd>
80008dfc:	08 9b       	mov	r11,r4
80008dfe:	18 92       	mov	r2,r12
80008e00:	30 09       	mov	r9,0
80008e02:	30 aa       	mov	r10,10
80008e04:	40 5c       	lddsp	r12,sp[0x14]
80008e06:	e0 a0 06 fd 	rcall	80009c00 <__multadd>
80008e0a:	18 94       	mov	r4,r12
80008e0c:	c7 bb       	rjmp	80008d02 <_dtoa_r+0xa02>
80008e0e:	41 61       	lddsp	r1,sp[0x58]
80008e10:	30 16       	mov	r6,1
80008e12:	41 1b       	lddsp	r11,sp[0x44]
80008e14:	41 0c       	lddsp	r12,sp[0x40]
80008e16:	fe b0 f9 e3 	rcall	800081dc <quorem>
80008e1a:	f8 c7 ff d0 	sub	r7,r12,-48
80008e1e:	02 c7       	st.b	r1++,r7
80008e20:	40 88       	lddsp	r8,sp[0x20]
80008e22:	10 36       	cp.w	r6,r8
80008e24:	c0 a4       	brge	80008e38 <_dtoa_r+0xb38>
80008e26:	41 0b       	lddsp	r11,sp[0x40]
80008e28:	30 09       	mov	r9,0
80008e2a:	30 aa       	mov	r10,10
80008e2c:	40 5c       	lddsp	r12,sp[0x14]
80008e2e:	2f f6       	sub	r6,-1
80008e30:	e0 a0 06 e8 	rcall	80009c00 <__multadd>
80008e34:	51 0c       	stdsp	sp[0x40],r12
80008e36:	ce eb       	rjmp	80008e12 <_dtoa_r+0xb12>
80008e38:	30 02       	mov	r2,0
80008e3a:	41 0b       	lddsp	r11,sp[0x40]
80008e3c:	30 1a       	mov	r10,1
80008e3e:	40 5c       	lddsp	r12,sp[0x14]
80008e40:	e0 a0 06 10 	rcall	80009a60 <__lshift>
80008e44:	41 1b       	lddsp	r11,sp[0x44]
80008e46:	51 0c       	stdsp	sp[0x40],r12
80008e48:	e0 a0 04 e3 	rcall	8000980e <__mcmp>
80008e4c:	e0 89 00 13 	brgt	80008e72 <_dtoa_r+0xb72>
80008e50:	c1 e1       	brne	80008e8c <_dtoa_r+0xb8c>
80008e52:	ed b7 00 00 	bld	r7,0x0
80008e56:	c0 e0       	breq	80008e72 <_dtoa_r+0xb72>
80008e58:	c1 a8       	rjmp	80008e8c <_dtoa_r+0xb8c>
80008e5a:	41 6c       	lddsp	r12,sp[0x58]
80008e5c:	18 39       	cp.w	r9,r12
80008e5e:	c0 30       	breq	80008e64 <_dtoa_r+0xb64>
80008e60:	12 91       	mov	r1,r9
80008e62:	c0 98       	rjmp	80008e74 <_dtoa_r+0xb74>
80008e64:	40 aa       	lddsp	r10,sp[0x28]
80008e66:	2f fa       	sub	r10,-1
80008e68:	51 3a       	stdsp	sp[0x4c],r10
80008e6a:	33 18       	mov	r8,49
80008e6c:	41 69       	lddsp	r9,sp[0x58]
80008e6e:	b2 88       	st.b	r9[0x0],r8
80008e70:	c1 68       	rjmp	80008e9c <_dtoa_r+0xb9c>
80008e72:	33 9a       	mov	r10,57
80008e74:	02 99       	mov	r9,r1
80008e76:	13 78       	ld.ub	r8,--r9
80008e78:	f4 08 18 00 	cp.b	r8,r10
80008e7c:	ce f0       	breq	80008e5a <_dtoa_r+0xb5a>
80008e7e:	2f f8       	sub	r8,-1
80008e80:	b2 88       	st.b	r9[0x0],r8
80008e82:	40 a8       	lddsp	r8,sp[0x28]
80008e84:	51 38       	stdsp	sp[0x4c],r8
80008e86:	c0 b8       	rjmp	80008e9c <_dtoa_r+0xb9c>
80008e88:	12 91       	mov	r1,r9
80008e8a:	c0 28       	rjmp	80008e8e <_dtoa_r+0xb8e>
80008e8c:	33 0a       	mov	r10,48
80008e8e:	02 99       	mov	r9,r1
80008e90:	13 78       	ld.ub	r8,--r9
80008e92:	f4 08 18 00 	cp.b	r8,r10
80008e96:	cf 90       	breq	80008e88 <_dtoa_r+0xb88>
80008e98:	40 ac       	lddsp	r12,sp[0x28]
80008e9a:	51 3c       	stdsp	sp[0x4c],r12
80008e9c:	41 1b       	lddsp	r11,sp[0x44]
80008e9e:	40 5c       	lddsp	r12,sp[0x14]
80008ea0:	e0 a0 04 d4 	rcall	80009848 <_Bfree>
80008ea4:	58 04       	cp.w	r4,0
80008ea6:	c1 20       	breq	80008eca <_dtoa_r+0xbca>
80008ea8:	58 02       	cp.w	r2,0
80008eaa:	5f 18       	srne	r8
80008eac:	08 32       	cp.w	r2,r4
80008eae:	5f 19       	srne	r9
80008eb0:	12 68       	and	r8,r9
80008eb2:	c0 50       	breq	80008ebc <_dtoa_r+0xbbc>
80008eb4:	04 9b       	mov	r11,r2
80008eb6:	40 5c       	lddsp	r12,sp[0x14]
80008eb8:	e0 a0 04 c8 	rcall	80009848 <_Bfree>
80008ebc:	08 9b       	mov	r11,r4
80008ebe:	40 5c       	lddsp	r12,sp[0x14]
80008ec0:	e0 a0 04 c4 	rcall	80009848 <_Bfree>
80008ec4:	c0 38       	rjmp	80008eca <_dtoa_r+0xbca>
80008ec6:	40 aa       	lddsp	r10,sp[0x28]
80008ec8:	51 3a       	stdsp	sp[0x4c],r10
80008eca:	41 0b       	lddsp	r11,sp[0x40]
80008ecc:	40 5c       	lddsp	r12,sp[0x14]
80008ece:	e0 a0 04 bd 	rcall	80009848 <_Bfree>
80008ed2:	30 08       	mov	r8,0
80008ed4:	a2 88       	st.b	r1[0x0],r8
80008ed6:	41 38       	lddsp	r8,sp[0x4c]
80008ed8:	40 29       	lddsp	r9,sp[0x8]
80008eda:	2f f8       	sub	r8,-1
80008edc:	93 08       	st.w	r9[0x0],r8
80008ede:	40 18       	lddsp	r8,sp[0x4]
80008ee0:	58 08       	cp.w	r8,0
80008ee2:	c0 30       	breq	80008ee8 <_dtoa_r+0xbe8>
80008ee4:	40 1c       	lddsp	r12,sp[0x4]
80008ee6:	99 01       	st.w	r12[0x0],r1
80008ee8:	41 6c       	lddsp	r12,sp[0x58]
80008eea:	2e 7d       	sub	sp,-100
80008eec:	d8 32       	popm	r0-r7,pc
80008eee:	d7 03       	nop

80008ef0 <_fclose_r>:
80008ef0:	d4 21       	pushm	r4-r7,lr
80008ef2:	18 96       	mov	r6,r12
80008ef4:	16 97       	mov	r7,r11
80008ef6:	58 0b       	cp.w	r11,0
80008ef8:	c0 31       	brne	80008efe <_fclose_r+0xe>
80008efa:	16 95       	mov	r5,r11
80008efc:	c4 d8       	rjmp	80008f96 <_fclose_r+0xa6>
80008efe:	fe b0 e2 d9 	rcall	800054b0 <__sfp_lock_acquire>
80008f02:	58 06       	cp.w	r6,0
80008f04:	c0 70       	breq	80008f12 <_fclose_r+0x22>
80008f06:	6c 68       	ld.w	r8,r6[0x18]
80008f08:	58 08       	cp.w	r8,0
80008f0a:	c0 41       	brne	80008f12 <_fclose_r+0x22>
80008f0c:	0c 9c       	mov	r12,r6
80008f0e:	fe b0 e3 25 	rcall	80005558 <__sinit>
80008f12:	4a 38       	lddpc	r8,80008f9c <_fclose_r+0xac>
80008f14:	10 37       	cp.w	r7,r8
80008f16:	c0 31       	brne	80008f1c <_fclose_r+0x2c>
80008f18:	6c 07       	ld.w	r7,r6[0x0]
80008f1a:	c0 a8       	rjmp	80008f2e <_fclose_r+0x3e>
80008f1c:	4a 18       	lddpc	r8,80008fa0 <_fclose_r+0xb0>
80008f1e:	10 37       	cp.w	r7,r8
80008f20:	c0 31       	brne	80008f26 <_fclose_r+0x36>
80008f22:	6c 17       	ld.w	r7,r6[0x4]
80008f24:	c0 58       	rjmp	80008f2e <_fclose_r+0x3e>
80008f26:	4a 08       	lddpc	r8,80008fa4 <_fclose_r+0xb4>
80008f28:	10 37       	cp.w	r7,r8
80008f2a:	c0 21       	brne	80008f2e <_fclose_r+0x3e>
80008f2c:	6c 27       	ld.w	r7,r6[0x8]
80008f2e:	8e 69       	ld.sh	r9,r7[0xc]
80008f30:	30 08       	mov	r8,0
80008f32:	f0 09 19 00 	cp.h	r9,r8
80008f36:	c0 51       	brne	80008f40 <_fclose_r+0x50>
80008f38:	fe b0 e2 bd 	rcall	800054b2 <__sfp_lock_release>
80008f3c:	30 05       	mov	r5,0
80008f3e:	c2 c8       	rjmp	80008f96 <_fclose_r+0xa6>
80008f40:	0e 9b       	mov	r11,r7
80008f42:	0c 9c       	mov	r12,r6
80008f44:	fe b0 e2 1c 	rcall	8000537c <_fflush_r>
80008f48:	6e c8       	ld.w	r8,r7[0x30]
80008f4a:	18 95       	mov	r5,r12
80008f4c:	58 08       	cp.w	r8,0
80008f4e:	c0 60       	breq	80008f5a <_fclose_r+0x6a>
80008f50:	6e 8b       	ld.w	r11,r7[0x20]
80008f52:	0c 9c       	mov	r12,r6
80008f54:	5d 18       	icall	r8
80008f56:	f9 b5 05 ff 	movlt	r5,-1
80008f5a:	8e 68       	ld.sh	r8,r7[0xc]
80008f5c:	ed b8 00 07 	bld	r8,0x7
80008f60:	c0 41       	brne	80008f68 <_fclose_r+0x78>
80008f62:	6e 4b       	ld.w	r11,r7[0x10]
80008f64:	0c 9c       	mov	r12,r6
80008f66:	c7 7c       	rcall	80009054 <_free_r>
80008f68:	6e db       	ld.w	r11,r7[0x34]
80008f6a:	58 0b       	cp.w	r11,0
80008f6c:	c0 90       	breq	80008f7e <_fclose_r+0x8e>
80008f6e:	ee c8 ff bc 	sub	r8,r7,-68
80008f72:	10 3b       	cp.w	r11,r8
80008f74:	c0 30       	breq	80008f7a <_fclose_r+0x8a>
80008f76:	0c 9c       	mov	r12,r6
80008f78:	c6 ec       	rcall	80009054 <_free_r>
80008f7a:	30 08       	mov	r8,0
80008f7c:	8f d8       	st.w	r7[0x34],r8
80008f7e:	6f 2b       	ld.w	r11,r7[0x48]
80008f80:	58 0b       	cp.w	r11,0
80008f82:	c0 60       	breq	80008f8e <_fclose_r+0x9e>
80008f84:	0c 9c       	mov	r12,r6
80008f86:	c6 7c       	rcall	80009054 <_free_r>
80008f88:	30 08       	mov	r8,0
80008f8a:	ef 48 00 48 	st.w	r7[72],r8
80008f8e:	30 08       	mov	r8,0
80008f90:	ae 68       	st.h	r7[0xc],r8
80008f92:	fe b0 e2 90 	rcall	800054b2 <__sfp_lock_release>
80008f96:	0a 9c       	mov	r12,r5
80008f98:	d8 22       	popm	r4-r7,pc
80008f9a:	d7 03       	nop
80008f9c:	80 00       	ld.sh	r0,r0[0x0]
80008f9e:	bc e8       	st.b	lr[0x6],r8
80008fa0:	80 00       	ld.sh	r0,r0[0x0]
80008fa2:	bd 08       	ld.d	r8,lr
80008fa4:	80 00       	ld.sh	r0,r0[0x0]
80008fa6:	bd 28       	st.d	lr++,r8

80008fa8 <fclose>:
80008fa8:	d4 01       	pushm	lr
80008faa:	48 38       	lddpc	r8,80008fb4 <fclose+0xc>
80008fac:	18 9b       	mov	r11,r12
80008fae:	70 0c       	ld.w	r12,r8[0x0]
80008fb0:	ca 0f       	rcall	80008ef0 <_fclose_r>
80008fb2:	d8 02       	popm	pc
80008fb4:	00 00       	add	r0,r0
80008fb6:	01 1c       	ld.sh	r12,r0++

80008fb8 <_malloc_trim_r>:
80008fb8:	d4 21       	pushm	r4-r7,lr
80008fba:	16 96       	mov	r6,r11
80008fbc:	18 97       	mov	r7,r12
80008fbe:	fe b0 e5 a8 	rcall	80005b0e <__malloc_lock>
80008fc2:	4a 24       	lddpc	r4,80009048 <_malloc_trim_r+0x90>
80008fc4:	68 28       	ld.w	r8,r4[0x8]
80008fc6:	70 15       	ld.w	r5,r8[0x4]
80008fc8:	e0 15 ff fc 	andl	r5,0xfffc
80008fcc:	ea c8 ff 91 	sub	r8,r5,-111
80008fd0:	0c 18       	sub	r8,r6
80008fd2:	e0 18 ff 80 	andl	r8,0xff80
80008fd6:	f0 c6 00 80 	sub	r6,r8,128
80008fda:	e0 46 00 7f 	cp.w	r6,127
80008fde:	e0 8a 00 23 	brle	80009024 <_malloc_trim_r+0x6c>
80008fe2:	30 0b       	mov	r11,0
80008fe4:	0e 9c       	mov	r12,r7
80008fe6:	fe b0 e5 af 	rcall	80005b44 <_sbrk_r>
80008fea:	68 28       	ld.w	r8,r4[0x8]
80008fec:	0a 08       	add	r8,r5
80008fee:	10 3c       	cp.w	r12,r8
80008ff0:	c1 a1       	brne	80009024 <_malloc_trim_r+0x6c>
80008ff2:	ec 0b 11 00 	rsub	r11,r6,0
80008ff6:	0e 9c       	mov	r12,r7
80008ff8:	fe b0 e5 a6 	rcall	80005b44 <_sbrk_r>
80008ffc:	5b fc       	cp.w	r12,-1
80008ffe:	c1 71       	brne	8000902c <_malloc_trim_r+0x74>
80009000:	30 0b       	mov	r11,0
80009002:	0e 9c       	mov	r12,r7
80009004:	fe b0 e5 a0 	rcall	80005b44 <_sbrk_r>
80009008:	68 29       	ld.w	r9,r4[0x8]
8000900a:	f8 09 01 08 	sub	r8,r12,r9
8000900e:	58 f8       	cp.w	r8,15
80009010:	e0 8a 00 0a 	brle	80009024 <_malloc_trim_r+0x6c>
80009014:	a1 a8       	sbr	r8,0x0
80009016:	93 18       	st.w	r9[0x4],r8
80009018:	48 d8       	lddpc	r8,8000904c <_malloc_trim_r+0x94>
8000901a:	70 09       	ld.w	r9,r8[0x0]
8000901c:	48 d8       	lddpc	r8,80009050 <_malloc_trim_r+0x98>
8000901e:	f8 09 01 09 	sub	r9,r12,r9
80009022:	91 09       	st.w	r8[0x0],r9
80009024:	0e 9c       	mov	r12,r7
80009026:	fe b0 e5 75 	rcall	80005b10 <__malloc_unlock>
8000902a:	d8 2a       	popm	r4-r7,pc,r12=0
8000902c:	68 29       	ld.w	r9,r4[0x8]
8000902e:	ea 06 01 08 	sub	r8,r5,r6
80009032:	a1 a8       	sbr	r8,0x0
80009034:	93 18       	st.w	r9[0x4],r8
80009036:	48 79       	lddpc	r9,80009050 <_malloc_trim_r+0x98>
80009038:	72 08       	ld.w	r8,r9[0x0]
8000903a:	0c 18       	sub	r8,r6
8000903c:	0e 9c       	mov	r12,r7
8000903e:	93 08       	st.w	r9[0x0],r8
80009040:	fe b0 e5 68 	rcall	80005b10 <__malloc_unlock>
80009044:	da 2a       	popm	r4-r7,pc,r12=1
80009046:	d7 03       	nop
80009048:	00 00       	add	r0,r0
8000904a:	01 20       	ld.uh	r0,r0++
8000904c:	00 00       	add	r0,r0
8000904e:	05 2c       	ld.uh	r12,r2++
80009050:	00 00       	add	r0,r0
80009052:	06 44       	or	r4,r3

80009054 <_free_r>:
80009054:	d4 21       	pushm	r4-r7,lr
80009056:	16 97       	mov	r7,r11
80009058:	18 95       	mov	r5,r12
8000905a:	58 0b       	cp.w	r11,0
8000905c:	e0 80 00 c4 	breq	800091e4 <_free_r+0x190>
80009060:	fe b0 e5 57 	rcall	80005b0e <__malloc_lock>
80009064:	ee cb 00 08 	sub	r11,r7,8
80009068:	76 18       	ld.w	r8,r11[0x4]
8000906a:	4c b6       	lddpc	r6,80009194 <_free_r+0x140>
8000906c:	10 9e       	mov	lr,r8
8000906e:	ef d8 c0 01 	bfextu	r7,r8,0x0,0x1
80009072:	a1 ce       	cbr	lr,0x0
80009074:	6c 28       	ld.w	r8,r6[0x8]
80009076:	f6 0e 00 0a 	add	r10,r11,lr
8000907a:	74 1c       	ld.w	r12,r10[0x4]
8000907c:	e0 1c ff fc 	andl	r12,0xfffc
80009080:	10 3a       	cp.w	r10,r8
80009082:	c1 c1       	brne	800090ba <_free_r+0x66>
80009084:	f8 0e 00 0a 	add	r10,r12,lr
80009088:	58 07       	cp.w	r7,0
8000908a:	c0 81       	brne	8000909a <_free_r+0x46>
8000908c:	76 08       	ld.w	r8,r11[0x0]
8000908e:	10 1b       	sub	r11,r8
80009090:	10 0a       	add	r10,r8
80009092:	76 39       	ld.w	r9,r11[0xc]
80009094:	76 28       	ld.w	r8,r11[0x8]
80009096:	93 28       	st.w	r9[0x8],r8
80009098:	91 39       	st.w	r8[0xc],r9
8000909a:	14 98       	mov	r8,r10
8000909c:	8d 2b       	st.w	r6[0x8],r11
8000909e:	a1 a8       	sbr	r8,0x0
800090a0:	97 18       	st.w	r11[0x4],r8
800090a2:	4b e8       	lddpc	r8,80009198 <_free_r+0x144>
800090a4:	70 08       	ld.w	r8,r8[0x0]
800090a6:	10 3a       	cp.w	r10,r8
800090a8:	c0 53       	brcs	800090b2 <_free_r+0x5e>
800090aa:	4b d8       	lddpc	r8,8000919c <_free_r+0x148>
800090ac:	0a 9c       	mov	r12,r5
800090ae:	70 0b       	ld.w	r11,r8[0x0]
800090b0:	c8 4f       	rcall	80008fb8 <_malloc_trim_r>
800090b2:	0a 9c       	mov	r12,r5
800090b4:	fe b0 e5 2e 	rcall	80005b10 <__malloc_unlock>
800090b8:	d8 22       	popm	r4-r7,pc
800090ba:	95 1c       	st.w	r10[0x4],r12
800090bc:	58 07       	cp.w	r7,0
800090be:	c0 30       	breq	800090c4 <_free_r+0x70>
800090c0:	30 07       	mov	r7,0
800090c2:	c0 e8       	rjmp	800090de <_free_r+0x8a>
800090c4:	76 08       	ld.w	r8,r11[0x0]
800090c6:	10 1b       	sub	r11,r8
800090c8:	10 0e       	add	lr,r8
800090ca:	76 29       	ld.w	r9,r11[0x8]
800090cc:	ec c8 ff f8 	sub	r8,r6,-8
800090d0:	10 39       	cp.w	r9,r8
800090d2:	c0 31       	brne	800090d8 <_free_r+0x84>
800090d4:	30 17       	mov	r7,1
800090d6:	c0 48       	rjmp	800090de <_free_r+0x8a>
800090d8:	76 38       	ld.w	r8,r11[0xc]
800090da:	91 29       	st.w	r8[0x8],r9
800090dc:	93 38       	st.w	r9[0xc],r8
800090de:	f4 0c 00 08 	add	r8,r10,r12
800090e2:	70 18       	ld.w	r8,r8[0x4]
800090e4:	ed b8 00 00 	bld	r8,0x0
800090e8:	c1 30       	breq	8000910e <_free_r+0xba>
800090ea:	18 0e       	add	lr,r12
800090ec:	58 07       	cp.w	r7,0
800090ee:	c0 c1       	brne	80009106 <_free_r+0xb2>
800090f0:	4a 98       	lddpc	r8,80009194 <_free_r+0x140>
800090f2:	74 29       	ld.w	r9,r10[0x8]
800090f4:	2f 88       	sub	r8,-8
800090f6:	10 39       	cp.w	r9,r8
800090f8:	c0 71       	brne	80009106 <_free_r+0xb2>
800090fa:	93 3b       	st.w	r9[0xc],r11
800090fc:	93 2b       	st.w	r9[0x8],r11
800090fe:	97 29       	st.w	r11[0x8],r9
80009100:	97 39       	st.w	r11[0xc],r9
80009102:	30 17       	mov	r7,1
80009104:	c0 58       	rjmp	8000910e <_free_r+0xba>
80009106:	74 29       	ld.w	r9,r10[0x8]
80009108:	74 38       	ld.w	r8,r10[0xc]
8000910a:	91 29       	st.w	r8[0x8],r9
8000910c:	93 38       	st.w	r9[0xc],r8
8000910e:	1c 98       	mov	r8,lr
80009110:	f6 0e 09 0e 	st.w	r11[lr],lr
80009114:	a1 a8       	sbr	r8,0x0
80009116:	97 18       	st.w	r11[0x4],r8
80009118:	58 07       	cp.w	r7,0
8000911a:	c6 21       	brne	800091de <_free_r+0x18a>
8000911c:	e0 4e 01 ff 	cp.w	lr,511
80009120:	e0 8b 00 13 	brhi	80009146 <_free_r+0xf2>
80009124:	fc 0a 16 03 	lsr	r10,lr,0x3
80009128:	ec 0a 00 38 	add	r8,r6,r10<<0x3
8000912c:	70 29       	ld.w	r9,r8[0x8]
8000912e:	97 38       	st.w	r11[0xc],r8
80009130:	97 29       	st.w	r11[0x8],r9
80009132:	93 3b       	st.w	r9[0xc],r11
80009134:	91 2b       	st.w	r8[0x8],r11
80009136:	6c 19       	ld.w	r9,r6[0x4]
80009138:	a3 4a       	asr	r10,0x2
8000913a:	30 18       	mov	r8,1
8000913c:	f0 0a 09 48 	lsl	r8,r8,r10
80009140:	10 49       	or	r9,r8
80009142:	8d 19       	st.w	r6[0x4],r9
80009144:	c4 d8       	rjmp	800091de <_free_r+0x18a>
80009146:	fc 0a 16 09 	lsr	r10,lr,0x9
8000914a:	58 4a       	cp.w	r10,4
8000914c:	e0 8b 00 07 	brhi	8000915a <_free_r+0x106>
80009150:	fc 08 16 06 	lsr	r8,lr,0x6
80009154:	f0 ca ff c8 	sub	r10,r8,-56
80009158:	c2 88       	rjmp	800091a8 <_free_r+0x154>
8000915a:	59 4a       	cp.w	r10,20
8000915c:	e0 8b 00 04 	brhi	80009164 <_free_r+0x110>
80009160:	2a 5a       	sub	r10,-91
80009162:	c2 38       	rjmp	800091a8 <_free_r+0x154>
80009164:	e0 4a 00 54 	cp.w	r10,84
80009168:	e0 8b 00 07 	brhi	80009176 <_free_r+0x122>
8000916c:	fc 08 16 0c 	lsr	r8,lr,0xc
80009170:	f0 ca ff 92 	sub	r10,r8,-110
80009174:	c1 a8       	rjmp	800091a8 <_free_r+0x154>
80009176:	e0 4a 01 54 	cp.w	r10,340
8000917a:	e0 8b 00 07 	brhi	80009188 <_free_r+0x134>
8000917e:	fc 08 16 0f 	lsr	r8,lr,0xf
80009182:	f0 ca ff 89 	sub	r10,r8,-119
80009186:	c1 18       	rjmp	800091a8 <_free_r+0x154>
80009188:	e0 4a 05 54 	cp.w	r10,1364
8000918c:	e0 88 00 0a 	brls	800091a0 <_free_r+0x14c>
80009190:	37 ea       	mov	r10,126
80009192:	c0 b8       	rjmp	800091a8 <_free_r+0x154>
80009194:	00 00       	add	r0,r0
80009196:	01 20       	ld.uh	r0,r0++
80009198:	00 00       	add	r0,r0
8000919a:	05 28       	ld.uh	r8,r2++
8000919c:	00 00       	add	r0,r0
8000919e:	06 40       	or	r0,r3
800091a0:	fc 08 16 12 	lsr	r8,lr,0x12
800091a4:	f0 ca ff 84 	sub	r10,r8,-124
800091a8:	ec 0a 00 39 	add	r9,r6,r10<<0x3
800091ac:	72 2c       	ld.w	r12,r9[0x8]
800091ae:	12 3c       	cp.w	r12,r9
800091b0:	c0 d1       	brne	800091ca <_free_r+0x176>
800091b2:	a3 4a       	asr	r10,0x2
800091b4:	30 18       	mov	r8,1
800091b6:	f0 0a 09 48 	lsl	r8,r8,r10
800091ba:	6c 19       	ld.w	r9,r6[0x4]
800091bc:	10 49       	or	r9,r8
800091be:	18 98       	mov	r8,r12
800091c0:	8d 19       	st.w	r6[0x4],r9
800091c2:	c0 a8       	rjmp	800091d6 <_free_r+0x182>
800091c4:	78 2c       	ld.w	r12,r12[0x8]
800091c6:	12 3c       	cp.w	r12,r9
800091c8:	c0 60       	breq	800091d4 <_free_r+0x180>
800091ca:	78 18       	ld.w	r8,r12[0x4]
800091cc:	e0 18 ff fc 	andl	r8,0xfffc
800091d0:	10 3e       	cp.w	lr,r8
800091d2:	cf 93       	brcs	800091c4 <_free_r+0x170>
800091d4:	78 38       	ld.w	r8,r12[0xc]
800091d6:	97 38       	st.w	r11[0xc],r8
800091d8:	97 2c       	st.w	r11[0x8],r12
800091da:	99 3b       	st.w	r12[0xc],r11
800091dc:	91 2b       	st.w	r8[0x8],r11
800091de:	0a 9c       	mov	r12,r5
800091e0:	fe b0 e4 98 	rcall	80005b10 <__malloc_unlock>
800091e4:	d8 22       	popm	r4-r7,pc
800091e6:	d7 03       	nop

800091e8 <__sfvwrite_r>:
800091e8:	d4 31       	pushm	r0-r7,lr
800091ea:	20 2d       	sub	sp,8
800091ec:	50 0a       	stdsp	sp[0x0],r10
800091ee:	50 1c       	stdsp	sp[0x4],r12
800091f0:	16 96       	mov	r6,r11
800091f2:	74 28       	ld.w	r8,r10[0x8]
800091f4:	58 08       	cp.w	r8,0
800091f6:	e0 80 01 36 	breq	80009462 <__sfvwrite_r+0x27a>
800091fa:	96 68       	ld.sh	r8,r11[0xc]
800091fc:	ed b8 00 03 	bld	r8,0x3
80009200:	c0 41       	brne	80009208 <__sfvwrite_r+0x20>
80009202:	76 48       	ld.w	r8,r11[0x10]
80009204:	58 08       	cp.w	r8,0
80009206:	c0 d1       	brne	80009220 <__sfvwrite_r+0x38>
80009208:	0c 9b       	mov	r11,r6
8000920a:	40 1c       	lddsp	r12,sp[0x4]
8000920c:	fe b0 f6 ac 	rcall	80007f64 <__swsetup_r>
80009210:	c0 80       	breq	80009220 <__sfvwrite_r+0x38>
80009212:	8c 68       	ld.sh	r8,r6[0xc]
80009214:	a7 a8       	sbr	r8,0x6
80009216:	40 19       	lddsp	r9,sp[0x4]
80009218:	ac 68       	st.h	r6[0xc],r8
8000921a:	30 98       	mov	r8,9
8000921c:	93 38       	st.w	r9[0xc],r8
8000921e:	c2 09       	rjmp	8000945e <__sfvwrite_r+0x276>
80009220:	40 09       	lddsp	r9,sp[0x0]
80009222:	8c 68       	ld.sh	r8,r6[0xc]
80009224:	72 00       	ld.w	r0,r9[0x0]
80009226:	10 99       	mov	r9,r8
80009228:	e2 19 00 02 	andl	r9,0x2,COH
8000922c:	c2 20       	breq	80009270 <__sfvwrite_r+0x88>
8000922e:	30 07       	mov	r7,0
80009230:	e0 64 04 00 	mov	r4,1024
80009234:	0e 95       	mov	r5,r7
80009236:	c0 48       	rjmp	8000923e <__sfvwrite_r+0x56>
80009238:	60 05       	ld.w	r5,r0[0x0]
8000923a:	60 17       	ld.w	r7,r0[0x4]
8000923c:	2f 80       	sub	r0,-8
8000923e:	58 07       	cp.w	r7,0
80009240:	cf c0       	breq	80009238 <__sfvwrite_r+0x50>
80009242:	e0 47 04 00 	cp.w	r7,1024
80009246:	ee 09 17 80 	movls	r9,r7
8000924a:	e8 09 17 b0 	movhi	r9,r4
8000924e:	0a 9a       	mov	r10,r5
80009250:	6c a8       	ld.w	r8,r6[0x28]
80009252:	6c 8b       	ld.w	r11,r6[0x20]
80009254:	40 1c       	lddsp	r12,sp[0x4]
80009256:	5d 18       	icall	r8
80009258:	18 17       	sub	r7,r12
8000925a:	58 0c       	cp.w	r12,0
8000925c:	e0 8a 00 fe 	brle	80009458 <__sfvwrite_r+0x270>
80009260:	40 09       	lddsp	r9,sp[0x0]
80009262:	72 28       	ld.w	r8,r9[0x8]
80009264:	18 18       	sub	r8,r12
80009266:	93 28       	st.w	r9[0x8],r8
80009268:	e0 80 00 fd 	breq	80009462 <__sfvwrite_r+0x27a>
8000926c:	18 05       	add	r5,r12
8000926e:	ce 8b       	rjmp	8000923e <__sfvwrite_r+0x56>
80009270:	f5 d8 c0 01 	bfextu	r10,r8,0x0,0x1
80009274:	c0 60       	breq	80009280 <__sfvwrite_r+0x98>
80009276:	12 94       	mov	r4,r9
80009278:	12 92       	mov	r2,r9
8000927a:	12 91       	mov	r1,r9
8000927c:	12 93       	mov	r3,r9
8000927e:	c9 68       	rjmp	800093aa <__sfvwrite_r+0x1c2>
80009280:	14 94       	mov	r4,r10
80009282:	30 21       	mov	r1,2
80009284:	14 92       	mov	r2,r10
80009286:	c0 48       	rjmp	8000928e <__sfvwrite_r+0xa6>
80009288:	60 02       	ld.w	r2,r0[0x0]
8000928a:	60 14       	ld.w	r4,r0[0x4]
8000928c:	2f 80       	sub	r0,-8
8000928e:	58 04       	cp.w	r4,0
80009290:	cf c0       	breq	80009288 <__sfvwrite_r+0xa0>
80009292:	8c 6c       	ld.sh	r12,r6[0xc]
80009294:	6c 27       	ld.w	r7,r6[0x8]
80009296:	18 9a       	mov	r10,r12
80009298:	e2 1a 02 00 	andl	r10,0x200,COH
8000929c:	c4 f0       	breq	8000933a <__sfvwrite_r+0x152>
8000929e:	0e 34       	cp.w	r4,r7
800092a0:	c3 e3       	brcs	8000931c <__sfvwrite_r+0x134>
800092a2:	18 98       	mov	r8,r12
800092a4:	e2 18 04 80 	andl	r8,0x480,COH
800092a8:	c3 a0       	breq	8000931c <__sfvwrite_r+0x134>
800092aa:	6c 08       	ld.w	r8,r6[0x0]
800092ac:	6c 4b       	ld.w	r11,r6[0x10]
800092ae:	6c 59       	ld.w	r9,r6[0x14]
800092b0:	f0 0b 01 03 	sub	r3,r8,r11
800092b4:	f2 09 00 19 	add	r9,r9,r9<<0x1
800092b8:	f2 01 0c 08 	divs	r8,r9,r1
800092bc:	e2 1c 04 00 	andl	r12,0x400,COH
800092c0:	10 97       	mov	r7,r8
800092c2:	e6 c8 ff ff 	sub	r8,r3,-1
800092c6:	08 08       	add	r8,r4
800092c8:	10 37       	cp.w	r7,r8
800092ca:	f0 07 17 30 	movlo	r7,r8
800092ce:	58 0c       	cp.w	r12,0
800092d0:	c1 00       	breq	800092f0 <__sfvwrite_r+0x108>
800092d2:	0e 9b       	mov	r11,r7
800092d4:	40 1c       	lddsp	r12,sp[0x4]
800092d6:	fe b0 e1 eb 	rcall	800056ac <_malloc_r>
800092da:	18 95       	mov	r5,r12
800092dc:	c1 30       	breq	80009302 <__sfvwrite_r+0x11a>
800092de:	06 9a       	mov	r10,r3
800092e0:	6c 4b       	ld.w	r11,r6[0x10]
800092e2:	c4 6d       	rcall	8000956e <memcpy>
800092e4:	8c 68       	ld.sh	r8,r6[0xc]
800092e6:	e0 18 fb 7f 	andl	r8,0xfb7f
800092ea:	a7 b8       	sbr	r8,0x7
800092ec:	ac 68       	st.h	r6[0xc],r8
800092ee:	c0 e8       	rjmp	8000930a <__sfvwrite_r+0x122>
800092f0:	0e 9a       	mov	r10,r7
800092f2:	40 1c       	lddsp	r12,sp[0x4]
800092f4:	e0 a0 05 24 	rcall	80009d3c <_realloc_r>
800092f8:	18 95       	mov	r5,r12
800092fa:	c0 81       	brne	8000930a <__sfvwrite_r+0x122>
800092fc:	6c 4b       	ld.w	r11,r6[0x10]
800092fe:	40 1c       	lddsp	r12,sp[0x4]
80009300:	ca ae       	rcall	80009054 <_free_r>
80009302:	30 c8       	mov	r8,12
80009304:	40 19       	lddsp	r9,sp[0x4]
80009306:	93 38       	st.w	r9[0xc],r8
80009308:	ca 88       	rjmp	80009458 <__sfvwrite_r+0x270>
8000930a:	ee 03 01 08 	sub	r8,r7,r3
8000930e:	8d 57       	st.w	r6[0x14],r7
80009310:	8d 28       	st.w	r6[0x8],r8
80009312:	8d 45       	st.w	r6[0x10],r5
80009314:	ea 03 00 08 	add	r8,r5,r3
80009318:	08 97       	mov	r7,r4
8000931a:	8d 08       	st.w	r6[0x0],r8
8000931c:	0e 34       	cp.w	r4,r7
8000931e:	e8 07 17 30 	movlo	r7,r4
80009322:	04 9b       	mov	r11,r2
80009324:	0e 9a       	mov	r10,r7
80009326:	6c 0c       	ld.w	r12,r6[0x0]
80009328:	cc 7d       	rcall	800096b6 <memmove>
8000932a:	6c 08       	ld.w	r8,r6[0x0]
8000932c:	0e 08       	add	r8,r7
8000932e:	8d 08       	st.w	r6[0x0],r8
80009330:	6c 28       	ld.w	r8,r6[0x8]
80009332:	0e 18       	sub	r8,r7
80009334:	08 97       	mov	r7,r4
80009336:	8d 28       	st.w	r6[0x8],r8
80009338:	c2 d8       	rjmp	80009392 <__sfvwrite_r+0x1aa>
8000933a:	0e 34       	cp.w	r4,r7
8000933c:	5f b9       	srhi	r9
8000933e:	6c 0c       	ld.w	r12,r6[0x0]
80009340:	6c 48       	ld.w	r8,r6[0x10]
80009342:	10 3c       	cp.w	r12,r8
80009344:	5f b8       	srhi	r8
80009346:	12 68       	and	r8,r9
80009348:	f4 08 18 00 	cp.b	r8,r10
8000934c:	c0 d0       	breq	80009366 <__sfvwrite_r+0x17e>
8000934e:	04 9b       	mov	r11,r2
80009350:	0e 9a       	mov	r10,r7
80009352:	cb 2d       	rcall	800096b6 <memmove>
80009354:	6c 08       	ld.w	r8,r6[0x0]
80009356:	0e 08       	add	r8,r7
80009358:	0c 9b       	mov	r11,r6
8000935a:	8d 08       	st.w	r6[0x0],r8
8000935c:	40 1c       	lddsp	r12,sp[0x4]
8000935e:	fe b0 e0 0f 	rcall	8000537c <_fflush_r>
80009362:	c1 80       	breq	80009392 <__sfvwrite_r+0x1aa>
80009364:	c7 a8       	rjmp	80009458 <__sfvwrite_r+0x270>
80009366:	6c 59       	ld.w	r9,r6[0x14]
80009368:	12 34       	cp.w	r4,r9
8000936a:	c0 a3       	brcs	8000937e <__sfvwrite_r+0x196>
8000936c:	6c a8       	ld.w	r8,r6[0x28]
8000936e:	04 9a       	mov	r10,r2
80009370:	6c 8b       	ld.w	r11,r6[0x20]
80009372:	40 1c       	lddsp	r12,sp[0x4]
80009374:	5d 18       	icall	r8
80009376:	18 97       	mov	r7,r12
80009378:	e0 89 00 0d 	brgt	80009392 <__sfvwrite_r+0x1aa>
8000937c:	c6 e8       	rjmp	80009458 <__sfvwrite_r+0x270>
8000937e:	08 9a       	mov	r10,r4
80009380:	04 9b       	mov	r11,r2
80009382:	c9 ad       	rcall	800096b6 <memmove>
80009384:	6c 08       	ld.w	r8,r6[0x0]
80009386:	08 08       	add	r8,r4
80009388:	08 97       	mov	r7,r4
8000938a:	8d 08       	st.w	r6[0x0],r8
8000938c:	6c 28       	ld.w	r8,r6[0x8]
8000938e:	08 18       	sub	r8,r4
80009390:	8d 28       	st.w	r6[0x8],r8
80009392:	40 09       	lddsp	r9,sp[0x0]
80009394:	72 28       	ld.w	r8,r9[0x8]
80009396:	0e 18       	sub	r8,r7
80009398:	93 28       	st.w	r9[0x8],r8
8000939a:	c6 40       	breq	80009462 <__sfvwrite_r+0x27a>
8000939c:	0e 14       	sub	r4,r7
8000939e:	0e 02       	add	r2,r7
800093a0:	c7 7b       	rjmp	8000928e <__sfvwrite_r+0xa6>
800093a2:	60 02       	ld.w	r2,r0[0x0]
800093a4:	60 14       	ld.w	r4,r0[0x4]
800093a6:	30 01       	mov	r1,0
800093a8:	2f 80       	sub	r0,-8
800093aa:	58 04       	cp.w	r4,0
800093ac:	cf b0       	breq	800093a2 <__sfvwrite_r+0x1ba>
800093ae:	58 01       	cp.w	r1,0
800093b0:	c0 e1       	brne	800093cc <__sfvwrite_r+0x1e4>
800093b2:	08 9a       	mov	r10,r4
800093b4:	30 ab       	mov	r11,10
800093b6:	04 9c       	mov	r12,r2
800093b8:	cd 0c       	rcall	80009558 <memchr>
800093ba:	c0 60       	breq	800093c6 <__sfvwrite_r+0x1de>
800093bc:	f8 c8 ff ff 	sub	r8,r12,-1
800093c0:	f0 02 01 03 	sub	r3,r8,r2
800093c4:	c0 38       	rjmp	800093ca <__sfvwrite_r+0x1e2>
800093c6:	e8 c3 ff ff 	sub	r3,r4,-1
800093ca:	30 11       	mov	r1,1
800093cc:	6c 28       	ld.w	r8,r6[0x8]
800093ce:	08 33       	cp.w	r3,r4
800093d0:	e6 05 17 80 	movls	r5,r3
800093d4:	e8 05 17 b0 	movhi	r5,r4
800093d8:	6c 5b       	ld.w	r11,r6[0x14]
800093da:	f6 08 00 07 	add	r7,r11,r8
800093de:	0e 35       	cp.w	r5,r7
800093e0:	5f 99       	srgt	r9
800093e2:	6c 0c       	ld.w	r12,r6[0x0]
800093e4:	6c 48       	ld.w	r8,r6[0x10]
800093e6:	10 3c       	cp.w	r12,r8
800093e8:	5f b8       	srhi	r8
800093ea:	12 68       	and	r8,r9
800093ec:	30 09       	mov	r9,0
800093ee:	f2 08 18 00 	cp.b	r8,r9
800093f2:	c0 d0       	breq	8000940c <__sfvwrite_r+0x224>
800093f4:	04 9b       	mov	r11,r2
800093f6:	0e 9a       	mov	r10,r7
800093f8:	c5 fd       	rcall	800096b6 <memmove>
800093fa:	6c 08       	ld.w	r8,r6[0x0]
800093fc:	0e 08       	add	r8,r7
800093fe:	0c 9b       	mov	r11,r6
80009400:	8d 08       	st.w	r6[0x0],r8
80009402:	40 1c       	lddsp	r12,sp[0x4]
80009404:	fe b0 df bc 	rcall	8000537c <_fflush_r>
80009408:	c1 80       	breq	80009438 <__sfvwrite_r+0x250>
8000940a:	c2 78       	rjmp	80009458 <__sfvwrite_r+0x270>
8000940c:	16 35       	cp.w	r5,r11
8000940e:	c0 b5       	brlt	80009424 <__sfvwrite_r+0x23c>
80009410:	16 99       	mov	r9,r11
80009412:	6c a8       	ld.w	r8,r6[0x28]
80009414:	04 9a       	mov	r10,r2
80009416:	6c 8b       	ld.w	r11,r6[0x20]
80009418:	40 1c       	lddsp	r12,sp[0x4]
8000941a:	5d 18       	icall	r8
8000941c:	18 97       	mov	r7,r12
8000941e:	e0 89 00 0d 	brgt	80009438 <__sfvwrite_r+0x250>
80009422:	c1 b8       	rjmp	80009458 <__sfvwrite_r+0x270>
80009424:	0a 97       	mov	r7,r5
80009426:	0a 9a       	mov	r10,r5
80009428:	04 9b       	mov	r11,r2
8000942a:	c4 6d       	rcall	800096b6 <memmove>
8000942c:	6c 08       	ld.w	r8,r6[0x0]
8000942e:	0a 08       	add	r8,r5
80009430:	8d 08       	st.w	r6[0x0],r8
80009432:	6c 28       	ld.w	r8,r6[0x8]
80009434:	0a 18       	sub	r8,r5
80009436:	8d 28       	st.w	r6[0x8],r8
80009438:	0e 13       	sub	r3,r7
8000943a:	c0 71       	brne	80009448 <__sfvwrite_r+0x260>
8000943c:	0c 9b       	mov	r11,r6
8000943e:	40 1c       	lddsp	r12,sp[0x4]
80009440:	fe b0 df 9e 	rcall	8000537c <_fflush_r>
80009444:	c0 a1       	brne	80009458 <__sfvwrite_r+0x270>
80009446:	06 91       	mov	r1,r3
80009448:	40 09       	lddsp	r9,sp[0x0]
8000944a:	72 28       	ld.w	r8,r9[0x8]
8000944c:	0e 18       	sub	r8,r7
8000944e:	93 28       	st.w	r9[0x8],r8
80009450:	c0 90       	breq	80009462 <__sfvwrite_r+0x27a>
80009452:	0e 14       	sub	r4,r7
80009454:	0e 02       	add	r2,r7
80009456:	ca ab       	rjmp	800093aa <__sfvwrite_r+0x1c2>
80009458:	8c 68       	ld.sh	r8,r6[0xc]
8000945a:	a7 a8       	sbr	r8,0x6
8000945c:	ac 68       	st.h	r6[0xc],r8
8000945e:	3f fc       	mov	r12,-1
80009460:	c0 28       	rjmp	80009464 <__sfvwrite_r+0x27c>
80009462:	30 0c       	mov	r12,0
80009464:	2f ed       	sub	sp,-8
80009466:	d8 32       	popm	r0-r7,pc

80009468 <_localeconv_r>:
80009468:	48 1c       	lddpc	r12,8000946c <_localeconv_r+0x4>
8000946a:	5e fc       	retal	r12
8000946c:	80 00       	ld.sh	r0,r0[0x0]
8000946e:	c1 50       	breq	80009498 <__smakebuf_r>

80009470 <_lseek_r>:
80009470:	d4 21       	pushm	r4-r7,lr
80009472:	16 98       	mov	r8,r11
80009474:	18 96       	mov	r6,r12
80009476:	10 9c       	mov	r12,r8
80009478:	30 08       	mov	r8,0
8000947a:	14 9b       	mov	r11,r10
8000947c:	48 67       	lddpc	r7,80009494 <_lseek_r+0x24>
8000947e:	12 9a       	mov	r10,r9
80009480:	8f 08       	st.w	r7[0x0],r8
80009482:	fe b0 dd 6b 	rcall	80004f58 <_lseek>
80009486:	5b fc       	cp.w	r12,-1
80009488:	c0 51       	brne	80009492 <_lseek_r+0x22>
8000948a:	6e 08       	ld.w	r8,r7[0x0]
8000948c:	58 08       	cp.w	r8,0
8000948e:	c0 20       	breq	80009492 <_lseek_r+0x22>
80009490:	8d 38       	st.w	r6[0xc],r8
80009492:	d8 22       	popm	r4-r7,pc
80009494:	00 00       	add	r0,r0
80009496:	12 d8       	st.w	--r9,r8

80009498 <__smakebuf_r>:
80009498:	d4 21       	pushm	r4-r7,lr
8000949a:	20 fd       	sub	sp,60
8000949c:	96 68       	ld.sh	r8,r11[0xc]
8000949e:	16 97       	mov	r7,r11
800094a0:	18 94       	mov	r4,r12
800094a2:	e2 18 00 02 	andl	r8,0x2,COH
800094a6:	c3 f1       	brne	80009524 <__smakebuf_r+0x8c>
800094a8:	96 7b       	ld.sh	r11,r11[0xe]
800094aa:	f0 0b 19 00 	cp.h	r11,r8
800094ae:	c0 55       	brlt	800094b8 <__smakebuf_r+0x20>
800094b0:	1a 9a       	mov	r10,sp
800094b2:	e0 a0 06 1d 	rcall	8000a0ec <_fstat_r>
800094b6:	c1 04       	brge	800094d6 <__smakebuf_r+0x3e>
800094b8:	8e 68       	ld.sh	r8,r7[0xc]
800094ba:	e0 69 04 00 	mov	r9,1024
800094be:	10 9a       	mov	r10,r8
800094c0:	30 05       	mov	r5,0
800094c2:	e2 1a 00 80 	andl	r10,0x80,COH
800094c6:	ab b8       	sbr	r8,0xb
800094c8:	58 0a       	cp.w	r10,0
800094ca:	f9 b6 01 40 	movne	r6,64
800094ce:	f2 06 17 00 	moveq	r6,r9
800094d2:	ae 68       	st.h	r7[0xc],r8
800094d4:	c1 d8       	rjmp	8000950e <__smakebuf_r+0x76>
800094d6:	40 18       	lddsp	r8,sp[0x4]
800094d8:	e2 18 f0 00 	andl	r8,0xf000,COH
800094dc:	e0 48 20 00 	cp.w	r8,8192
800094e0:	5f 05       	sreq	r5
800094e2:	e0 48 80 00 	cp.w	r8,32768
800094e6:	c0 f1       	brne	80009504 <__smakebuf_r+0x6c>
800094e8:	6e b9       	ld.w	r9,r7[0x2c]
800094ea:	fe c8 38 46 	sub	r8,pc,14406
800094ee:	10 39       	cp.w	r9,r8
800094f0:	c0 a1       	brne	80009504 <__smakebuf_r+0x6c>
800094f2:	8e 68       	ld.sh	r8,r7[0xc]
800094f4:	ab a8       	sbr	r8,0xa
800094f6:	ae 68       	st.h	r7[0xc],r8
800094f8:	e0 68 04 00 	mov	r8,1024
800094fc:	ef 48 00 50 	st.w	r7[80],r8
80009500:	10 96       	mov	r6,r8
80009502:	c0 68       	rjmp	8000950e <__smakebuf_r+0x76>
80009504:	8e 68       	ld.sh	r8,r7[0xc]
80009506:	e0 66 04 00 	mov	r6,1024
8000950a:	ab b8       	sbr	r8,0xb
8000950c:	ae 68       	st.h	r7[0xc],r8
8000950e:	0c 9b       	mov	r11,r6
80009510:	08 9c       	mov	r12,r4
80009512:	fe b0 e0 cd 	rcall	800056ac <_malloc_r>
80009516:	8e 69       	ld.sh	r9,r7[0xc]
80009518:	c0 d1       	brne	80009532 <__smakebuf_r+0x9a>
8000951a:	ed b9 00 09 	bld	r9,0x9
8000951e:	c1 b0       	breq	80009554 <__smakebuf_r+0xbc>
80009520:	a1 b9       	sbr	r9,0x1
80009522:	ae 69       	st.h	r7[0xc],r9
80009524:	ee c8 ff b9 	sub	r8,r7,-71
80009528:	8f 48       	st.w	r7[0x10],r8
8000952a:	8f 08       	st.w	r7[0x0],r8
8000952c:	30 18       	mov	r8,1
8000952e:	8f 58       	st.w	r7[0x14],r8
80009530:	c1 28       	rjmp	80009554 <__smakebuf_r+0xbc>
80009532:	a7 b9       	sbr	r9,0x7
80009534:	fe c8 40 80 	sub	r8,pc,16512
80009538:	8f 4c       	st.w	r7[0x10],r12
8000953a:	8f 56       	st.w	r7[0x14],r6
8000953c:	ae 69       	st.h	r7[0xc],r9
8000953e:	8f 0c       	st.w	r7[0x0],r12
80009540:	89 a8       	st.w	r4[0x28],r8
80009542:	58 05       	cp.w	r5,0
80009544:	c0 80       	breq	80009554 <__smakebuf_r+0xbc>
80009546:	8e 7c       	ld.sh	r12,r7[0xe]
80009548:	fe b0 dc ff 	rcall	80004f46 <isatty>
8000954c:	c0 40       	breq	80009554 <__smakebuf_r+0xbc>
8000954e:	8e 68       	ld.sh	r8,r7[0xc]
80009550:	a1 a8       	sbr	r8,0x0
80009552:	ae 68       	st.h	r7[0xc],r8
80009554:	2f 1d       	sub	sp,-60
80009556:	d8 22       	popm	r4-r7,pc

80009558 <memchr>:
80009558:	f7 db c0 08 	bfextu	r11,r11,0x0,0x8
8000955c:	c0 68       	rjmp	80009568 <memchr+0x10>
8000955e:	20 1a       	sub	r10,1
80009560:	19 88       	ld.ub	r8,r12[0x0]
80009562:	16 38       	cp.w	r8,r11
80009564:	5e 0c       	reteq	r12
80009566:	2f fc       	sub	r12,-1
80009568:	58 0a       	cp.w	r10,0
8000956a:	cf a1       	brne	8000955e <memchr+0x6>
8000956c:	5e fa       	retal	r10

8000956e <memcpy>:
8000956e:	58 8a       	cp.w	r10,8
80009570:	c2 f5       	brlt	800095ce <memcpy+0x60>
80009572:	f9 eb 10 09 	or	r9,r12,r11
80009576:	e2 19 00 03 	andl	r9,0x3,COH
8000957a:	e0 81 00 97 	brne	800096a8 <memcpy+0x13a>
8000957e:	e0 4a 00 20 	cp.w	r10,32
80009582:	c3 b4       	brge	800095f8 <memcpy+0x8a>
80009584:	f4 08 14 02 	asr	r8,r10,0x2
80009588:	f0 09 11 08 	rsub	r9,r8,8
8000958c:	fe 09 00 2f 	add	pc,pc,r9<<0x2
80009590:	76 69       	ld.w	r9,r11[0x18]
80009592:	99 69       	st.w	r12[0x18],r9
80009594:	76 59       	ld.w	r9,r11[0x14]
80009596:	99 59       	st.w	r12[0x14],r9
80009598:	76 49       	ld.w	r9,r11[0x10]
8000959a:	99 49       	st.w	r12[0x10],r9
8000959c:	76 39       	ld.w	r9,r11[0xc]
8000959e:	99 39       	st.w	r12[0xc],r9
800095a0:	76 29       	ld.w	r9,r11[0x8]
800095a2:	99 29       	st.w	r12[0x8],r9
800095a4:	76 19       	ld.w	r9,r11[0x4]
800095a6:	99 19       	st.w	r12[0x4],r9
800095a8:	76 09       	ld.w	r9,r11[0x0]
800095aa:	99 09       	st.w	r12[0x0],r9
800095ac:	f6 08 00 2b 	add	r11,r11,r8<<0x2
800095b0:	f8 08 00 28 	add	r8,r12,r8<<0x2
800095b4:	e0 1a 00 03 	andl	r10,0x3
800095b8:	f4 0a 11 04 	rsub	r10,r10,4
800095bc:	fe 0a 00 2f 	add	pc,pc,r10<<0x2
800095c0:	17 a9       	ld.ub	r9,r11[0x2]
800095c2:	b0 a9       	st.b	r8[0x2],r9
800095c4:	17 99       	ld.ub	r9,r11[0x1]
800095c6:	b0 99       	st.b	r8[0x1],r9
800095c8:	17 89       	ld.ub	r9,r11[0x0]
800095ca:	b0 89       	st.b	r8[0x0],r9
800095cc:	5e fc       	retal	r12
800095ce:	f4 0a 11 09 	rsub	r10,r10,9
800095d2:	fe 0a 00 2f 	add	pc,pc,r10<<0x2
800095d6:	17 f9       	ld.ub	r9,r11[0x7]
800095d8:	b8 f9       	st.b	r12[0x7],r9
800095da:	17 e9       	ld.ub	r9,r11[0x6]
800095dc:	b8 e9       	st.b	r12[0x6],r9
800095de:	17 d9       	ld.ub	r9,r11[0x5]
800095e0:	b8 d9       	st.b	r12[0x5],r9
800095e2:	17 c9       	ld.ub	r9,r11[0x4]
800095e4:	b8 c9       	st.b	r12[0x4],r9
800095e6:	17 b9       	ld.ub	r9,r11[0x3]
800095e8:	b8 b9       	st.b	r12[0x3],r9
800095ea:	17 a9       	ld.ub	r9,r11[0x2]
800095ec:	b8 a9       	st.b	r12[0x2],r9
800095ee:	17 99       	ld.ub	r9,r11[0x1]
800095f0:	b8 99       	st.b	r12[0x1],r9
800095f2:	17 89       	ld.ub	r9,r11[0x0]
800095f4:	b8 89       	st.b	r12[0x0],r9
800095f6:	5e fc       	retal	r12
800095f8:	eb cd 40 c0 	pushm	r6-r7,lr
800095fc:	18 99       	mov	r9,r12
800095fe:	22 0a       	sub	r10,32
80009600:	b7 07       	ld.d	r6,r11++
80009602:	b3 26       	st.d	r9++,r6
80009604:	b7 07       	ld.d	r6,r11++
80009606:	b3 26       	st.d	r9++,r6
80009608:	b7 07       	ld.d	r6,r11++
8000960a:	b3 26       	st.d	r9++,r6
8000960c:	b7 07       	ld.d	r6,r11++
8000960e:	b3 26       	st.d	r9++,r6
80009610:	22 0a       	sub	r10,32
80009612:	cf 74       	brge	80009600 <memcpy+0x92>
80009614:	2f 0a       	sub	r10,-16
80009616:	c0 65       	brlt	80009622 <memcpy+0xb4>
80009618:	b7 07       	ld.d	r6,r11++
8000961a:	b3 26       	st.d	r9++,r6
8000961c:	b7 07       	ld.d	r6,r11++
8000961e:	b3 26       	st.d	r9++,r6
80009620:	21 0a       	sub	r10,16
80009622:	5c 3a       	neg	r10
80009624:	fe 0a 00 3f 	add	pc,pc,r10<<0x3
80009628:	d7 03       	nop
8000962a:	d7 03       	nop
8000962c:	f7 36 00 0e 	ld.ub	r6,r11[14]
80009630:	f3 66 00 0e 	st.b	r9[14],r6
80009634:	f7 36 00 0d 	ld.ub	r6,r11[13]
80009638:	f3 66 00 0d 	st.b	r9[13],r6
8000963c:	f7 36 00 0c 	ld.ub	r6,r11[12]
80009640:	f3 66 00 0c 	st.b	r9[12],r6
80009644:	f7 36 00 0b 	ld.ub	r6,r11[11]
80009648:	f3 66 00 0b 	st.b	r9[11],r6
8000964c:	f7 36 00 0a 	ld.ub	r6,r11[10]
80009650:	f3 66 00 0a 	st.b	r9[10],r6
80009654:	f7 36 00 09 	ld.ub	r6,r11[9]
80009658:	f3 66 00 09 	st.b	r9[9],r6
8000965c:	f7 36 00 08 	ld.ub	r6,r11[8]
80009660:	f3 66 00 08 	st.b	r9[8],r6
80009664:	f7 36 00 07 	ld.ub	r6,r11[7]
80009668:	f3 66 00 07 	st.b	r9[7],r6
8000966c:	f7 36 00 06 	ld.ub	r6,r11[6]
80009670:	f3 66 00 06 	st.b	r9[6],r6
80009674:	f7 36 00 05 	ld.ub	r6,r11[5]
80009678:	f3 66 00 05 	st.b	r9[5],r6
8000967c:	f7 36 00 04 	ld.ub	r6,r11[4]
80009680:	f3 66 00 04 	st.b	r9[4],r6
80009684:	f7 36 00 03 	ld.ub	r6,r11[3]
80009688:	f3 66 00 03 	st.b	r9[3],r6
8000968c:	f7 36 00 02 	ld.ub	r6,r11[2]
80009690:	f3 66 00 02 	st.b	r9[2],r6
80009694:	f7 36 00 01 	ld.ub	r6,r11[1]
80009698:	f3 66 00 01 	st.b	r9[1],r6
8000969c:	f7 36 00 00 	ld.ub	r6,r11[0]
800096a0:	f3 66 00 00 	st.b	r9[0],r6
800096a4:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800096a8:	20 1a       	sub	r10,1
800096aa:	f6 0a 07 09 	ld.ub	r9,r11[r10]
800096ae:	f8 0a 0b 09 	st.b	r12[r10],r9
800096b2:	cf b1       	brne	800096a8 <memcpy+0x13a>
800096b4:	5e fc       	retal	r12

800096b6 <memmove>:
800096b6:	d4 01       	pushm	lr
800096b8:	18 3b       	cp.w	r11,r12
800096ba:	c1 92       	brcc	800096ec <memmove+0x36>
800096bc:	f6 0a 00 0e 	add	lr,r11,r10
800096c0:	1c 3c       	cp.w	r12,lr
800096c2:	c1 52       	brcc	800096ec <memmove+0x36>
800096c4:	f8 0a 00 0b 	add	r11,r12,r10
800096c8:	30 09       	mov	r9,0
800096ca:	c0 68       	rjmp	800096d6 <memmove+0x20>
800096cc:	fc 09 07 08 	ld.ub	r8,lr[r9]
800096d0:	20 1a       	sub	r10,1
800096d2:	f6 09 0b 08 	st.b	r11[r9],r8
800096d6:	20 19       	sub	r9,1
800096d8:	58 0a       	cp.w	r10,0
800096da:	cf 91       	brne	800096cc <memmove+0x16>
800096dc:	d8 02       	popm	pc
800096de:	f6 09 07 08 	ld.ub	r8,r11[r9]
800096e2:	20 1a       	sub	r10,1
800096e4:	f8 09 0b 08 	st.b	r12[r9],r8
800096e8:	2f f9       	sub	r9,-1
800096ea:	c0 28       	rjmp	800096ee <memmove+0x38>
800096ec:	30 09       	mov	r9,0
800096ee:	58 0a       	cp.w	r10,0
800096f0:	cf 71       	brne	800096de <memmove+0x28>
800096f2:	d8 02       	popm	pc

800096f4 <__hi0bits>:
800096f4:	f8 09 15 10 	lsl	r9,r12,0x10
800096f8:	18 98       	mov	r8,r12
800096fa:	e0 18 00 00 	andl	r8,0x0
800096fe:	f2 0c 17 00 	moveq	r12,r9
80009702:	f9 ba 00 10 	moveq	r10,16
80009706:	f9 ba 01 00 	movne	r10,0
8000970a:	f4 c9 ff f8 	sub	r9,r10,-8
8000970e:	58 08       	cp.w	r8,0
80009710:	18 98       	mov	r8,r12
80009712:	e6 18 ff 00 	andh	r8,0xff00,COH
80009716:	f2 0a 17 00 	moveq	r10,r9
8000971a:	f8 09 15 08 	lsl	r9,r12,0x8
8000971e:	58 08       	cp.w	r8,0
80009720:	f2 0c 17 00 	moveq	r12,r9
80009724:	f4 c9 ff fc 	sub	r9,r10,-4
80009728:	58 08       	cp.w	r8,0
8000972a:	18 98       	mov	r8,r12
8000972c:	e6 18 f0 00 	andh	r8,0xf000,COH
80009730:	f2 0a 17 00 	moveq	r10,r9
80009734:	f8 09 15 04 	lsl	r9,r12,0x4
80009738:	58 08       	cp.w	r8,0
8000973a:	f2 0c 17 00 	moveq	r12,r9
8000973e:	f4 c9 ff fe 	sub	r9,r10,-2
80009742:	58 08       	cp.w	r8,0
80009744:	18 98       	mov	r8,r12
80009746:	e6 18 c0 00 	andh	r8,0xc000,COH
8000974a:	f2 0a 17 00 	moveq	r10,r9
8000974e:	58 08       	cp.w	r8,0
80009750:	f8 09 15 02 	lsl	r9,r12,0x2
80009754:	58 08       	cp.w	r8,0
80009756:	f2 0c 17 00 	moveq	r12,r9
8000975a:	58 0c       	cp.w	r12,0
8000975c:	c0 b5       	brlt	80009772 <__hi0bits+0x7e>
8000975e:	18 99       	mov	r9,r12
80009760:	f4 c8 ff ff 	sub	r8,r10,-1
80009764:	e6 19 40 00 	andh	r9,0x4000,COH
80009768:	f0 0a 17 10 	movne	r10,r8
8000976c:	f9 ba 00 20 	moveq	r10,32
80009770:	58 09       	cp.w	r9,0
80009772:	5e fa       	retal	r10

80009774 <__lo0bits>:
80009774:	18 9b       	mov	r11,r12
80009776:	78 0a       	ld.w	r10,r12[0x0]
80009778:	f9 da c0 03 	bfextu	r12,r10,0x0,0x3
8000977c:	c1 20       	breq	800097a0 <__lo0bits+0x2c>
8000977e:	ed ba 00 00 	bld	r10,0x0
80009782:	c0 21       	brne	80009786 <__lo0bits+0x12>
80009784:	5e fd       	retal	0
80009786:	ed ba 00 01 	bld	r10,0x1
8000978a:	c0 61       	brne	80009796 <__lo0bits+0x22>
8000978c:	f4 08 16 01 	lsr	r8,r10,0x1
80009790:	30 1c       	mov	r12,1
80009792:	97 08       	st.w	r11[0x0],r8
80009794:	5e fc       	retal	r12
80009796:	f4 08 16 02 	lsr	r8,r10,0x2
8000979a:	30 2c       	mov	r12,2
8000979c:	97 08       	st.w	r11[0x0],r8
8000979e:	5e fc       	retal	r12
800097a0:	f4 09 16 10 	lsr	r9,r10,0x10
800097a4:	f1 da c0 10 	bfextu	r8,r10,0x0,0x10
800097a8:	f2 0a 17 00 	moveq	r10,r9
800097ac:	f9 bc 00 10 	moveq	r12,16
800097b0:	f8 c9 ff f8 	sub	r9,r12,-8
800097b4:	58 08       	cp.w	r8,0
800097b6:	f1 da c0 08 	bfextu	r8,r10,0x0,0x8
800097ba:	f2 0c 17 00 	moveq	r12,r9
800097be:	f4 09 16 08 	lsr	r9,r10,0x8
800097c2:	58 08       	cp.w	r8,0
800097c4:	f2 0a 17 00 	moveq	r10,r9
800097c8:	f8 c9 ff fc 	sub	r9,r12,-4
800097cc:	58 08       	cp.w	r8,0
800097ce:	f1 da c0 04 	bfextu	r8,r10,0x0,0x4
800097d2:	f2 0c 17 00 	moveq	r12,r9
800097d6:	f4 09 16 04 	lsr	r9,r10,0x4
800097da:	58 08       	cp.w	r8,0
800097dc:	f2 0a 17 00 	moveq	r10,r9
800097e0:	f8 c9 ff fe 	sub	r9,r12,-2
800097e4:	58 08       	cp.w	r8,0
800097e6:	f1 da c0 02 	bfextu	r8,r10,0x0,0x2
800097ea:	f2 0c 17 00 	moveq	r12,r9
800097ee:	58 08       	cp.w	r8,0
800097f0:	f4 09 16 02 	lsr	r9,r10,0x2
800097f4:	58 08       	cp.w	r8,0
800097f6:	f2 0a 17 00 	moveq	r10,r9
800097fa:	ed ba 00 00 	bld	r10,0x0
800097fe:	c0 60       	breq	8000980a <__lo0bits+0x96>
80009800:	a1 9a       	lsr	r10,0x1
80009802:	c0 31       	brne	80009808 <__lo0bits+0x94>
80009804:	32 0c       	mov	r12,32
80009806:	5e fc       	retal	r12
80009808:	2f fc       	sub	r12,-1
8000980a:	97 0a       	st.w	r11[0x0],r10
8000980c:	5e fc       	retal	r12

8000980e <__mcmp>:
8000980e:	d4 01       	pushm	lr
80009810:	16 9a       	mov	r10,r11
80009812:	78 48       	ld.w	r8,r12[0x10]
80009814:	76 49       	ld.w	r9,r11[0x10]
80009816:	f0 09 01 0b 	sub	r11,r8,r9
8000981a:	c1 51       	brne	80009844 <__mcmp+0x36>
8000981c:	f2 c8 ff fb 	sub	r8,r9,-5
80009820:	a3 68       	lsl	r8,0x2
80009822:	f4 08 00 0e 	add	lr,r10,r8
80009826:	f8 08 00 08 	add	r8,r12,r8
8000982a:	2e cc       	sub	r12,-20
8000982c:	11 4a       	ld.w	r10,--r8
8000982e:	1d 49       	ld.w	r9,--lr
80009830:	12 3a       	cp.w	r10,r9
80009832:	c0 60       	breq	8000983e <__mcmp+0x30>
80009834:	f9 bb 03 ff 	movlo	r11,-1
80009838:	f9 bb 02 01 	movhs	r11,1
8000983c:	c0 48       	rjmp	80009844 <__mcmp+0x36>
8000983e:	18 38       	cp.w	r8,r12
80009840:	fe 9b ff f6 	brhi	8000982c <__mcmp+0x1e>
80009844:	16 9c       	mov	r12,r11
80009846:	d8 02       	popm	pc

80009848 <_Bfree>:
80009848:	d4 21       	pushm	r4-r7,lr
8000984a:	18 96       	mov	r6,r12
8000984c:	16 95       	mov	r5,r11
8000984e:	78 97       	ld.w	r7,r12[0x24]
80009850:	58 07       	cp.w	r7,0
80009852:	c0 91       	brne	80009864 <_Bfree+0x1c>
80009854:	31 0c       	mov	r12,16
80009856:	fe b0 df 23 	rcall	8000569c <malloc>
8000985a:	99 37       	st.w	r12[0xc],r7
8000985c:	8d 9c       	st.w	r6[0x24],r12
8000985e:	99 17       	st.w	r12[0x4],r7
80009860:	99 27       	st.w	r12[0x8],r7
80009862:	99 07       	st.w	r12[0x0],r7
80009864:	58 05       	cp.w	r5,0
80009866:	c0 90       	breq	80009878 <_Bfree+0x30>
80009868:	6c 98       	ld.w	r8,r6[0x24]
8000986a:	6a 19       	ld.w	r9,r5[0x4]
8000986c:	70 3a       	ld.w	r10,r8[0xc]
8000986e:	f4 09 03 28 	ld.w	r8,r10[r9<<0x2]
80009872:	8b 08       	st.w	r5[0x0],r8
80009874:	f4 09 09 25 	st.w	r10[r9<<0x2],r5
80009878:	d8 22       	popm	r4-r7,pc
8000987a:	d7 03       	nop

8000987c <_Balloc>:
8000987c:	d4 21       	pushm	r4-r7,lr
8000987e:	18 96       	mov	r6,r12
80009880:	16 95       	mov	r5,r11
80009882:	78 97       	ld.w	r7,r12[0x24]
80009884:	58 07       	cp.w	r7,0
80009886:	c0 91       	brne	80009898 <_Balloc+0x1c>
80009888:	31 0c       	mov	r12,16
8000988a:	fe b0 df 09 	rcall	8000569c <malloc>
8000988e:	99 37       	st.w	r12[0xc],r7
80009890:	8d 9c       	st.w	r6[0x24],r12
80009892:	99 17       	st.w	r12[0x4],r7
80009894:	99 27       	st.w	r12[0x8],r7
80009896:	99 07       	st.w	r12[0x0],r7
80009898:	6c 97       	ld.w	r7,r6[0x24]
8000989a:	6e 38       	ld.w	r8,r7[0xc]
8000989c:	58 08       	cp.w	r8,0
8000989e:	c0 b1       	brne	800098b4 <_Balloc+0x38>
800098a0:	31 0a       	mov	r10,16
800098a2:	30 4b       	mov	r11,4
800098a4:	0c 9c       	mov	r12,r6
800098a6:	e0 a0 03 f5 	rcall	8000a090 <_calloc_r>
800098aa:	8f 3c       	st.w	r7[0xc],r12
800098ac:	6c 98       	ld.w	r8,r6[0x24]
800098ae:	70 3c       	ld.w	r12,r8[0xc]
800098b0:	58 0c       	cp.w	r12,0
800098b2:	c1 b0       	breq	800098e8 <_Balloc+0x6c>
800098b4:	6c 98       	ld.w	r8,r6[0x24]
800098b6:	70 38       	ld.w	r8,r8[0xc]
800098b8:	f0 05 00 29 	add	r9,r8,r5<<0x2
800098bc:	72 0c       	ld.w	r12,r9[0x0]
800098be:	58 0c       	cp.w	r12,0
800098c0:	c0 40       	breq	800098c8 <_Balloc+0x4c>
800098c2:	78 08       	ld.w	r8,r12[0x0]
800098c4:	93 08       	st.w	r9[0x0],r8
800098c6:	c0 e8       	rjmp	800098e2 <_Balloc+0x66>
800098c8:	30 18       	mov	r8,1
800098ca:	0c 9c       	mov	r12,r6
800098cc:	f0 05 09 47 	lsl	r7,r8,r5
800098d0:	10 9b       	mov	r11,r8
800098d2:	ee ca ff fb 	sub	r10,r7,-5
800098d6:	a3 6a       	lsl	r10,0x2
800098d8:	e0 a0 03 dc 	rcall	8000a090 <_calloc_r>
800098dc:	c0 60       	breq	800098e8 <_Balloc+0x6c>
800098de:	99 15       	st.w	r12[0x4],r5
800098e0:	99 27       	st.w	r12[0x8],r7
800098e2:	30 08       	mov	r8,0
800098e4:	99 38       	st.w	r12[0xc],r8
800098e6:	99 48       	st.w	r12[0x10],r8
800098e8:	d8 22       	popm	r4-r7,pc
800098ea:	d7 03       	nop

800098ec <__d2b>:
800098ec:	d4 31       	pushm	r0-r7,lr
800098ee:	20 2d       	sub	sp,8
800098f0:	16 97       	mov	r7,r11
800098f2:	12 93       	mov	r3,r9
800098f4:	10 92       	mov	r2,r8
800098f6:	14 96       	mov	r6,r10
800098f8:	30 1b       	mov	r11,1
800098fa:	cc 1f       	rcall	8000987c <_Balloc>
800098fc:	f3 d7 c0 14 	bfextu	r9,r7,0x0,0x14
80009900:	50 09       	stdsp	sp[0x0],r9
80009902:	f1 d7 c0 1f 	bfextu	r8,r7,0x0,0x1f
80009906:	18 95       	mov	r5,r12
80009908:	f0 04 16 14 	lsr	r4,r8,0x14
8000990c:	c0 30       	breq	80009912 <__d2b+0x26>
8000990e:	b5 a9       	sbr	r9,0x14
80009910:	50 09       	stdsp	sp[0x0],r9
80009912:	58 06       	cp.w	r6,0
80009914:	c1 c0       	breq	8000994c <__d2b+0x60>
80009916:	fa cc ff f8 	sub	r12,sp,-8
8000991a:	18 d6       	st.w	--r12,r6
8000991c:	c2 cf       	rcall	80009774 <__lo0bits>
8000991e:	40 1a       	lddsp	r10,sp[0x4]
80009920:	c0 c0       	breq	80009938 <__d2b+0x4c>
80009922:	40 09       	lddsp	r9,sp[0x0]
80009924:	f8 08 11 20 	rsub	r8,r12,32
80009928:	f2 08 09 48 	lsl	r8,r9,r8
8000992c:	14 48       	or	r8,r10
8000992e:	8b 58       	st.w	r5[0x14],r8
80009930:	f2 0c 0a 49 	lsr	r9,r9,r12
80009934:	50 09       	stdsp	sp[0x0],r9
80009936:	c0 28       	rjmp	8000993a <__d2b+0x4e>
80009938:	8b 5a       	st.w	r5[0x14],r10
8000993a:	40 08       	lddsp	r8,sp[0x0]
8000993c:	58 08       	cp.w	r8,0
8000993e:	f9 b7 01 02 	movne	r7,2
80009942:	f9 b7 00 01 	moveq	r7,1
80009946:	8b 68       	st.w	r5[0x18],r8
80009948:	8b 47       	st.w	r5[0x10],r7
8000994a:	c0 98       	rjmp	8000995c <__d2b+0x70>
8000994c:	1a 9c       	mov	r12,sp
8000994e:	c1 3f       	rcall	80009774 <__lo0bits>
80009950:	30 18       	mov	r8,1
80009952:	2e 0c       	sub	r12,-32
80009954:	8b 48       	st.w	r5[0x10],r8
80009956:	10 97       	mov	r7,r8
80009958:	40 08       	lddsp	r8,sp[0x0]
8000995a:	8b 58       	st.w	r5[0x14],r8
8000995c:	58 04       	cp.w	r4,0
8000995e:	c0 90       	breq	80009970 <__d2b+0x84>
80009960:	e8 c8 04 33 	sub	r8,r4,1075
80009964:	18 08       	add	r8,r12
80009966:	87 08       	st.w	r3[0x0],r8
80009968:	f8 0c 11 35 	rsub	r12,r12,53
8000996c:	85 0c       	st.w	r2[0x0],r12
8000996e:	c0 c8       	rjmp	80009986 <__d2b+0x9a>
80009970:	f8 c8 04 32 	sub	r8,r12,1074
80009974:	87 08       	st.w	r3[0x0],r8
80009976:	ea 07 00 28 	add	r8,r5,r7<<0x2
8000997a:	70 4c       	ld.w	r12,r8[0x10]
8000997c:	cb ce       	rcall	800096f4 <__hi0bits>
8000997e:	ee 08 15 05 	lsl	r8,r7,0x5
80009982:	18 18       	sub	r8,r12
80009984:	85 08       	st.w	r2[0x0],r8
80009986:	0a 9c       	mov	r12,r5
80009988:	2f ed       	sub	sp,-8
8000998a:	d8 32       	popm	r0-r7,pc

8000998c <__mdiff>:
8000998c:	d4 31       	pushm	r0-r7,lr
8000998e:	74 49       	ld.w	r9,r10[0x10]
80009990:	76 48       	ld.w	r8,r11[0x10]
80009992:	16 97       	mov	r7,r11
80009994:	14 96       	mov	r6,r10
80009996:	f0 09 01 05 	sub	r5,r8,r9
8000999a:	c1 41       	brne	800099c2 <__mdiff+0x36>
8000999c:	f2 c8 ff fb 	sub	r8,r9,-5
800099a0:	ee ce ff ec 	sub	lr,r7,-20
800099a4:	a3 68       	lsl	r8,0x2
800099a6:	f4 08 00 0b 	add	r11,r10,r8
800099aa:	ee 08 00 08 	add	r8,r7,r8
800099ae:	11 4a       	ld.w	r10,--r8
800099b0:	17 49       	ld.w	r9,--r11
800099b2:	12 3a       	cp.w	r10,r9
800099b4:	c0 30       	breq	800099ba <__mdiff+0x2e>
800099b6:	c0 e2       	brcc	800099d2 <__mdiff+0x46>
800099b8:	c0 78       	rjmp	800099c6 <__mdiff+0x3a>
800099ba:	1c 38       	cp.w	r8,lr
800099bc:	fe 9b ff f9 	brhi	800099ae <__mdiff+0x22>
800099c0:	c4 98       	rjmp	80009a52 <__mdiff+0xc6>
800099c2:	58 05       	cp.w	r5,0
800099c4:	c0 64       	brge	800099d0 <__mdiff+0x44>
800099c6:	0c 98       	mov	r8,r6
800099c8:	30 15       	mov	r5,1
800099ca:	0e 96       	mov	r6,r7
800099cc:	10 97       	mov	r7,r8
800099ce:	c0 28       	rjmp	800099d2 <__mdiff+0x46>
800099d0:	30 05       	mov	r5,0
800099d2:	6e 1b       	ld.w	r11,r7[0x4]
800099d4:	c5 4f       	rcall	8000987c <_Balloc>
800099d6:	6c 48       	ld.w	r8,r6[0x10]
800099d8:	2f b8       	sub	r8,-5
800099da:	6e 44       	ld.w	r4,r7[0x10]
800099dc:	ec 08 00 23 	add	r3,r6,r8<<0x2
800099e0:	99 35       	st.w	r12[0xc],r5
800099e2:	e8 c8 ff fb 	sub	r8,r4,-5
800099e6:	ee c5 ff ec 	sub	r5,r7,-20
800099ea:	ee 08 00 22 	add	r2,r7,r8<<0x2
800099ee:	2e c6       	sub	r6,-20
800099f0:	f8 ce ff ec 	sub	lr,r12,-20
800099f4:	30 07       	mov	r7,0
800099f6:	0b 08       	ld.w	r8,r5++
800099f8:	0d 09       	ld.w	r9,r6++
800099fa:	f0 0b 16 10 	lsr	r11,r8,0x10
800099fe:	f2 0a 16 10 	lsr	r10,r9,0x10
80009a02:	f1 d8 c0 10 	bfextu	r8,r8,0x0,0x10
80009a06:	14 1b       	sub	r11,r10
80009a08:	f3 d9 c0 10 	bfextu	r9,r9,0x0,0x10
80009a0c:	12 18       	sub	r8,r9
80009a0e:	0e 08       	add	r8,r7
80009a10:	bc 18       	st.h	lr[0x2],r8
80009a12:	b1 48       	asr	r8,0x10
80009a14:	10 0b       	add	r11,r8
80009a16:	bc 0b       	st.h	lr[0x0],r11
80009a18:	f6 07 14 10 	asr	r7,r11,0x10
80009a1c:	2f ce       	sub	lr,-4
80009a1e:	06 36       	cp.w	r6,r3
80009a20:	ce b3       	brcs	800099f6 <__mdiff+0x6a>
80009a22:	c0 f8       	rjmp	80009a40 <__mdiff+0xb4>
80009a24:	0b 08       	ld.w	r8,r5++
80009a26:	f0 09 16 10 	lsr	r9,r8,0x10
80009a2a:	f1 d8 c0 10 	bfextu	r8,r8,0x0,0x10
80009a2e:	ee 08 00 08 	add	r8,r7,r8
80009a32:	bc 18       	st.h	lr[0x2],r8
80009a34:	b1 48       	asr	r8,0x10
80009a36:	12 08       	add	r8,r9
80009a38:	bc 08       	st.h	lr[0x0],r8
80009a3a:	f0 07 14 10 	asr	r7,r8,0x10
80009a3e:	2f ce       	sub	lr,-4
80009a40:	04 35       	cp.w	r5,r2
80009a42:	cf 13       	brcs	80009a24 <__mdiff+0x98>
80009a44:	c0 28       	rjmp	80009a48 <__mdiff+0xbc>
80009a46:	20 14       	sub	r4,1
80009a48:	1d 48       	ld.w	r8,--lr
80009a4a:	58 08       	cp.w	r8,0
80009a4c:	cf d0       	breq	80009a46 <__mdiff+0xba>
80009a4e:	99 44       	st.w	r12[0x10],r4
80009a50:	d8 32       	popm	r0-r7,pc
80009a52:	30 0b       	mov	r11,0
80009a54:	c1 4f       	rcall	8000987c <_Balloc>
80009a56:	30 18       	mov	r8,1
80009a58:	99 48       	st.w	r12[0x10],r8
80009a5a:	30 08       	mov	r8,0
80009a5c:	99 58       	st.w	r12[0x14],r8
80009a5e:	d8 32       	popm	r0-r7,pc

80009a60 <__lshift>:
80009a60:	d4 31       	pushm	r0-r7,lr
80009a62:	76 48       	ld.w	r8,r11[0x10]
80009a64:	2f f8       	sub	r8,-1
80009a66:	16 97       	mov	r7,r11
80009a68:	f4 04 14 05 	asr	r4,r10,0x5
80009a6c:	14 93       	mov	r3,r10
80009a6e:	f0 04 00 06 	add	r6,r8,r4
80009a72:	18 92       	mov	r2,r12
80009a74:	76 1b       	ld.w	r11,r11[0x4]
80009a76:	6e 28       	ld.w	r8,r7[0x8]
80009a78:	c0 38       	rjmp	80009a7e <__lshift+0x1e>
80009a7a:	2f fb       	sub	r11,-1
80009a7c:	a1 78       	lsl	r8,0x1
80009a7e:	10 36       	cp.w	r6,r8
80009a80:	fe 99 ff fd 	brgt	80009a7a <__lshift+0x1a>
80009a84:	04 9c       	mov	r12,r2
80009a86:	cf be       	rcall	8000987c <_Balloc>
80009a88:	30 08       	mov	r8,0
80009a8a:	18 95       	mov	r5,r12
80009a8c:	10 99       	mov	r9,r8
80009a8e:	2e cc       	sub	r12,-20
80009a90:	c0 38       	rjmp	80009a96 <__lshift+0x36>
80009a92:	18 a9       	st.w	r12++,r9
80009a94:	2f f8       	sub	r8,-1
80009a96:	08 38       	cp.w	r8,r4
80009a98:	cf d5       	brlt	80009a92 <__lshift+0x32>
80009a9a:	6e 48       	ld.w	r8,r7[0x10]
80009a9c:	f5 d3 c0 05 	bfextu	r10,r3,0x0,0x5
80009aa0:	2f b8       	sub	r8,-5
80009aa2:	ee c9 ff ec 	sub	r9,r7,-20
80009aa6:	ee 08 00 24 	add	r4,r7,r8<<0x2
80009aaa:	58 0a       	cp.w	r10,0
80009aac:	c1 40       	breq	80009ad4 <__lshift+0x74>
80009aae:	f4 0e 11 20 	rsub	lr,r10,32
80009ab2:	30 0b       	mov	r11,0
80009ab4:	72 08       	ld.w	r8,r9[0x0]
80009ab6:	f0 0a 09 48 	lsl	r8,r8,r10
80009aba:	f7 e8 10 08 	or	r8,r11,r8
80009abe:	18 a8       	st.w	r12++,r8
80009ac0:	13 08       	ld.w	r8,r9++
80009ac2:	f0 0e 0a 4b 	lsr	r11,r8,lr
80009ac6:	08 39       	cp.w	r9,r4
80009ac8:	cf 63       	brcs	80009ab4 <__lshift+0x54>
80009aca:	99 0b       	st.w	r12[0x0],r11
80009acc:	58 0b       	cp.w	r11,0
80009ace:	c0 70       	breq	80009adc <__lshift+0x7c>
80009ad0:	2f f6       	sub	r6,-1
80009ad2:	c0 58       	rjmp	80009adc <__lshift+0x7c>
80009ad4:	13 08       	ld.w	r8,r9++
80009ad6:	18 a8       	st.w	r12++,r8
80009ad8:	08 39       	cp.w	r9,r4
80009ada:	cf d3       	brcs	80009ad4 <__lshift+0x74>
80009adc:	ec c8 00 01 	sub	r8,r6,1
80009ae0:	04 9c       	mov	r12,r2
80009ae2:	8b 48       	st.w	r5[0x10],r8
80009ae4:	0e 9b       	mov	r11,r7
80009ae6:	cb 1e       	rcall	80009848 <_Bfree>
80009ae8:	0a 9c       	mov	r12,r5
80009aea:	d8 32       	popm	r0-r7,pc

80009aec <__multiply>:
80009aec:	d4 31       	pushm	r0-r7,lr
80009aee:	20 2d       	sub	sp,8
80009af0:	16 97       	mov	r7,r11
80009af2:	14 96       	mov	r6,r10
80009af4:	76 49       	ld.w	r9,r11[0x10]
80009af6:	74 48       	ld.w	r8,r10[0x10]
80009af8:	10 39       	cp.w	r9,r8
80009afa:	c0 34       	brge	80009b00 <__multiply+0x14>
80009afc:	16 96       	mov	r6,r11
80009afe:	14 97       	mov	r7,r10
80009b00:	6e 29       	ld.w	r9,r7[0x8]
80009b02:	6e 1b       	ld.w	r11,r7[0x4]
80009b04:	f6 c8 ff ff 	sub	r8,r11,-1
80009b08:	6e 44       	ld.w	r4,r7[0x10]
80009b0a:	6c 43       	ld.w	r3,r6[0x10]
80009b0c:	e6 04 00 05 	add	r5,r3,r4
80009b10:	12 35       	cp.w	r5,r9
80009b12:	f0 0b 17 90 	movgt	r11,r8
80009b16:	12 35       	cp.w	r5,r9
80009b18:	cb 2e       	rcall	8000987c <_Balloc>
80009b1a:	ea c8 ff fb 	sub	r8,r5,-5
80009b1e:	f8 08 00 28 	add	r8,r12,r8<<0x2
80009b22:	f8 c9 ff ec 	sub	r9,r12,-20
80009b26:	50 08       	stdsp	sp[0x0],r8
80009b28:	18 92       	mov	r2,r12
80009b2a:	30 0a       	mov	r10,0
80009b2c:	12 98       	mov	r8,r9
80009b2e:	c0 28       	rjmp	80009b32 <__multiply+0x46>
80009b30:	10 aa       	st.w	r8++,r10
80009b32:	40 0b       	lddsp	r11,sp[0x0]
80009b34:	16 38       	cp.w	r8,r11
80009b36:	cf d3       	brcs	80009b30 <__multiply+0x44>
80009b38:	e8 c8 ff fb 	sub	r8,r4,-5
80009b3c:	ee c1 ff ec 	sub	r1,r7,-20
80009b40:	ee 08 00 20 	add	r0,r7,r8<<0x2
80009b44:	ec c4 ff ec 	sub	r4,r6,-20
80009b48:	e6 c8 ff fb 	sub	r8,r3,-5
80009b4c:	12 93       	mov	r3,r9
80009b4e:	ec 08 00 28 	add	r8,r6,r8<<0x2
80009b52:	50 18       	stdsp	sp[0x4],r8
80009b54:	c3 e8       	rjmp	80009bd0 <__multiply+0xe4>
80009b56:	88 9c       	ld.uh	r12,r4[0x2]
80009b58:	58 0c       	cp.w	r12,0
80009b5a:	c1 d0       	breq	80009b94 <__multiply+0xa8>
80009b5c:	02 96       	mov	r6,r1
80009b5e:	06 9e       	mov	lr,r3
80009b60:	30 07       	mov	r7,0
80009b62:	7c 0a       	ld.w	r10,lr[0x0]
80009b64:	0d 08       	ld.w	r8,r6++
80009b66:	f4 0b 16 10 	lsr	r11,r10,0x10
80009b6a:	f0 09 16 10 	lsr	r9,r8,0x10
80009b6e:	f5 da c0 10 	bfextu	r10,r10,0x0,0x10
80009b72:	b9 39       	mul	r9,r12
80009b74:	f1 d8 c0 10 	bfextu	r8,r8,0x0,0x10
80009b78:	16 09       	add	r9,r11
80009b7a:	b9 38       	mul	r8,r12
80009b7c:	14 08       	add	r8,r10
80009b7e:	0e 08       	add	r8,r7
80009b80:	bc 18       	st.h	lr[0x2],r8
80009b82:	b1 88       	lsr	r8,0x10
80009b84:	10 09       	add	r9,r8
80009b86:	bc 09       	st.h	lr[0x0],r9
80009b88:	f2 07 16 10 	lsr	r7,r9,0x10
80009b8c:	2f ce       	sub	lr,-4
80009b8e:	00 36       	cp.w	r6,r0
80009b90:	ce 93       	brcs	80009b62 <__multiply+0x76>
80009b92:	9d 07       	st.w	lr[0x0],r7
80009b94:	88 87       	ld.uh	r7,r4[0x0]
80009b96:	58 07       	cp.w	r7,0
80009b98:	c1 a0       	breq	80009bcc <__multiply+0xe0>
80009b9a:	66 09       	ld.w	r9,r3[0x0]
80009b9c:	02 9e       	mov	lr,r1
80009b9e:	06 9b       	mov	r11,r3
80009ba0:	30 06       	mov	r6,0
80009ba2:	96 8a       	ld.uh	r10,r11[0x0]
80009ba4:	b6 19       	st.h	r11[0x2],r9
80009ba6:	1d 09       	ld.w	r9,lr++
80009ba8:	f1 d9 c0 10 	bfextu	r8,r9,0x0,0x10
80009bac:	af 38       	mul	r8,r7
80009bae:	14 08       	add	r8,r10
80009bb0:	0c 08       	add	r8,r6
80009bb2:	b6 08       	st.h	r11[0x0],r8
80009bb4:	b1 89       	lsr	r9,0x10
80009bb6:	2f cb       	sub	r11,-4
80009bb8:	af 39       	mul	r9,r7
80009bba:	b1 88       	lsr	r8,0x10
80009bbc:	96 9a       	ld.uh	r10,r11[0x2]
80009bbe:	14 09       	add	r9,r10
80009bc0:	10 09       	add	r9,r8
80009bc2:	f2 06 16 10 	lsr	r6,r9,0x10
80009bc6:	00 3e       	cp.w	lr,r0
80009bc8:	ce d3       	brcs	80009ba2 <__multiply+0xb6>
80009bca:	97 09       	st.w	r11[0x0],r9
80009bcc:	2f c4       	sub	r4,-4
80009bce:	2f c3       	sub	r3,-4
80009bd0:	40 18       	lddsp	r8,sp[0x4]
80009bd2:	10 34       	cp.w	r4,r8
80009bd4:	cc 13       	brcs	80009b56 <__multiply+0x6a>
80009bd6:	40 09       	lddsp	r9,sp[0x0]
80009bd8:	c0 28       	rjmp	80009bdc <__multiply+0xf0>
80009bda:	20 15       	sub	r5,1
80009bdc:	58 05       	cp.w	r5,0
80009bde:	e0 8a 00 05 	brle	80009be8 <__multiply+0xfc>
80009be2:	13 48       	ld.w	r8,--r9
80009be4:	58 08       	cp.w	r8,0
80009be6:	cf a0       	breq	80009bda <__multiply+0xee>
80009be8:	85 45       	st.w	r2[0x10],r5
80009bea:	04 9c       	mov	r12,r2
80009bec:	2f ed       	sub	sp,-8
80009bee:	d8 32       	popm	r0-r7,pc

80009bf0 <__i2b>:
80009bf0:	d4 21       	pushm	r4-r7,lr
80009bf2:	16 96       	mov	r6,r11
80009bf4:	30 1b       	mov	r11,1
80009bf6:	c4 3e       	rcall	8000987c <_Balloc>
80009bf8:	30 18       	mov	r8,1
80009bfa:	99 56       	st.w	r12[0x14],r6
80009bfc:	99 48       	st.w	r12[0x10],r8
80009bfe:	d8 22       	popm	r4-r7,pc

80009c00 <__multadd>:
80009c00:	d4 31       	pushm	r0-r7,lr
80009c02:	16 97       	mov	r7,r11
80009c04:	18 93       	mov	r3,r12
80009c06:	76 44       	ld.w	r4,r11[0x10]
80009c08:	f6 cc ff ec 	sub	r12,r11,-20
80009c0c:	14 9e       	mov	lr,r10
80009c0e:	12 95       	mov	r5,r9
80009c10:	30 0b       	mov	r11,0
80009c12:	78 09       	ld.w	r9,r12[0x0]
80009c14:	f2 08 16 10 	lsr	r8,r9,0x10
80009c18:	fc 08 02 48 	mul	r8,lr,r8
80009c1c:	f3 d9 c0 10 	bfextu	r9,r9,0x0,0x10
80009c20:	fc 09 02 49 	mul	r9,lr,r9
80009c24:	ea 09 00 09 	add	r9,r5,r9
80009c28:	f5 d9 c0 10 	bfextu	r10,r9,0x0,0x10
80009c2c:	b1 89       	lsr	r9,0x10
80009c2e:	10 09       	add	r9,r8
80009c30:	f2 08 15 10 	lsl	r8,r9,0x10
80009c34:	14 08       	add	r8,r10
80009c36:	18 a8       	st.w	r12++,r8
80009c38:	2f fb       	sub	r11,-1
80009c3a:	f2 05 16 10 	lsr	r5,r9,0x10
80009c3e:	08 3b       	cp.w	r11,r4
80009c40:	ce 95       	brlt	80009c12 <__multadd+0x12>
80009c42:	58 05       	cp.w	r5,0
80009c44:	c1 d0       	breq	80009c7e <__multadd+0x7e>
80009c46:	6e 28       	ld.w	r8,r7[0x8]
80009c48:	10 34       	cp.w	r4,r8
80009c4a:	c1 35       	brlt	80009c70 <__multadd+0x70>
80009c4c:	6e 1b       	ld.w	r11,r7[0x4]
80009c4e:	06 9c       	mov	r12,r3
80009c50:	2f fb       	sub	r11,-1
80009c52:	c1 5e       	rcall	8000987c <_Balloc>
80009c54:	6e 4a       	ld.w	r10,r7[0x10]
80009c56:	ee cb ff f4 	sub	r11,r7,-12
80009c5a:	18 96       	mov	r6,r12
80009c5c:	2f ea       	sub	r10,-2
80009c5e:	2f 4c       	sub	r12,-12
80009c60:	a3 6a       	lsl	r10,0x2
80009c62:	fe b0 fc 86 	rcall	8000956e <memcpy>
80009c66:	0e 9b       	mov	r11,r7
80009c68:	06 9c       	mov	r12,r3
80009c6a:	fe b0 fd ef 	rcall	80009848 <_Bfree>
80009c6e:	0c 97       	mov	r7,r6
80009c70:	e8 c8 ff ff 	sub	r8,r4,-1
80009c74:	8f 48       	st.w	r7[0x10],r8
80009c76:	e8 c8 ff fb 	sub	r8,r4,-5
80009c7a:	ee 08 09 25 	st.w	r7[r8<<0x2],r5
80009c7e:	0e 9c       	mov	r12,r7
80009c80:	d8 32       	popm	r0-r7,pc
80009c82:	d7 03       	nop

80009c84 <__pow5mult>:
80009c84:	d4 31       	pushm	r0-r7,lr
80009c86:	14 97       	mov	r7,r10
80009c88:	18 95       	mov	r5,r12
80009c8a:	16 93       	mov	r3,r11
80009c8c:	f3 da c0 02 	bfextu	r9,r10,0x0,0x2
80009c90:	c0 80       	breq	80009ca0 <__pow5mult+0x1c>
80009c92:	20 19       	sub	r9,1
80009c94:	49 f8       	lddpc	r8,80009d10 <__pow5mult+0x8c>
80009c96:	f0 09 03 2a 	ld.w	r10,r8[r9<<0x2]
80009c9a:	30 09       	mov	r9,0
80009c9c:	cb 2f       	rcall	80009c00 <__multadd>
80009c9e:	18 93       	mov	r3,r12
80009ca0:	ee 04 14 02 	asr	r4,r7,0x2
80009ca4:	c3 40       	breq	80009d0c <__pow5mult+0x88>
80009ca6:	6a 96       	ld.w	r6,r5[0x24]
80009ca8:	58 06       	cp.w	r6,0
80009caa:	c0 91       	brne	80009cbc <__pow5mult+0x38>
80009cac:	31 0c       	mov	r12,16
80009cae:	fe b0 dc f7 	rcall	8000569c <malloc>
80009cb2:	99 36       	st.w	r12[0xc],r6
80009cb4:	8b 9c       	st.w	r5[0x24],r12
80009cb6:	99 16       	st.w	r12[0x4],r6
80009cb8:	99 26       	st.w	r12[0x8],r6
80009cba:	99 06       	st.w	r12[0x0],r6
80009cbc:	6a 96       	ld.w	r6,r5[0x24]
80009cbe:	6c 27       	ld.w	r7,r6[0x8]
80009cc0:	58 07       	cp.w	r7,0
80009cc2:	c0 c1       	brne	80009cda <__pow5mult+0x56>
80009cc4:	e0 6b 02 71 	mov	r11,625
80009cc8:	0a 9c       	mov	r12,r5
80009cca:	c9 3f       	rcall	80009bf0 <__i2b>
80009ccc:	8d 2c       	st.w	r6[0x8],r12
80009cce:	30 08       	mov	r8,0
80009cd0:	18 97       	mov	r7,r12
80009cd2:	99 08       	st.w	r12[0x0],r8
80009cd4:	c0 38       	rjmp	80009cda <__pow5mult+0x56>
80009cd6:	0c 9c       	mov	r12,r6
80009cd8:	18 97       	mov	r7,r12
80009cda:	ed b4 00 00 	bld	r4,0x0
80009cde:	c0 b1       	brne	80009cf4 <__pow5mult+0x70>
80009ce0:	06 9b       	mov	r11,r3
80009ce2:	0e 9a       	mov	r10,r7
80009ce4:	0a 9c       	mov	r12,r5
80009ce6:	c0 3f       	rcall	80009aec <__multiply>
80009ce8:	06 9b       	mov	r11,r3
80009cea:	18 96       	mov	r6,r12
80009cec:	0a 9c       	mov	r12,r5
80009cee:	0c 93       	mov	r3,r6
80009cf0:	fe b0 fd ac 	rcall	80009848 <_Bfree>
80009cf4:	a1 54       	asr	r4,0x1
80009cf6:	c0 b0       	breq	80009d0c <__pow5mult+0x88>
80009cf8:	6e 06       	ld.w	r6,r7[0x0]
80009cfa:	58 06       	cp.w	r6,0
80009cfc:	ce d1       	brne	80009cd6 <__pow5mult+0x52>
80009cfe:	0e 9a       	mov	r10,r7
80009d00:	0e 9b       	mov	r11,r7
80009d02:	0a 9c       	mov	r12,r5
80009d04:	cf 4e       	rcall	80009aec <__multiply>
80009d06:	8f 0c       	st.w	r7[0x0],r12
80009d08:	99 06       	st.w	r12[0x0],r6
80009d0a:	ce 7b       	rjmp	80009cd8 <__pow5mult+0x54>
80009d0c:	06 9c       	mov	r12,r3
80009d0e:	d8 32       	popm	r0-r7,pc
80009d10:	80 00       	ld.sh	r0,r0[0x0]
80009d12:	c2 80       	breq	80009d62 <_realloc_r+0x26>

80009d14 <_read_r>:
80009d14:	d4 21       	pushm	r4-r7,lr
80009d16:	16 98       	mov	r8,r11
80009d18:	18 96       	mov	r6,r12
80009d1a:	10 9c       	mov	r12,r8
80009d1c:	30 08       	mov	r8,0
80009d1e:	14 9b       	mov	r11,r10
80009d20:	48 67       	lddpc	r7,80009d38 <_read_r+0x24>
80009d22:	12 9a       	mov	r10,r9
80009d24:	8f 08       	st.w	r7[0x0],r8
80009d26:	fe b0 d9 3d 	rcall	80004fa0 <_read>
80009d2a:	5b fc       	cp.w	r12,-1
80009d2c:	c0 51       	brne	80009d36 <_read_r+0x22>
80009d2e:	6e 08       	ld.w	r8,r7[0x0]
80009d30:	58 08       	cp.w	r8,0
80009d32:	c0 20       	breq	80009d36 <_read_r+0x22>
80009d34:	8d 38       	st.w	r6[0xc],r8
80009d36:	d8 22       	popm	r4-r7,pc
80009d38:	00 00       	add	r0,r0
80009d3a:	12 d8       	st.w	--r9,r8

80009d3c <_realloc_r>:
80009d3c:	d4 31       	pushm	r0-r7,lr
80009d3e:	20 1d       	sub	sp,4
80009d40:	16 94       	mov	r4,r11
80009d42:	14 91       	mov	r1,r10
80009d44:	18 90       	mov	r0,r12
80009d46:	58 0b       	cp.w	r11,0
80009d48:	c0 71       	brne	80009d56 <_realloc_r+0x1a>
80009d4a:	14 9b       	mov	r11,r10
80009d4c:	fe b0 dc b0 	rcall	800056ac <_malloc_r>
80009d50:	18 93       	mov	r3,r12
80009d52:	e0 8f 01 71 	bral	8000a034 <_realloc_r+0x2f8>
80009d56:	fe b0 de dc 	rcall	80005b0e <__malloc_lock>
80009d5a:	e2 c8 ff f5 	sub	r8,r1,-11
80009d5e:	e8 c6 00 08 	sub	r6,r4,8
80009d62:	10 99       	mov	r9,r8
80009d64:	59 68       	cp.w	r8,22
80009d66:	e0 19 ff f8 	andl	r9,0xfff8
80009d6a:	6c 1e       	ld.w	lr,r6[0x4]
80009d6c:	59 68       	cp.w	r8,22
80009d6e:	f2 02 17 b0 	movhi	r2,r9
80009d72:	f9 b2 08 10 	movls	r2,16
80009d76:	02 32       	cp.w	r2,r1
80009d78:	5f 38       	srlo	r8
80009d7a:	f1 e2 13 f8 	or	r8,r8,r2>>0x1f
80009d7e:	c0 50       	breq	80009d88 <_realloc_r+0x4c>
80009d80:	30 c8       	mov	r8,12
80009d82:	30 03       	mov	r3,0
80009d84:	81 38       	st.w	r0[0xc],r8
80009d86:	c5 79       	rjmp	8000a034 <_realloc_r+0x2f8>
80009d88:	1c 95       	mov	r5,lr
80009d8a:	e0 15 ff fc 	andl	r5,0xfffc
80009d8e:	04 35       	cp.w	r5,r2
80009d90:	e0 84 01 27 	brge	80009fde <_realloc_r+0x2a2>
80009d94:	4c a8       	lddpc	r8,80009ebc <_realloc_r+0x180>
80009d96:	ec 05 00 0a 	add	r10,r6,r5
80009d9a:	70 2c       	ld.w	r12,r8[0x8]
80009d9c:	18 3a       	cp.w	r10,r12
80009d9e:	c0 90       	breq	80009db0 <_realloc_r+0x74>
80009da0:	74 18       	ld.w	r8,r10[0x4]
80009da2:	a1 c8       	cbr	r8,0x0
80009da4:	f4 08 00 08 	add	r8,r10,r8
80009da8:	70 18       	ld.w	r8,r8[0x4]
80009daa:	ed b8 00 00 	bld	r8,0x0
80009dae:	c2 70       	breq	80009dfc <_realloc_r+0xc0>
80009db0:	74 1b       	ld.w	r11,r10[0x4]
80009db2:	e0 1b ff fc 	andl	r11,0xfffc
80009db6:	f6 05 00 09 	add	r9,r11,r5
80009dba:	18 3a       	cp.w	r10,r12
80009dbc:	c1 71       	brne	80009dea <_realloc_r+0xae>
80009dbe:	e4 c8 ff f0 	sub	r8,r2,-16
80009dc2:	10 39       	cp.w	r9,r8
80009dc4:	c1 e5       	brlt	80009e00 <_realloc_r+0xc4>
80009dc6:	f2 02 01 08 	sub	r8,r9,r2
80009dca:	ec 02 00 09 	add	r9,r6,r2
80009dce:	a1 a8       	sbr	r8,0x0
80009dd0:	93 18       	st.w	r9[0x4],r8
80009dd2:	4b ba       	lddpc	r10,80009ebc <_realloc_r+0x180>
80009dd4:	6c 18       	ld.w	r8,r6[0x4]
80009dd6:	95 29       	st.w	r10[0x8],r9
80009dd8:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80009ddc:	00 9c       	mov	r12,r0
80009dde:	e5 e8 10 08 	or	r8,r2,r8
80009de2:	ec c3 ff f8 	sub	r3,r6,-8
80009de6:	8d 18       	st.w	r6[0x4],r8
80009de8:	c2 49       	rjmp	8000a030 <_realloc_r+0x2f4>
80009dea:	12 93       	mov	r3,r9
80009dec:	04 39       	cp.w	r9,r2
80009dee:	c0 95       	brlt	80009e00 <_realloc_r+0xc4>
80009df0:	74 29       	ld.w	r9,r10[0x8]
80009df2:	74 38       	ld.w	r8,r10[0xc]
80009df4:	0c 97       	mov	r7,r6
80009df6:	91 29       	st.w	r8[0x8],r9
80009df8:	93 38       	st.w	r9[0xc],r8
80009dfa:	cf 48       	rjmp	80009fe2 <_realloc_r+0x2a6>
80009dfc:	30 0a       	mov	r10,0
80009dfe:	14 9b       	mov	r11,r10
80009e00:	ed be 00 00 	bld	lr,0x0
80009e04:	e0 80 00 a5 	breq	80009f4e <_realloc_r+0x212>
80009e08:	6c 08       	ld.w	r8,r6[0x0]
80009e0a:	ec 08 01 07 	sub	r7,r6,r8
80009e0e:	6e 19       	ld.w	r9,r7[0x4]
80009e10:	e0 19 ff fc 	andl	r9,0xfffc
80009e14:	58 0a       	cp.w	r10,0
80009e16:	c6 20       	breq	80009eda <_realloc_r+0x19e>
80009e18:	f2 05 00 08 	add	r8,r9,r5
80009e1c:	18 3a       	cp.w	r10,r12
80009e1e:	c5 11       	brne	80009ec0 <_realloc_r+0x184>
80009e20:	16 08       	add	r8,r11
80009e22:	50 08       	stdsp	sp[0x0],r8
80009e24:	e4 c8 ff f0 	sub	r8,r2,-16
80009e28:	40 0a       	lddsp	r10,sp[0x0]
80009e2a:	10 3a       	cp.w	r10,r8
80009e2c:	c5 75       	brlt	80009eda <_realloc_r+0x19e>
80009e2e:	6e 39       	ld.w	r9,r7[0xc]
80009e30:	6e 28       	ld.w	r8,r7[0x8]
80009e32:	93 28       	st.w	r9[0x8],r8
80009e34:	91 39       	st.w	r8[0xc],r9
80009e36:	ea cb 00 04 	sub	r11,r5,4
80009e3a:	ee c3 ff f8 	sub	r3,r7,-8
80009e3e:	e0 4b 00 24 	cp.w	r11,36
80009e42:	e0 8b 00 27 	brhi	80009e90 <_realloc_r+0x154>
80009e46:	08 99       	mov	r9,r4
80009e48:	06 9a       	mov	r10,r3
80009e4a:	59 3b       	cp.w	r11,19
80009e4c:	e0 88 00 1b 	brls	80009e82 <_realloc_r+0x146>
80009e50:	68 08       	ld.w	r8,r4[0x0]
80009e52:	87 08       	st.w	r3[0x0],r8
80009e54:	2f c9       	sub	r9,-4
80009e56:	13 08       	ld.w	r8,r9++
80009e58:	8f 38       	st.w	r7[0xc],r8
80009e5a:	ee ca ff f0 	sub	r10,r7,-16
80009e5e:	59 bb       	cp.w	r11,27
80009e60:	e0 88 00 11 	brls	80009e82 <_realloc_r+0x146>
80009e64:	13 08       	ld.w	r8,r9++
80009e66:	95 08       	st.w	r10[0x0],r8
80009e68:	13 08       	ld.w	r8,r9++
80009e6a:	8f 58       	st.w	r7[0x14],r8
80009e6c:	ee ca ff e8 	sub	r10,r7,-24
80009e70:	e0 4b 00 24 	cp.w	r11,36
80009e74:	c0 71       	brne	80009e82 <_realloc_r+0x146>
80009e76:	13 08       	ld.w	r8,r9++
80009e78:	95 08       	st.w	r10[0x0],r8
80009e7a:	ee ca ff e0 	sub	r10,r7,-32
80009e7e:	13 08       	ld.w	r8,r9++
80009e80:	8f 78       	st.w	r7[0x1c],r8
80009e82:	13 08       	ld.w	r8,r9++
80009e84:	14 a8       	st.w	r10++,r8
80009e86:	72 08       	ld.w	r8,r9[0x0]
80009e88:	95 08       	st.w	r10[0x0],r8
80009e8a:	72 18       	ld.w	r8,r9[0x4]
80009e8c:	95 18       	st.w	r10[0x4],r8
80009e8e:	c0 68       	rjmp	80009e9a <_realloc_r+0x15e>
80009e90:	16 9a       	mov	r10,r11
80009e92:	06 9c       	mov	r12,r3
80009e94:	08 9b       	mov	r11,r4
80009e96:	fe b0 fc 10 	rcall	800096b6 <memmove>
80009e9a:	40 08       	lddsp	r8,sp[0x0]
80009e9c:	04 18       	sub	r8,r2
80009e9e:	a1 a8       	sbr	r8,0x0
80009ea0:	ee 02 00 09 	add	r9,r7,r2
80009ea4:	93 18       	st.w	r9[0x4],r8
80009ea6:	48 68       	lddpc	r8,80009ebc <_realloc_r+0x180>
80009ea8:	00 9c       	mov	r12,r0
80009eaa:	91 29       	st.w	r8[0x8],r9
80009eac:	6e 18       	ld.w	r8,r7[0x4]
80009eae:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80009eb2:	e5 e8 10 08 	or	r8,r2,r8
80009eb6:	8f 18       	st.w	r7[0x4],r8
80009eb8:	cb c8       	rjmp	8000a030 <_realloc_r+0x2f4>
80009eba:	d7 03       	nop
80009ebc:	00 00       	add	r0,r0
80009ebe:	01 20       	ld.uh	r0,r0++
80009ec0:	f0 0b 00 03 	add	r3,r8,r11
80009ec4:	04 33       	cp.w	r3,r2
80009ec6:	c0 a5       	brlt	80009eda <_realloc_r+0x19e>
80009ec8:	74 29       	ld.w	r9,r10[0x8]
80009eca:	74 38       	ld.w	r8,r10[0xc]
80009ecc:	91 29       	st.w	r8[0x8],r9
80009ece:	93 38       	st.w	r9[0xc],r8
80009ed0:	6e 29       	ld.w	r9,r7[0x8]
80009ed2:	6e 38       	ld.w	r8,r7[0xc]
80009ed4:	91 29       	st.w	r8[0x8],r9
80009ed6:	93 38       	st.w	r9[0xc],r8
80009ed8:	c0 98       	rjmp	80009eea <_realloc_r+0x1ae>
80009eda:	f2 05 00 03 	add	r3,r9,r5
80009ede:	04 33       	cp.w	r3,r2
80009ee0:	c3 75       	brlt	80009f4e <_realloc_r+0x212>
80009ee2:	6e 39       	ld.w	r9,r7[0xc]
80009ee4:	6e 28       	ld.w	r8,r7[0x8]
80009ee6:	93 28       	st.w	r9[0x8],r8
80009ee8:	91 39       	st.w	r8[0xc],r9
80009eea:	ea cb 00 04 	sub	r11,r5,4
80009eee:	ee cc ff f8 	sub	r12,r7,-8
80009ef2:	e0 4b 00 24 	cp.w	r11,36
80009ef6:	e0 8b 00 27 	brhi	80009f44 <_realloc_r+0x208>
80009efa:	08 99       	mov	r9,r4
80009efc:	18 9a       	mov	r10,r12
80009efe:	59 3b       	cp.w	r11,19
80009f00:	e0 88 00 1b 	brls	80009f36 <_realloc_r+0x1fa>
80009f04:	68 08       	ld.w	r8,r4[0x0]
80009f06:	99 08       	st.w	r12[0x0],r8
80009f08:	2f c9       	sub	r9,-4
80009f0a:	13 08       	ld.w	r8,r9++
80009f0c:	8f 38       	st.w	r7[0xc],r8
80009f0e:	ee ca ff f0 	sub	r10,r7,-16
80009f12:	59 bb       	cp.w	r11,27
80009f14:	e0 88 00 11 	brls	80009f36 <_realloc_r+0x1fa>
80009f18:	13 08       	ld.w	r8,r9++
80009f1a:	95 08       	st.w	r10[0x0],r8
80009f1c:	13 08       	ld.w	r8,r9++
80009f1e:	8f 58       	st.w	r7[0x14],r8
80009f20:	ee ca ff e8 	sub	r10,r7,-24
80009f24:	e0 4b 00 24 	cp.w	r11,36
80009f28:	c0 71       	brne	80009f36 <_realloc_r+0x1fa>
80009f2a:	13 08       	ld.w	r8,r9++
80009f2c:	95 08       	st.w	r10[0x0],r8
80009f2e:	ee ca ff e0 	sub	r10,r7,-32
80009f32:	13 08       	ld.w	r8,r9++
80009f34:	8f 78       	st.w	r7[0x1c],r8
80009f36:	13 08       	ld.w	r8,r9++
80009f38:	14 a8       	st.w	r10++,r8
80009f3a:	72 08       	ld.w	r8,r9[0x0]
80009f3c:	95 08       	st.w	r10[0x0],r8
80009f3e:	72 18       	ld.w	r8,r9[0x4]
80009f40:	95 18       	st.w	r10[0x4],r8
80009f42:	c5 08       	rjmp	80009fe2 <_realloc_r+0x2a6>
80009f44:	16 9a       	mov	r10,r11
80009f46:	08 9b       	mov	r11,r4
80009f48:	fe b0 fb b7 	rcall	800096b6 <memmove>
80009f4c:	c4 b8       	rjmp	80009fe2 <_realloc_r+0x2a6>
80009f4e:	02 9b       	mov	r11,r1
80009f50:	00 9c       	mov	r12,r0
80009f52:	fe b0 db ad 	rcall	800056ac <_malloc_r>
80009f56:	18 93       	mov	r3,r12
80009f58:	c4 10       	breq	80009fda <_realloc_r+0x29e>
80009f5a:	6c 18       	ld.w	r8,r6[0x4]
80009f5c:	f8 c9 00 08 	sub	r9,r12,8
80009f60:	a1 c8       	cbr	r8,0x0
80009f62:	ec 08 00 08 	add	r8,r6,r8
80009f66:	10 39       	cp.w	r9,r8
80009f68:	c0 81       	brne	80009f78 <_realloc_r+0x23c>
80009f6a:	72 18       	ld.w	r8,r9[0x4]
80009f6c:	0c 97       	mov	r7,r6
80009f6e:	e0 18 ff fc 	andl	r8,0xfffc
80009f72:	f0 05 00 03 	add	r3,r8,r5
80009f76:	c3 68       	rjmp	80009fe2 <_realloc_r+0x2a6>
80009f78:	ea ce 00 04 	sub	lr,r5,4
80009f7c:	e0 4e 00 24 	cp.w	lr,36
80009f80:	e0 8b 00 25 	brhi	80009fca <_realloc_r+0x28e>
80009f84:	08 9b       	mov	r11,r4
80009f86:	18 9a       	mov	r10,r12
80009f88:	59 3e       	cp.w	lr,19
80009f8a:	e0 88 00 18 	brls	80009fba <_realloc_r+0x27e>
80009f8e:	08 98       	mov	r8,r4
80009f90:	18 99       	mov	r9,r12
80009f92:	11 0a       	ld.w	r10,r8++
80009f94:	12 aa       	st.w	r9++,r10
80009f96:	10 9b       	mov	r11,r8
80009f98:	12 9a       	mov	r10,r9
80009f9a:	17 08       	ld.w	r8,r11++
80009f9c:	14 a8       	st.w	r10++,r8
80009f9e:	59 be       	cp.w	lr,27
80009fa0:	e0 88 00 0d 	brls	80009fba <_realloc_r+0x27e>
80009fa4:	17 08       	ld.w	r8,r11++
80009fa6:	14 a8       	st.w	r10++,r8
80009fa8:	17 08       	ld.w	r8,r11++
80009faa:	14 a8       	st.w	r10++,r8
80009fac:	e0 4e 00 24 	cp.w	lr,36
80009fb0:	c0 51       	brne	80009fba <_realloc_r+0x27e>
80009fb2:	17 08       	ld.w	r8,r11++
80009fb4:	14 a8       	st.w	r10++,r8
80009fb6:	17 08       	ld.w	r8,r11++
80009fb8:	14 a8       	st.w	r10++,r8
80009fba:	16 99       	mov	r9,r11
80009fbc:	13 08       	ld.w	r8,r9++
80009fbe:	14 a8       	st.w	r10++,r8
80009fc0:	72 08       	ld.w	r8,r9[0x0]
80009fc2:	95 08       	st.w	r10[0x0],r8
80009fc4:	72 18       	ld.w	r8,r9[0x4]
80009fc6:	95 18       	st.w	r10[0x4],r8
80009fc8:	c0 58       	rjmp	80009fd2 <_realloc_r+0x296>
80009fca:	1c 9a       	mov	r10,lr
80009fcc:	08 9b       	mov	r11,r4
80009fce:	fe b0 fb 74 	rcall	800096b6 <memmove>
80009fd2:	08 9b       	mov	r11,r4
80009fd4:	00 9c       	mov	r12,r0
80009fd6:	fe b0 f8 3f 	rcall	80009054 <_free_r>
80009fda:	00 9c       	mov	r12,r0
80009fdc:	c2 a8       	rjmp	8000a030 <_realloc_r+0x2f4>
80009fde:	0c 97       	mov	r7,r6
80009fe0:	0a 93       	mov	r3,r5
80009fe2:	e6 02 01 09 	sub	r9,r3,r2
80009fe6:	6e 18       	ld.w	r8,r7[0x4]
80009fe8:	58 f9       	cp.w	r9,15
80009fea:	e0 88 00 16 	brls	8000a016 <_realloc_r+0x2da>
80009fee:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80009ff2:	e5 e8 10 08 	or	r8,r2,r8
80009ff6:	8f 18       	st.w	r7[0x4],r8
80009ff8:	12 98       	mov	r8,r9
80009ffa:	a1 a8       	sbr	r8,0x0
80009ffc:	ee 02 00 0b 	add	r11,r7,r2
8000a000:	f6 09 00 09 	add	r9,r11,r9
8000a004:	97 18       	st.w	r11[0x4],r8
8000a006:	72 18       	ld.w	r8,r9[0x4]
8000a008:	a1 a8       	sbr	r8,0x0
8000a00a:	2f 8b       	sub	r11,-8
8000a00c:	93 18       	st.w	r9[0x4],r8
8000a00e:	00 9c       	mov	r12,r0
8000a010:	fe b0 f8 22 	rcall	80009054 <_free_r>
8000a014:	c0 b8       	rjmp	8000a02a <_realloc_r+0x2ee>
8000a016:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8000a01a:	e7 e8 10 08 	or	r8,r3,r8
8000a01e:	8f 18       	st.w	r7[0x4],r8
8000a020:	ee 03 00 09 	add	r9,r7,r3
8000a024:	72 18       	ld.w	r8,r9[0x4]
8000a026:	a1 a8       	sbr	r8,0x0
8000a028:	93 18       	st.w	r9[0x4],r8
8000a02a:	00 9c       	mov	r12,r0
8000a02c:	ee c3 ff f8 	sub	r3,r7,-8
8000a030:	fe b0 dd 70 	rcall	80005b10 <__malloc_unlock>
8000a034:	06 9c       	mov	r12,r3
8000a036:	2f fd       	sub	sp,-4
8000a038:	d8 32       	popm	r0-r7,pc
8000a03a:	d7 03       	nop

8000a03c <__isinfd>:
8000a03c:	14 98       	mov	r8,r10
8000a03e:	f7 db c0 1f 	bfextu	r11,r11,0x0,0x1f
8000a042:	5c 3a       	neg	r10
8000a044:	10 4a       	or	r10,r8
8000a046:	30 08       	mov	r8,0
8000a048:	ea 18 7f f0 	orh	r8,0x7ff0
8000a04c:	f7 ea 13 fb 	or	r11,r11,r10>>0x1f
8000a050:	f0 0b 01 0b 	sub	r11,r8,r11
8000a054:	f6 0c 11 00 	rsub	r12,r11,0
8000a058:	16 4c       	or	r12,r11
8000a05a:	bf 5c       	asr	r12,0x1f
8000a05c:	2f fc       	sub	r12,-1
8000a05e:	5e fc       	retal	r12

8000a060 <__isnand>:
8000a060:	14 98       	mov	r8,r10
8000a062:	f9 db c0 1f 	bfextu	r12,r11,0x0,0x1f
8000a066:	5c 3a       	neg	r10
8000a068:	10 4a       	or	r10,r8
8000a06a:	30 08       	mov	r8,0
8000a06c:	ea 18 7f f0 	orh	r8,0x7ff0
8000a070:	f9 ea 13 fc 	or	r12,r12,r10>>0x1f
8000a074:	f0 0c 01 0c 	sub	r12,r8,r12
8000a078:	bf 9c       	lsr	r12,0x1f
8000a07a:	5e fc       	retal	r12

8000a07c <strlen>:
8000a07c:	18 99       	mov	r9,r12
8000a07e:	30 0a       	mov	r10,0
8000a080:	c0 28       	rjmp	8000a084 <strlen+0x8>
8000a082:	2f fc       	sub	r12,-1
8000a084:	19 88       	ld.ub	r8,r12[0x0]
8000a086:	f4 08 18 00 	cp.b	r8,r10
8000a08a:	cf c1       	brne	8000a082 <strlen+0x6>
8000a08c:	12 1c       	sub	r12,r9
8000a08e:	5e fc       	retal	r12

8000a090 <_calloc_r>:
8000a090:	d4 21       	pushm	r4-r7,lr
8000a092:	f4 0b 02 4b 	mul	r11,r10,r11
8000a096:	fe b0 db 0b 	rcall	800056ac <_malloc_r>
8000a09a:	18 97       	mov	r7,r12
8000a09c:	c2 60       	breq	8000a0e8 <_calloc_r+0x58>
8000a09e:	f8 f8 ff fc 	ld.w	r8,r12[-4]
8000a0a2:	e0 18 ff fc 	andl	r8,0xfffc
8000a0a6:	f0 ca 00 04 	sub	r10,r8,4
8000a0aa:	e0 4a 00 24 	cp.w	r10,36
8000a0ae:	e0 8b 00 1a 	brhi	8000a0e2 <_calloc_r+0x52>
8000a0b2:	18 99       	mov	r9,r12
8000a0b4:	59 3a       	cp.w	r10,19
8000a0b6:	e0 88 00 11 	brls	8000a0d8 <_calloc_r+0x48>
8000a0ba:	30 0b       	mov	r11,0
8000a0bc:	18 98       	mov	r8,r12
8000a0be:	10 ab       	st.w	r8++,r11
8000a0c0:	10 99       	mov	r9,r8
8000a0c2:	12 ab       	st.w	r9++,r11
8000a0c4:	59 ba       	cp.w	r10,27
8000a0c6:	e0 88 00 09 	brls	8000a0d8 <_calloc_r+0x48>
8000a0ca:	12 ab       	st.w	r9++,r11
8000a0cc:	12 ab       	st.w	r9++,r11
8000a0ce:	e0 4a 00 24 	cp.w	r10,36
8000a0d2:	c0 31       	brne	8000a0d8 <_calloc_r+0x48>
8000a0d4:	12 ab       	st.w	r9++,r11
8000a0d6:	12 ab       	st.w	r9++,r11
8000a0d8:	30 08       	mov	r8,0
8000a0da:	12 a8       	st.w	r9++,r8
8000a0dc:	93 18       	st.w	r9[0x4],r8
8000a0de:	93 08       	st.w	r9[0x0],r8
8000a0e0:	c0 48       	rjmp	8000a0e8 <_calloc_r+0x58>
8000a0e2:	30 0b       	mov	r11,0
8000a0e4:	fe b0 dd 0e 	rcall	80005b00 <memset>
8000a0e8:	0e 9c       	mov	r12,r7
8000a0ea:	d8 22       	popm	r4-r7,pc

8000a0ec <_fstat_r>:
8000a0ec:	d4 21       	pushm	r4-r7,lr
8000a0ee:	16 98       	mov	r8,r11
8000a0f0:	18 96       	mov	r6,r12
8000a0f2:	10 9c       	mov	r12,r8
8000a0f4:	30 08       	mov	r8,0
8000a0f6:	48 77       	lddpc	r7,8000a110 <_fstat_r+0x24>
8000a0f8:	14 9b       	mov	r11,r10
8000a0fa:	8f 08       	st.w	r7[0x0],r8
8000a0fc:	fe b0 d7 26 	rcall	80004f48 <_fstat>
8000a100:	5b fc       	cp.w	r12,-1
8000a102:	c0 51       	brne	8000a10c <_fstat_r+0x20>
8000a104:	6e 08       	ld.w	r8,r7[0x0]
8000a106:	58 08       	cp.w	r8,0
8000a108:	c0 20       	breq	8000a10c <_fstat_r+0x20>
8000a10a:	8d 38       	st.w	r6[0xc],r8
8000a10c:	d8 22       	popm	r4-r7,pc
8000a10e:	d7 03       	nop
8000a110:	00 00       	add	r0,r0
8000a112:	12 d8       	st.w	--r9,r8

8000a114 <__avr32_f64_mul>:
8000a114:	f5 eb 10 1c 	or	r12,r10,r11<<0x1
8000a118:	e0 80 00 dc 	breq	8000a2d0 <__avr32_f64_mul_op1_zero>
8000a11c:	d4 21       	pushm	r4-r7,lr
8000a11e:	f7 e9 20 0e 	eor	lr,r11,r9
8000a122:	ef db c2 8b 	bfextu	r7,r11,0x14,0xb
8000a126:	30 15       	mov	r5,1
8000a128:	c4 30       	breq	8000a1ae <__avr32_f64_mul_op1_subnormal>
8000a12a:	ab 6b       	lsl	r11,0xa
8000a12c:	f7 ea 13 6b 	or	r11,r11,r10>>0x16
8000a130:	ab 6a       	lsl	r10,0xa
8000a132:	f7 d5 d3 c2 	bfins	r11,r5,0x1e,0x2
8000a136:	ed d9 c2 8b 	bfextu	r6,r9,0x14,0xb
8000a13a:	c5 c0       	breq	8000a1f2 <__avr32_f64_mul_op2_subnormal>
8000a13c:	a1 78       	lsl	r8,0x1
8000a13e:	5c f9       	rol	r9
8000a140:	f3 d5 d2 ab 	bfins	r9,r5,0x15,0xb
8000a144:	e0 47 07 ff 	cp.w	r7,2047
8000a148:	c7 70       	breq	8000a236 <__avr32_f64_mul_op_nan_or_inf>
8000a14a:	e0 46 07 ff 	cp.w	r6,2047
8000a14e:	c7 40       	breq	8000a236 <__avr32_f64_mul_op_nan_or_inf>
8000a150:	ee 06 00 0c 	add	r12,r7,r6
8000a154:	e0 2c 03 fe 	sub	r12,1022
8000a158:	f6 08 06 44 	mulu.d	r4,r11,r8
8000a15c:	f4 09 07 44 	macu.d	r4,r10,r9
8000a160:	f4 08 06 46 	mulu.d	r6,r10,r8
8000a164:	f6 09 06 4a 	mulu.d	r10,r11,r9
8000a168:	08 07       	add	r7,r4
8000a16a:	f4 05 00 4a 	adc	r10,r10,r5
8000a16e:	5c 0b       	acr	r11
8000a170:	ed bb 00 14 	bld	r11,0x14
8000a174:	c0 50       	breq	8000a17e <__avr32_f64_mul+0x6a>
8000a176:	a1 77       	lsl	r7,0x1
8000a178:	5c fa       	rol	r10
8000a17a:	5c fb       	rol	r11
8000a17c:	20 1c       	sub	r12,1
8000a17e:	58 0c       	cp.w	r12,0
8000a180:	e0 8a 00 6f 	brle	8000a25e <__avr32_f64_mul_res_subnormal>
8000a184:	e0 4c 07 ff 	cp.w	r12,2047
8000a188:	e0 84 00 9c 	brge	8000a2c0 <__avr32_f64_mul_res_inf>
8000a18c:	f7 dc d2 8b 	bfins	r11,r12,0x14,0xb
8000a190:	ed ea 11 f6 	or	r6,r6,r10<<0x1f
8000a194:	ef e6 12 17 	or	r7,r7,r6>>0x1
8000a198:	ee 17 80 00 	eorh	r7,0x8000
8000a19c:	f1 b7 04 20 	satu	r7,0x1
8000a1a0:	0e 0a       	add	r10,r7
8000a1a2:	5c 0b       	acr	r11
8000a1a4:	ed be 00 1f 	bld	lr,0x1f
8000a1a8:	ef bb 00 1f 	bst	r11,0x1f
8000a1ac:	d8 22       	popm	r4-r7,pc

8000a1ae <__avr32_f64_mul_op1_subnormal>:
8000a1ae:	e4 1b 00 0f 	andh	r11,0xf
8000a1b2:	f4 0c 12 00 	clz	r12,r10
8000a1b6:	f6 06 12 00 	clz	r6,r11
8000a1ba:	f7 bc 03 e1 	sublo	r12,-31
8000a1be:	f8 06 17 30 	movlo	r6,r12
8000a1c2:	f7 b6 02 01 	subhs	r6,1
8000a1c6:	e0 46 00 20 	cp.w	r6,32
8000a1ca:	c0 d4       	brge	8000a1e4 <__avr32_f64_mul_op1_subnormal+0x36>
8000a1cc:	ec 0c 11 20 	rsub	r12,r6,32
8000a1d0:	f6 06 09 4b 	lsl	r11,r11,r6
8000a1d4:	f4 0c 0a 4c 	lsr	r12,r10,r12
8000a1d8:	18 4b       	or	r11,r12
8000a1da:	f4 06 09 4a 	lsl	r10,r10,r6
8000a1de:	20 b6       	sub	r6,11
8000a1e0:	0c 17       	sub	r7,r6
8000a1e2:	ca ab       	rjmp	8000a136 <__avr32_f64_mul+0x22>
8000a1e4:	f4 06 09 4b 	lsl	r11,r10,r6
8000a1e8:	c6 40       	breq	8000a2b0 <__avr32_f64_mul_res_zero>
8000a1ea:	30 0a       	mov	r10,0
8000a1ec:	20 b6       	sub	r6,11
8000a1ee:	0c 17       	sub	r7,r6
8000a1f0:	ca 3b       	rjmp	8000a136 <__avr32_f64_mul+0x22>

8000a1f2 <__avr32_f64_mul_op2_subnormal>:
8000a1f2:	e4 19 00 0f 	andh	r9,0xf
8000a1f6:	f0 0c 12 00 	clz	r12,r8
8000a1fa:	f2 05 12 00 	clz	r5,r9
8000a1fe:	f7 bc 03 ea 	sublo	r12,-22
8000a202:	f8 05 17 30 	movlo	r5,r12
8000a206:	f7 b5 02 0a 	subhs	r5,10
8000a20a:	e0 45 00 20 	cp.w	r5,32
8000a20e:	c0 d4       	brge	8000a228 <__avr32_f64_mul_op2_subnormal+0x36>
8000a210:	ea 0c 11 20 	rsub	r12,r5,32
8000a214:	f2 05 09 49 	lsl	r9,r9,r5
8000a218:	f0 0c 0a 4c 	lsr	r12,r8,r12
8000a21c:	18 49       	or	r9,r12
8000a21e:	f0 05 09 48 	lsl	r8,r8,r5
8000a222:	20 25       	sub	r5,2
8000a224:	0a 16       	sub	r6,r5
8000a226:	c8 fb       	rjmp	8000a144 <__avr32_f64_mul+0x30>
8000a228:	f0 05 09 49 	lsl	r9,r8,r5
8000a22c:	c4 20       	breq	8000a2b0 <__avr32_f64_mul_res_zero>
8000a22e:	30 08       	mov	r8,0
8000a230:	20 25       	sub	r5,2
8000a232:	0a 16       	sub	r6,r5
8000a234:	c8 8b       	rjmp	8000a144 <__avr32_f64_mul+0x30>

8000a236 <__avr32_f64_mul_op_nan_or_inf>:
8000a236:	e4 19 00 0f 	andh	r9,0xf
8000a23a:	e4 1b 00 0f 	andh	r11,0xf
8000a23e:	14 4b       	or	r11,r10
8000a240:	10 49       	or	r9,r8
8000a242:	e0 47 07 ff 	cp.w	r7,2047
8000a246:	c0 91       	brne	8000a258 <__avr32_f64_mul_op1_not_naninf>
8000a248:	58 0b       	cp.w	r11,0
8000a24a:	c3 81       	brne	8000a2ba <__avr32_f64_mul_res_nan>
8000a24c:	e0 46 07 ff 	cp.w	r6,2047
8000a250:	c3 81       	brne	8000a2c0 <__avr32_f64_mul_res_inf>
8000a252:	58 09       	cp.w	r9,0
8000a254:	c3 60       	breq	8000a2c0 <__avr32_f64_mul_res_inf>
8000a256:	c3 28       	rjmp	8000a2ba <__avr32_f64_mul_res_nan>

8000a258 <__avr32_f64_mul_op1_not_naninf>:
8000a258:	58 09       	cp.w	r9,0
8000a25a:	c3 30       	breq	8000a2c0 <__avr32_f64_mul_res_inf>
8000a25c:	c2 f8       	rjmp	8000a2ba <__avr32_f64_mul_res_nan>

8000a25e <__avr32_f64_mul_res_subnormal>:
8000a25e:	5c 3c       	neg	r12
8000a260:	2f fc       	sub	r12,-1
8000a262:	f1 bc 04 c0 	satu	r12,0x6
8000a266:	e0 4c 00 20 	cp.w	r12,32
8000a26a:	c1 14       	brge	8000a28c <__avr32_f64_mul_res_subnormal+0x2e>
8000a26c:	f8 08 11 20 	rsub	r8,r12,32
8000a270:	0e 46       	or	r6,r7
8000a272:	ee 0c 0a 47 	lsr	r7,r7,r12
8000a276:	f4 08 09 49 	lsl	r9,r10,r8
8000a27a:	12 47       	or	r7,r9
8000a27c:	f4 0c 0a 4a 	lsr	r10,r10,r12
8000a280:	f6 08 09 49 	lsl	r9,r11,r8
8000a284:	12 4a       	or	r10,r9
8000a286:	f6 0c 0a 4b 	lsr	r11,r11,r12
8000a28a:	c8 3b       	rjmp	8000a190 <__avr32_f64_mul+0x7c>
8000a28c:	f8 08 11 20 	rsub	r8,r12,32
8000a290:	f9 b9 00 00 	moveq	r9,0
8000a294:	c0 30       	breq	8000a29a <__avr32_f64_mul_res_subnormal+0x3c>
8000a296:	f6 08 09 49 	lsl	r9,r11,r8
8000a29a:	0e 46       	or	r6,r7
8000a29c:	ed ea 10 16 	or	r6,r6,r10<<0x1
8000a2a0:	f4 0c 0a 4a 	lsr	r10,r10,r12
8000a2a4:	f3 ea 10 07 	or	r7,r9,r10
8000a2a8:	f6 0c 0a 4a 	lsr	r10,r11,r12
8000a2ac:	30 0b       	mov	r11,0
8000a2ae:	c7 1b       	rjmp	8000a190 <__avr32_f64_mul+0x7c>

8000a2b0 <__avr32_f64_mul_res_zero>:
8000a2b0:	1c 9b       	mov	r11,lr
8000a2b2:	e6 1b 80 00 	andh	r11,0x8000,COH
8000a2b6:	30 0a       	mov	r10,0
8000a2b8:	d8 22       	popm	r4-r7,pc

8000a2ba <__avr32_f64_mul_res_nan>:
8000a2ba:	3f fb       	mov	r11,-1
8000a2bc:	3f fa       	mov	r10,-1
8000a2be:	d8 22       	popm	r4-r7,pc

8000a2c0 <__avr32_f64_mul_res_inf>:
8000a2c0:	f0 6b 00 00 	mov	r11,-1048576
8000a2c4:	ed be 00 1f 	bld	lr,0x1f
8000a2c8:	ef bb 00 1f 	bst	r11,0x1f
8000a2cc:	30 0a       	mov	r10,0
8000a2ce:	d8 22       	popm	r4-r7,pc

8000a2d0 <__avr32_f64_mul_op1_zero>:
8000a2d0:	f7 e9 20 0b 	eor	r11,r11,r9
8000a2d4:	e6 1b 80 00 	andh	r11,0x8000,COH
8000a2d8:	f9 d9 c2 8b 	bfextu	r12,r9,0x14,0xb
8000a2dc:	e0 4c 07 ff 	cp.w	r12,2047
8000a2e0:	5e 1c       	retne	r12
8000a2e2:	3f fa       	mov	r10,-1
8000a2e4:	3f fb       	mov	r11,-1
8000a2e6:	5e fc       	retal	r12
8000a2e8:	58 17       	cp.w	r7,1
8000a2ea:	58 09       	cp.w	r9,0
8000a2ec:	f5 b8 00 00 	subfeq	r8,0
8000a2f0:	1b 07       	ld.w	r7,sp++
8000a2f2:	1b 0e       	ld.w	lr,sp++
8000a2f4:	5e fc       	retal	r12
8000a2f6:	d7 03       	nop

8000a2f8 <__avr32_f64_sub_from_add>:
8000a2f8:	ee 19 80 00 	eorh	r9,0x8000

8000a2fc <__avr32_f64_sub>:
8000a2fc:	f7 e9 20 0c 	eor	r12,r11,r9
8000a300:	e0 86 00 ca 	brmi	8000a494 <__avr32_f64_add_from_sub>
8000a304:	eb cd 40 e0 	pushm	r5-r7,lr
8000a308:	16 9c       	mov	r12,r11
8000a30a:	e6 1c 80 00 	andh	r12,0x8000,COH
8000a30e:	bf db       	cbr	r11,0x1f
8000a310:	bf d9       	cbr	r9,0x1f
8000a312:	10 3a       	cp.w	r10,r8
8000a314:	f2 0b 13 00 	cpc	r11,r9
8000a318:	c0 92       	brcc	8000a32a <__avr32_f64_sub+0x2e>
8000a31a:	16 97       	mov	r7,r11
8000a31c:	12 9b       	mov	r11,r9
8000a31e:	0e 99       	mov	r9,r7
8000a320:	14 97       	mov	r7,r10
8000a322:	10 9a       	mov	r10,r8
8000a324:	0e 98       	mov	r8,r7
8000a326:	ee 1c 80 00 	eorh	r12,0x8000
8000a32a:	f6 07 16 14 	lsr	r7,r11,0x14
8000a32e:	ab 7b       	lsl	r11,0xb
8000a330:	f7 ea 13 5b 	or	r11,r11,r10>>0x15
8000a334:	ab 7a       	lsl	r10,0xb
8000a336:	bf bb       	sbr	r11,0x1f
8000a338:	f2 06 16 14 	lsr	r6,r9,0x14
8000a33c:	c4 50       	breq	8000a3c6 <__avr32_f64_sub_opL_subnormal>
8000a33e:	ab 79       	lsl	r9,0xb
8000a340:	f3 e8 13 59 	or	r9,r9,r8>>0x15
8000a344:	ab 78       	lsl	r8,0xb
8000a346:	bf b9       	sbr	r9,0x1f

8000a348 <__avr32_f64_sub_opL_subnormal_done>:
8000a348:	e0 47 07 ff 	cp.w	r7,2047
8000a34c:	c5 00       	breq	8000a3ec <__avr32_f64_sub_opH_nan_or_inf>
8000a34e:	0e 26       	rsub	r6,r7
8000a350:	c1 20       	breq	8000a374 <__avr32_f64_sub_shift_done>
8000a352:	ec 05 11 20 	rsub	r5,r6,32
8000a356:	e0 46 00 20 	cp.w	r6,32
8000a35a:	c7 d2       	brcc	8000a454 <__avr32_f64_sub_longshift>
8000a35c:	f0 05 09 4e 	lsl	lr,r8,r5
8000a360:	f2 05 09 45 	lsl	r5,r9,r5
8000a364:	f0 06 0a 48 	lsr	r8,r8,r6
8000a368:	f2 06 0a 49 	lsr	r9,r9,r6
8000a36c:	0a 48       	or	r8,r5
8000a36e:	58 0e       	cp.w	lr,0
8000a370:	5f 1e       	srne	lr
8000a372:	1c 48       	or	r8,lr

8000a374 <__avr32_f64_sub_shift_done>:
8000a374:	10 1a       	sub	r10,r8
8000a376:	f6 09 01 4b 	sbc	r11,r11,r9
8000a37a:	f6 06 12 00 	clz	r6,r11
8000a37e:	c0 e0       	breq	8000a39a <__avr32_f64_sub_longnormalize_done>
8000a380:	c7 93       	brcs	8000a472 <__avr32_f64_sub_longnormalize>
8000a382:	ec 0e 11 20 	rsub	lr,r6,32
8000a386:	f6 06 09 4b 	lsl	r11,r11,r6
8000a38a:	f4 0e 0a 4e 	lsr	lr,r10,lr
8000a38e:	1c 4b       	or	r11,lr
8000a390:	f4 06 09 4a 	lsl	r10,r10,r6
8000a394:	0c 17       	sub	r7,r6
8000a396:	e0 8a 00 3a 	brle	8000a40a <__avr32_f64_sub_subnormal_result>

8000a39a <__avr32_f64_sub_longnormalize_done>:
8000a39a:	f4 09 15 15 	lsl	r9,r10,0x15
8000a39e:	ab 9a       	lsr	r10,0xb
8000a3a0:	f5 eb 11 5a 	or	r10,r10,r11<<0x15
8000a3a4:	ab 9b       	lsr	r11,0xb
8000a3a6:	f7 d7 d2 8b 	bfins	r11,r7,0x14,0xb
8000a3aa:	18 4b       	or	r11,r12

8000a3ac <__avr32_f64_sub_round>:
8000a3ac:	30 07       	mov	r7,0
8000a3ae:	ea 17 80 00 	orh	r7,0x8000
8000a3b2:	ed ba 00 00 	bld	r10,0x0
8000a3b6:	f7 b7 01 ff 	subne	r7,-1
8000a3ba:	0e 39       	cp.w	r9,r7
8000a3bc:	5f 29       	srhs	r9
8000a3be:	12 0a       	add	r10,r9
8000a3c0:	5c 0b       	acr	r11
8000a3c2:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

8000a3c6 <__avr32_f64_sub_opL_subnormal>:
8000a3c6:	ab 79       	lsl	r9,0xb
8000a3c8:	f3 e8 13 59 	or	r9,r9,r8>>0x15
8000a3cc:	ab 78       	lsl	r8,0xb
8000a3ce:	f3 e8 10 0e 	or	lr,r9,r8
8000a3d2:	f9 b6 01 01 	movne	r6,1
8000a3d6:	ee 0e 11 00 	rsub	lr,r7,0
8000a3da:	f9 b7 00 01 	moveq	r7,1
8000a3de:	ef bb 00 1f 	bst	r11,0x1f
8000a3e2:	f7 ea 10 0e 	or	lr,r11,r10
8000a3e6:	f9 b7 00 00 	moveq	r7,0
8000a3ea:	ca fb       	rjmp	8000a348 <__avr32_f64_sub_opL_subnormal_done>

8000a3ec <__avr32_f64_sub_opH_nan_or_inf>:
8000a3ec:	bf db       	cbr	r11,0x1f
8000a3ee:	f7 ea 10 0e 	or	lr,r11,r10
8000a3f2:	c0 81       	brne	8000a402 <__avr32_f64_sub_return_nan>
8000a3f4:	e0 46 07 ff 	cp.w	r6,2047
8000a3f8:	c0 50       	breq	8000a402 <__avr32_f64_sub_return_nan>
8000a3fa:	f9 e7 11 4b 	or	r11,r12,r7<<0x14
8000a3fe:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

8000a402 <__avr32_f64_sub_return_nan>:
8000a402:	3f fa       	mov	r10,-1
8000a404:	3f fb       	mov	r11,-1
8000a406:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

8000a40a <__avr32_f64_sub_subnormal_result>:
8000a40a:	5c 37       	neg	r7
8000a40c:	2f f7       	sub	r7,-1
8000a40e:	f1 b7 04 c0 	satu	r7,0x6
8000a412:	e0 47 00 20 	cp.w	r7,32
8000a416:	c1 14       	brge	8000a438 <__avr32_f64_sub_subnormal_result+0x2e>
8000a418:	ee 08 11 20 	rsub	r8,r7,32
8000a41c:	f4 08 09 49 	lsl	r9,r10,r8
8000a420:	5f 16       	srne	r6
8000a422:	f4 07 0a 4a 	lsr	r10,r10,r7
8000a426:	0c 4a       	or	r10,r6
8000a428:	f6 08 09 49 	lsl	r9,r11,r8
8000a42c:	f5 e9 10 0a 	or	r10,r10,r9
8000a430:	f4 07 0a 4b 	lsr	r11,r10,r7
8000a434:	30 07       	mov	r7,0
8000a436:	cb 2b       	rjmp	8000a39a <__avr32_f64_sub_longnormalize_done>
8000a438:	ee 08 11 40 	rsub	r8,r7,64
8000a43c:	f6 08 09 49 	lsl	r9,r11,r8
8000a440:	14 49       	or	r9,r10
8000a442:	5f 16       	srne	r6
8000a444:	f6 07 0a 4a 	lsr	r10,r11,r7
8000a448:	0c 4a       	or	r10,r6
8000a44a:	30 0b       	mov	r11,0
8000a44c:	30 07       	mov	r7,0
8000a44e:	ca 6b       	rjmp	8000a39a <__avr32_f64_sub_longnormalize_done>
8000a450:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

8000a454 <__avr32_f64_sub_longshift>:
8000a454:	f1 b6 04 c0 	satu	r6,0x6
8000a458:	f0 0e 17 00 	moveq	lr,r8
8000a45c:	c0 40       	breq	8000a464 <__avr32_f64_sub_longshift+0x10>
8000a45e:	f2 05 09 4e 	lsl	lr,r9,r5
8000a462:	10 4e       	or	lr,r8
8000a464:	f2 06 0a 48 	lsr	r8,r9,r6
8000a468:	30 09       	mov	r9,0
8000a46a:	58 0e       	cp.w	lr,0
8000a46c:	5f 1e       	srne	lr
8000a46e:	1c 48       	or	r8,lr
8000a470:	c8 2b       	rjmp	8000a374 <__avr32_f64_sub_shift_done>

8000a472 <__avr32_f64_sub_longnormalize>:
8000a472:	f4 06 12 00 	clz	r6,r10
8000a476:	f9 b7 03 00 	movlo	r7,0
8000a47a:	f9 b6 03 00 	movlo	r6,0
8000a47e:	f9 bc 03 00 	movlo	r12,0
8000a482:	f7 b6 02 e0 	subhs	r6,-32
8000a486:	f4 06 09 4b 	lsl	r11,r10,r6
8000a48a:	30 0a       	mov	r10,0
8000a48c:	0c 17       	sub	r7,r6
8000a48e:	fe 9a ff be 	brle	8000a40a <__avr32_f64_sub_subnormal_result>
8000a492:	c8 4b       	rjmp	8000a39a <__avr32_f64_sub_longnormalize_done>

8000a494 <__avr32_f64_add_from_sub>:
8000a494:	ee 19 80 00 	eorh	r9,0x8000

8000a498 <__avr32_f64_add>:
8000a498:	f7 e9 20 0c 	eor	r12,r11,r9
8000a49c:	fe 96 ff 2e 	brmi	8000a2f8 <__avr32_f64_sub_from_add>
8000a4a0:	eb cd 40 e0 	pushm	r5-r7,lr
8000a4a4:	16 9c       	mov	r12,r11
8000a4a6:	e6 1c 80 00 	andh	r12,0x8000,COH
8000a4aa:	bf db       	cbr	r11,0x1f
8000a4ac:	bf d9       	cbr	r9,0x1f
8000a4ae:	12 3b       	cp.w	r11,r9
8000a4b0:	c0 72       	brcc	8000a4be <__avr32_f64_add+0x26>
8000a4b2:	16 97       	mov	r7,r11
8000a4b4:	12 9b       	mov	r11,r9
8000a4b6:	0e 99       	mov	r9,r7
8000a4b8:	14 97       	mov	r7,r10
8000a4ba:	10 9a       	mov	r10,r8
8000a4bc:	0e 98       	mov	r8,r7
8000a4be:	30 0e       	mov	lr,0
8000a4c0:	ef db c2 8b 	bfextu	r7,r11,0x14,0xb
8000a4c4:	f7 db c0 14 	bfextu	r11,r11,0x0,0x14
8000a4c8:	b5 ab       	sbr	r11,0x14
8000a4ca:	ed d9 c2 8b 	bfextu	r6,r9,0x14,0xb
8000a4ce:	c6 00       	breq	8000a58e <__avr32_f64_add_op2_subnormal>
8000a4d0:	f3 d9 c0 14 	bfextu	r9,r9,0x0,0x14
8000a4d4:	b5 a9       	sbr	r9,0x14
8000a4d6:	e0 47 07 ff 	cp.w	r7,2047
8000a4da:	c2 50       	breq	8000a524 <__avr32_f64_add_opH_nan_or_inf>
8000a4dc:	0e 26       	rsub	r6,r7
8000a4de:	c0 f0       	breq	8000a4fc <__avr32_f64_add_shift_done>
8000a4e0:	ec 05 11 20 	rsub	r5,r6,32
8000a4e4:	e0 46 00 20 	cp.w	r6,32
8000a4e8:	c3 62       	brcc	8000a554 <__avr32_f64_add_longshift>
8000a4ea:	f0 05 09 4e 	lsl	lr,r8,r5
8000a4ee:	f2 05 09 45 	lsl	r5,r9,r5
8000a4f2:	f0 06 0a 48 	lsr	r8,r8,r6
8000a4f6:	f2 06 0a 49 	lsr	r9,r9,r6
8000a4fa:	0a 48       	or	r8,r5

8000a4fc <__avr32_f64_add_shift_done>:
8000a4fc:	10 0a       	add	r10,r8
8000a4fe:	f6 09 00 4b 	adc	r11,r11,r9
8000a502:	ed bb 00 15 	bld	r11,0x15
8000a506:	c3 50       	breq	8000a570 <__avr32_f64_add_res_of>

8000a508 <__avr32_f64_add_res_of_done>:
8000a508:	f7 d7 d2 8b 	bfins	r11,r7,0x14,0xb
8000a50c:	18 4b       	or	r11,r12

8000a50e <__avr32_f64_add_round>:
8000a50e:	f9 da c0 01 	bfextu	r12,r10,0x0,0x1
8000a512:	18 4e       	or	lr,r12
8000a514:	ee 1e 80 00 	eorh	lr,0x8000
8000a518:	f1 be 04 20 	satu	lr,0x1
8000a51c:	1c 0a       	add	r10,lr
8000a51e:	5c 0b       	acr	r11
8000a520:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

8000a524 <__avr32_f64_add_opH_nan_or_inf>:
8000a524:	b5 cb       	cbr	r11,0x14
8000a526:	f7 ea 10 0e 	or	lr,r11,r10
8000a52a:	c1 11       	brne	8000a54c <__avr32_f64_add_return_nan>
8000a52c:	e0 46 07 ff 	cp.w	r6,2047
8000a530:	c0 30       	breq	8000a536 <__avr32_f64_add_opL_nan_or_inf>
8000a532:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

8000a536 <__avr32_f64_add_opL_nan_or_inf>:
8000a536:	b5 c9       	cbr	r9,0x14
8000a538:	f3 e8 10 0e 	or	lr,r9,r8
8000a53c:	c0 81       	brne	8000a54c <__avr32_f64_add_return_nan>
8000a53e:	30 0a       	mov	r10,0
8000a540:	30 0b       	mov	r11,0
8000a542:	ea 1b 7f f0 	orh	r11,0x7ff0
8000a546:	18 4b       	or	r11,r12
8000a548:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

8000a54c <__avr32_f64_add_return_nan>:
8000a54c:	3f fa       	mov	r10,-1
8000a54e:	3f fb       	mov	r11,-1
8000a550:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

8000a554 <__avr32_f64_add_longshift>:
8000a554:	f1 b6 04 c0 	satu	r6,0x6
8000a558:	f0 0e 17 00 	moveq	lr,r8
8000a55c:	c0 60       	breq	8000a568 <__avr32_f64_add_longshift+0x14>
8000a55e:	f2 05 09 4e 	lsl	lr,r9,r5
8000a562:	58 08       	cp.w	r8,0
8000a564:	5f 18       	srne	r8
8000a566:	10 4e       	or	lr,r8
8000a568:	f2 06 0a 48 	lsr	r8,r9,r6
8000a56c:	30 09       	mov	r9,0
8000a56e:	cc 7b       	rjmp	8000a4fc <__avr32_f64_add_shift_done>

8000a570 <__avr32_f64_add_res_of>:
8000a570:	fd ee 10 1e 	or	lr,lr,lr<<0x1
8000a574:	a1 9b       	lsr	r11,0x1
8000a576:	5d 0a       	ror	r10
8000a578:	5d 0e       	ror	lr
8000a57a:	2f f7       	sub	r7,-1
8000a57c:	e0 47 07 ff 	cp.w	r7,2047
8000a580:	f9 ba 00 00 	moveq	r10,0
8000a584:	f9 bb 00 00 	moveq	r11,0
8000a588:	f9 be 00 00 	moveq	lr,0
8000a58c:	cb eb       	rjmp	8000a508 <__avr32_f64_add_res_of_done>

8000a58e <__avr32_f64_add_op2_subnormal>:
8000a58e:	30 16       	mov	r6,1
8000a590:	58 07       	cp.w	r7,0
8000a592:	ca 21       	brne	8000a4d6 <__avr32_f64_add+0x3e>
8000a594:	b5 cb       	cbr	r11,0x14
8000a596:	10 0a       	add	r10,r8
8000a598:	f6 09 00 4b 	adc	r11,r11,r9
8000a59c:	18 4b       	or	r11,r12
8000a59e:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
8000a5a2:	58 17       	cp.w	r7,1
8000a5a4:	58 09       	cp.w	r9,0
8000a5a6:	f5 b8 00 00 	subfeq	r8,0
8000a5aa:	1b 07       	ld.w	r7,sp++
8000a5ac:	1b 0e       	ld.w	lr,sp++
8000a5ae:	5e fc       	retal	r12

8000a5b0 <__avr32_f64_to_u32>:
8000a5b0:	58 0b       	cp.w	r11,0
8000a5b2:	5e 6d       	retmi	0

8000a5b4 <__avr32_f64_to_s32>:
8000a5b4:	f6 0c 15 01 	lsl	r12,r11,0x1
8000a5b8:	b5 9c       	lsr	r12,0x15
8000a5ba:	e0 2c 03 ff 	sub	r12,1023
8000a5be:	5e 3d       	retlo	0
8000a5c0:	f8 0c 11 1f 	rsub	r12,r12,31
8000a5c4:	16 99       	mov	r9,r11
8000a5c6:	ab 7b       	lsl	r11,0xb
8000a5c8:	bf bb       	sbr	r11,0x1f
8000a5ca:	f7 ea 13 5b 	or	r11,r11,r10>>0x15
8000a5ce:	f6 0c 0a 4b 	lsr	r11,r11,r12
8000a5d2:	a1 79       	lsl	r9,0x1
8000a5d4:	5e 2b       	reths	r11
8000a5d6:	5c 3b       	neg	r11
8000a5d8:	5e fb       	retal	r11
8000a5da:	58 17       	cp.w	r7,1
8000a5dc:	58 09       	cp.w	r9,0
8000a5de:	f5 b8 00 00 	subfeq	r8,0
8000a5e2:	1b 07       	ld.w	r7,sp++
8000a5e4:	1b 0e       	ld.w	lr,sp++
8000a5e6:	5e fc       	retal	r12

8000a5e8 <__avr32_u32_to_f64>:
8000a5e8:	f8 cb 00 00 	sub	r11,r12,0
8000a5ec:	30 0c       	mov	r12,0
8000a5ee:	c0 38       	rjmp	8000a5f4 <__avr32_s32_to_f64+0x4>

8000a5f0 <__avr32_s32_to_f64>:
8000a5f0:	18 9b       	mov	r11,r12
8000a5f2:	5c 4b       	abs	r11
8000a5f4:	30 0a       	mov	r10,0
8000a5f6:	5e 0b       	reteq	r11
8000a5f8:	d4 01       	pushm	lr
8000a5fa:	e0 69 04 1e 	mov	r9,1054
8000a5fe:	f6 08 12 00 	clz	r8,r11
8000a602:	c1 70       	breq	8000a630 <__avr32_s32_to_f64+0x40>
8000a604:	c0 c3       	brcs	8000a61c <__avr32_s32_to_f64+0x2c>
8000a606:	f0 0e 11 20 	rsub	lr,r8,32
8000a60a:	f6 08 09 4b 	lsl	r11,r11,r8
8000a60e:	f4 0e 0a 4e 	lsr	lr,r10,lr
8000a612:	1c 4b       	or	r11,lr
8000a614:	f4 08 09 4a 	lsl	r10,r10,r8
8000a618:	10 19       	sub	r9,r8
8000a61a:	c0 b8       	rjmp	8000a630 <__avr32_s32_to_f64+0x40>
8000a61c:	f4 08 12 00 	clz	r8,r10
8000a620:	f9 b8 03 00 	movlo	r8,0
8000a624:	f7 b8 02 e0 	subhs	r8,-32
8000a628:	f4 08 09 4b 	lsl	r11,r10,r8
8000a62c:	30 0a       	mov	r10,0
8000a62e:	10 19       	sub	r9,r8
8000a630:	58 09       	cp.w	r9,0
8000a632:	e0 89 00 30 	brgt	8000a692 <__avr32_s32_to_f64+0xa2>
8000a636:	5c 39       	neg	r9
8000a638:	2f f9       	sub	r9,-1
8000a63a:	e0 49 00 36 	cp.w	r9,54
8000a63e:	c0 43       	brcs	8000a646 <__avr32_s32_to_f64+0x56>
8000a640:	30 0b       	mov	r11,0
8000a642:	30 0a       	mov	r10,0
8000a644:	c2 68       	rjmp	8000a690 <__avr32_s32_to_f64+0xa0>
8000a646:	2f 69       	sub	r9,-10
8000a648:	f2 08 11 20 	rsub	r8,r9,32
8000a64c:	e0 49 00 20 	cp.w	r9,32
8000a650:	c0 b2       	brcc	8000a666 <__avr32_s32_to_f64+0x76>
8000a652:	f4 08 09 4e 	lsl	lr,r10,r8
8000a656:	f6 08 09 48 	lsl	r8,r11,r8
8000a65a:	f4 09 0a 4a 	lsr	r10,r10,r9
8000a65e:	f6 09 0a 4b 	lsr	r11,r11,r9
8000a662:	10 4b       	or	r11,r8
8000a664:	c0 88       	rjmp	8000a674 <__avr32_s32_to_f64+0x84>
8000a666:	f6 08 09 4e 	lsl	lr,r11,r8
8000a66a:	14 4e       	or	lr,r10
8000a66c:	16 9a       	mov	r10,r11
8000a66e:	30 0b       	mov	r11,0
8000a670:	f4 09 0a 4a 	lsr	r10,r10,r9
8000a674:	ed ba 00 00 	bld	r10,0x0
8000a678:	c0 92       	brcc	8000a68a <__avr32_s32_to_f64+0x9a>
8000a67a:	1c 7e       	tst	lr,lr
8000a67c:	c0 41       	brne	8000a684 <__avr32_s32_to_f64+0x94>
8000a67e:	ed ba 00 01 	bld	r10,0x1
8000a682:	c0 42       	brcc	8000a68a <__avr32_s32_to_f64+0x9a>
8000a684:	2f fa       	sub	r10,-1
8000a686:	f7 bb 02 ff 	subhs	r11,-1
8000a68a:	5c fc       	rol	r12
8000a68c:	5d 0b       	ror	r11
8000a68e:	5d 0a       	ror	r10
8000a690:	d8 02       	popm	pc
8000a692:	e0 68 03 ff 	mov	r8,1023
8000a696:	ed ba 00 0b 	bld	r10,0xb
8000a69a:	f7 b8 00 ff 	subeq	r8,-1
8000a69e:	10 0a       	add	r10,r8
8000a6a0:	5c 0b       	acr	r11
8000a6a2:	f7 b9 03 fe 	sublo	r9,-2
8000a6a6:	e0 49 07 ff 	cp.w	r9,2047
8000a6aa:	c0 65       	brlt	8000a6b6 <__avr32_s32_to_f64+0xc6>
8000a6ac:	30 0a       	mov	r10,0
8000a6ae:	30 0b       	mov	r11,0
8000a6b0:	ea 1b ff e0 	orh	r11,0xffe0
8000a6b4:	c0 c8       	rjmp	8000a6cc <__floatsidf_return_op1>
8000a6b6:	ed bb 00 1f 	bld	r11,0x1f
8000a6ba:	f7 b9 01 01 	subne	r9,1
8000a6be:	ab 9a       	lsr	r10,0xb
8000a6c0:	f5 eb 11 5a 	or	r10,r10,r11<<0x15
8000a6c4:	a1 7b       	lsl	r11,0x1
8000a6c6:	ab 9b       	lsr	r11,0xb
8000a6c8:	f7 e9 11 5b 	or	r11,r11,r9<<0x15

8000a6cc <__floatsidf_return_op1>:
8000a6cc:	a1 7c       	lsl	r12,0x1
8000a6ce:	5d 0b       	ror	r11
8000a6d0:	d8 02       	popm	pc
8000a6d2:	58 17       	cp.w	r7,1
8000a6d4:	58 09       	cp.w	r9,0
8000a6d6:	f5 b8 00 00 	subfeq	r8,0
8000a6da:	1b 07       	ld.w	r7,sp++
8000a6dc:	1b 0e       	ld.w	lr,sp++
8000a6de:	5e fc       	retal	r12

8000a6e0 <__avr32_f64_cmp_eq>:
8000a6e0:	10 3a       	cp.w	r10,r8
8000a6e2:	f2 0b 13 00 	cpc	r11,r9
8000a6e6:	c0 80       	breq	8000a6f6 <__avr32_f64_cmp_eq+0x16>
8000a6e8:	a1 7b       	lsl	r11,0x1
8000a6ea:	a1 79       	lsl	r9,0x1
8000a6ec:	14 4b       	or	r11,r10
8000a6ee:	12 4b       	or	r11,r9
8000a6f0:	10 4b       	or	r11,r8
8000a6f2:	5e 0f       	reteq	1
8000a6f4:	5e fd       	retal	0
8000a6f6:	a1 7b       	lsl	r11,0x1
8000a6f8:	30 0c       	mov	r12,0
8000a6fa:	ea 1c ff e0 	orh	r12,0xffe0
8000a6fe:	58 0a       	cp.w	r10,0
8000a700:	f8 0b 13 00 	cpc	r11,r12
8000a704:	5e 8f       	retls	1
8000a706:	5e fd       	retal	0
8000a708:	58 17       	cp.w	r7,1
8000a70a:	58 09       	cp.w	r9,0
8000a70c:	f5 b8 00 00 	subfeq	r8,0
8000a710:	1b 07       	ld.w	r7,sp++
8000a712:	1b 0e       	ld.w	lr,sp++
8000a714:	5e fc       	retal	r12

8000a716 <__avr32_f64_cmp_ge>:
8000a716:	1a de       	st.w	--sp,lr
8000a718:	1a d7       	st.w	--sp,r7
8000a71a:	a1 7b       	lsl	r11,0x1
8000a71c:	5f 3c       	srlo	r12
8000a71e:	a1 79       	lsl	r9,0x1
8000a720:	5f 37       	srlo	r7
8000a722:	5c fc       	rol	r12
8000a724:	30 0e       	mov	lr,0
8000a726:	ea 1e ff e0 	orh	lr,0xffe0
8000a72a:	58 0a       	cp.w	r10,0
8000a72c:	fc 0b 13 00 	cpc	r11,lr
8000a730:	e0 8b 00 1d 	brhi	8000a76a <__avr32_f64_cmp_ge+0x54>
8000a734:	58 08       	cp.w	r8,0
8000a736:	fc 09 13 00 	cpc	r9,lr
8000a73a:	e0 8b 00 18 	brhi	8000a76a <__avr32_f64_cmp_ge+0x54>
8000a73e:	58 0b       	cp.w	r11,0
8000a740:	f5 ba 00 00 	subfeq	r10,0
8000a744:	c1 50       	breq	8000a76e <__avr32_f64_cmp_ge+0x58>
8000a746:	1b 07       	ld.w	r7,sp++
8000a748:	1b 0e       	ld.w	lr,sp++
8000a74a:	58 3c       	cp.w	r12,3
8000a74c:	c0 a0       	breq	8000a760 <__avr32_f64_cmp_ge+0x4a>
8000a74e:	58 1c       	cp.w	r12,1
8000a750:	c0 33       	brcs	8000a756 <__avr32_f64_cmp_ge+0x40>
8000a752:	5e 0f       	reteq	1
8000a754:	5e 1d       	retne	0
8000a756:	10 3a       	cp.w	r10,r8
8000a758:	f2 0b 13 00 	cpc	r11,r9
8000a75c:	5e 2f       	reths	1
8000a75e:	5e 3d       	retlo	0
8000a760:	14 38       	cp.w	r8,r10
8000a762:	f6 09 13 00 	cpc	r9,r11
8000a766:	5e 2f       	reths	1
8000a768:	5e 3d       	retlo	0
8000a76a:	1b 07       	ld.w	r7,sp++
8000a76c:	d8 0a       	popm	pc,r12=0
8000a76e:	58 17       	cp.w	r7,1
8000a770:	5f 0c       	sreq	r12
8000a772:	58 09       	cp.w	r9,0
8000a774:	f5 b8 00 00 	subfeq	r8,0
8000a778:	1b 07       	ld.w	r7,sp++
8000a77a:	1b 0e       	ld.w	lr,sp++
8000a77c:	5e 0f       	reteq	1
8000a77e:	5e fc       	retal	r12

8000a780 <__avr32_f64_cmp_lt>:
8000a780:	1a de       	st.w	--sp,lr
8000a782:	1a d7       	st.w	--sp,r7
8000a784:	a1 7b       	lsl	r11,0x1
8000a786:	5f 3c       	srlo	r12
8000a788:	a1 79       	lsl	r9,0x1
8000a78a:	5f 37       	srlo	r7
8000a78c:	5c fc       	rol	r12
8000a78e:	30 0e       	mov	lr,0
8000a790:	ea 1e ff e0 	orh	lr,0xffe0
8000a794:	58 0a       	cp.w	r10,0
8000a796:	fc 0b 13 00 	cpc	r11,lr
8000a79a:	e0 8b 00 1d 	brhi	8000a7d4 <__avr32_f64_cmp_lt+0x54>
8000a79e:	58 08       	cp.w	r8,0
8000a7a0:	fc 09 13 00 	cpc	r9,lr
8000a7a4:	e0 8b 00 18 	brhi	8000a7d4 <__avr32_f64_cmp_lt+0x54>
8000a7a8:	58 0b       	cp.w	r11,0
8000a7aa:	f5 ba 00 00 	subfeq	r10,0
8000a7ae:	c1 50       	breq	8000a7d8 <__avr32_f64_cmp_lt+0x58>
8000a7b0:	1b 07       	ld.w	r7,sp++
8000a7b2:	1b 0e       	ld.w	lr,sp++
8000a7b4:	58 3c       	cp.w	r12,3
8000a7b6:	c0 a0       	breq	8000a7ca <__avr32_f64_cmp_lt+0x4a>
8000a7b8:	58 1c       	cp.w	r12,1
8000a7ba:	c0 33       	brcs	8000a7c0 <__avr32_f64_cmp_lt+0x40>
8000a7bc:	5e 0d       	reteq	0
8000a7be:	5e 1f       	retne	1
8000a7c0:	10 3a       	cp.w	r10,r8
8000a7c2:	f2 0b 13 00 	cpc	r11,r9
8000a7c6:	5e 2d       	reths	0
8000a7c8:	5e 3f       	retlo	1
8000a7ca:	14 38       	cp.w	r8,r10
8000a7cc:	f6 09 13 00 	cpc	r9,r11
8000a7d0:	5e 2d       	reths	0
8000a7d2:	5e 3f       	retlo	1
8000a7d4:	1b 07       	ld.w	r7,sp++
8000a7d6:	d8 0a       	popm	pc,r12=0
8000a7d8:	58 17       	cp.w	r7,1
8000a7da:	5f 1c       	srne	r12
8000a7dc:	58 09       	cp.w	r9,0
8000a7de:	f5 b8 00 00 	subfeq	r8,0
8000a7e2:	1b 07       	ld.w	r7,sp++
8000a7e4:	1b 0e       	ld.w	lr,sp++
8000a7e6:	5e 0d       	reteq	0
8000a7e8:	5e fc       	retal	r12
8000a7ea:	d7 03       	nop
8000a7ec:	58 17       	cp.w	r7,1
8000a7ee:	58 09       	cp.w	r9,0
8000a7f0:	f5 b8 00 00 	subfeq	r8,0
8000a7f4:	1b 07       	ld.w	r7,sp++
8000a7f6:	1b 0e       	ld.w	lr,sp++
8000a7f8:	5e fc       	retal	r12
8000a7fa:	d7 03       	nop

8000a7fc <__avr32_f64_div>:
8000a7fc:	eb cd 40 ff 	pushm	r0-r7,lr
8000a800:	f7 e9 20 0e 	eor	lr,r11,r9
8000a804:	f6 07 16 14 	lsr	r7,r11,0x14
8000a808:	a9 7b       	lsl	r11,0x9
8000a80a:	f7 ea 13 7b 	or	r11,r11,r10>>0x17
8000a80e:	a9 7a       	lsl	r10,0x9
8000a810:	bd bb       	sbr	r11,0x1d
8000a812:	e4 1b 3f ff 	andh	r11,0x3fff
8000a816:	ab d7       	cbr	r7,0xb
8000a818:	e0 80 00 cd 	breq	8000a9b2 <__avr32_f64_div_round_subnormal+0x54>
8000a81c:	e0 47 07 ff 	cp.w	r7,2047
8000a820:	e0 84 00 b6 	brge	8000a98c <__avr32_f64_div_round_subnormal+0x2e>
8000a824:	f2 06 16 14 	lsr	r6,r9,0x14
8000a828:	a9 79       	lsl	r9,0x9
8000a82a:	f3 e8 13 79 	or	r9,r9,r8>>0x17
8000a82e:	a9 78       	lsl	r8,0x9
8000a830:	bd b9       	sbr	r9,0x1d
8000a832:	e4 19 3f ff 	andh	r9,0x3fff
8000a836:	ab d6       	cbr	r6,0xb
8000a838:	e0 80 00 e3 	breq	8000a9fe <__avr32_f64_div_round_subnormal+0xa0>
8000a83c:	e0 46 07 ff 	cp.w	r6,2047
8000a840:	e0 84 00 b3 	brge	8000a9a6 <__avr32_f64_div_round_subnormal+0x48>
8000a844:	0c 17       	sub	r7,r6
8000a846:	fe 37 fc 01 	sub	r7,-1023
8000a84a:	30 0c       	mov	r12,0
8000a84c:	ea 1c 80 00 	orh	r12,0x8000
8000a850:	f8 03 16 01 	lsr	r3,r12,0x1
8000a854:	e9 d9 c3 62 	bfextu	r4,r9,0x1b,0x2
8000a858:	5c d4       	com	r4
8000a85a:	e7 d4 d3 82 	bfins	r3,r4,0x1c,0x2
8000a85e:	e6 09 06 44 	mulu.d	r4,r3,r9
8000a862:	f8 05 01 25 	sub	r5,r12,r5<<0x2
8000a866:	e6 05 06 44 	mulu.d	r4,r3,r5
8000a86a:	ea 03 15 02 	lsl	r3,r5,0x2
8000a86e:	e6 09 06 44 	mulu.d	r4,r3,r9
8000a872:	f8 05 01 25 	sub	r5,r12,r5<<0x2
8000a876:	e6 05 06 44 	mulu.d	r4,r3,r5
8000a87a:	ea 03 15 02 	lsl	r3,r5,0x2
8000a87e:	e6 09 06 44 	mulu.d	r4,r3,r9
8000a882:	f8 05 01 25 	sub	r5,r12,r5<<0x2
8000a886:	e6 05 06 44 	mulu.d	r4,r3,r5
8000a88a:	ea 03 15 02 	lsl	r3,r5,0x2
8000a88e:	e6 08 06 40 	mulu.d	r0,r3,r8
8000a892:	e4 09 07 40 	macu.d	r0,r2,r9
8000a896:	e6 09 06 44 	mulu.d	r4,r3,r9
8000a89a:	02 04       	add	r4,r1
8000a89c:	5c 05       	acr	r5
8000a89e:	a3 65       	lsl	r5,0x2
8000a8a0:	eb e4 13 e5 	or	r5,r5,r4>>0x1e
8000a8a4:	a3 64       	lsl	r4,0x2
8000a8a6:	5c 34       	neg	r4
8000a8a8:	f8 05 01 45 	sbc	r5,r12,r5
8000a8ac:	e6 04 06 40 	mulu.d	r0,r3,r4
8000a8b0:	e4 05 07 40 	macu.d	r0,r2,r5
8000a8b4:	e6 05 06 44 	mulu.d	r4,r3,r5
8000a8b8:	02 04       	add	r4,r1
8000a8ba:	5c 05       	acr	r5
8000a8bc:	ea 03 15 02 	lsl	r3,r5,0x2
8000a8c0:	e7 e4 13 e3 	or	r3,r3,r4>>0x1e
8000a8c4:	e8 02 15 02 	lsl	r2,r4,0x2
8000a8c8:	e6 08 06 40 	mulu.d	r0,r3,r8
8000a8cc:	e4 09 07 40 	macu.d	r0,r2,r9
8000a8d0:	e6 09 06 44 	mulu.d	r4,r3,r9
8000a8d4:	02 04       	add	r4,r1
8000a8d6:	5c 05       	acr	r5
8000a8d8:	a3 65       	lsl	r5,0x2
8000a8da:	eb e4 13 e5 	or	r5,r5,r4>>0x1e
8000a8de:	a3 64       	lsl	r4,0x2
8000a8e0:	5c 34       	neg	r4
8000a8e2:	f8 05 01 45 	sbc	r5,r12,r5
8000a8e6:	e6 04 06 40 	mulu.d	r0,r3,r4
8000a8ea:	e4 05 07 40 	macu.d	r0,r2,r5
8000a8ee:	e6 05 06 44 	mulu.d	r4,r3,r5
8000a8f2:	02 04       	add	r4,r1
8000a8f4:	5c 05       	acr	r5
8000a8f6:	ea 03 15 02 	lsl	r3,r5,0x2
8000a8fa:	e7 e4 13 e3 	or	r3,r3,r4>>0x1e
8000a8fe:	e8 02 15 02 	lsl	r2,r4,0x2
8000a902:	e6 0a 06 40 	mulu.d	r0,r3,r10
8000a906:	e4 0b 07 40 	macu.d	r0,r2,r11
8000a90a:	e6 0b 06 42 	mulu.d	r2,r3,r11
8000a90e:	02 02       	add	r2,r1
8000a910:	5c 03       	acr	r3
8000a912:	ed b3 00 1c 	bld	r3,0x1c
8000a916:	c0 90       	breq	8000a928 <__avr32_f64_div+0x12c>
8000a918:	a1 72       	lsl	r2,0x1
8000a91a:	5c f3       	rol	r3
8000a91c:	20 17       	sub	r7,1
8000a91e:	a3 9a       	lsr	r10,0x3
8000a920:	f5 eb 11 da 	or	r10,r10,r11<<0x1d
8000a924:	a3 9b       	lsr	r11,0x3
8000a926:	c0 58       	rjmp	8000a930 <__avr32_f64_div+0x134>
8000a928:	a5 8a       	lsr	r10,0x4
8000a92a:	f5 eb 11 ca 	or	r10,r10,r11<<0x1c
8000a92e:	a5 8b       	lsr	r11,0x4
8000a930:	58 07       	cp.w	r7,0
8000a932:	e0 8a 00 8b 	brle	8000aa48 <__avr32_f64_div_res_subnormal>
8000a936:	e0 12 ff 00 	andl	r2,0xff00
8000a93a:	e8 12 00 80 	orl	r2,0x80
8000a93e:	e6 08 06 40 	mulu.d	r0,r3,r8
8000a942:	e4 09 07 40 	macu.d	r0,r2,r9
8000a946:	e4 08 06 44 	mulu.d	r4,r2,r8
8000a94a:	e6 09 06 48 	mulu.d	r8,r3,r9
8000a94e:	00 05       	add	r5,r0
8000a950:	f0 01 00 48 	adc	r8,r8,r1
8000a954:	5c 09       	acr	r9
8000a956:	f9 d2 c1 01 	bfextu	r12,r2,0x8,0x1
8000a95a:	58 04       	cp.w	r4,0
8000a95c:	5c 25       	cpc	r5

8000a95e <__avr32_f64_div_round_subnormal>:
8000a95e:	f4 08 13 00 	cpc	r8,r10
8000a962:	f6 09 13 00 	cpc	r9,r11
8000a966:	5f 36       	srlo	r6
8000a968:	f8 06 17 00 	moveq	r6,r12
8000a96c:	e4 0a 16 08 	lsr	r10,r2,0x8
8000a970:	f5 e3 11 8a 	or	r10,r10,r3<<0x18
8000a974:	e6 0b 16 08 	lsr	r11,r3,0x8
8000a978:	f7 d7 d2 8b 	bfins	r11,r7,0x14,0xb
8000a97c:	ed be 00 1f 	bld	lr,0x1f
8000a980:	ef bb 00 1f 	bst	r11,0x1f
8000a984:	0c 0a       	add	r10,r6
8000a986:	5c 0b       	acr	r11
8000a988:	e3 cd 80 ff 	ldm	sp++,r0-r7,pc
8000a98c:	e4 1b 00 0f 	andh	r11,0xf
8000a990:	14 4b       	or	r11,r10
8000a992:	e0 81 00 a7 	brne	8000aae0 <__avr32_f64_div_res_subnormal+0x98>
8000a996:	f2 06 16 14 	lsr	r6,r9,0x14
8000a99a:	ab d6       	cbr	r6,0xb
8000a99c:	e0 46 07 ff 	cp.w	r6,2047
8000a9a0:	e0 81 00 a4 	brne	8000aae8 <__avr32_f64_div_res_subnormal+0xa0>
8000a9a4:	c9 e8       	rjmp	8000aae0 <__avr32_f64_div_res_subnormal+0x98>
8000a9a6:	e4 19 00 0f 	andh	r9,0xf
8000a9aa:	10 49       	or	r9,r8
8000a9ac:	e0 81 00 9a 	brne	8000aae0 <__avr32_f64_div_res_subnormal+0x98>
8000a9b0:	c9 28       	rjmp	8000aad4 <__avr32_f64_div_res_subnormal+0x8c>
8000a9b2:	a3 7b       	lsl	r11,0x3
8000a9b4:	f7 ea 13 db 	or	r11,r11,r10>>0x1d
8000a9b8:	a3 7a       	lsl	r10,0x3
8000a9ba:	f5 eb 10 04 	or	r4,r10,r11
8000a9be:	e0 80 00 a0 	breq	8000aafe <__avr32_f64_div_op1_zero>
8000a9c2:	f6 04 12 00 	clz	r4,r11
8000a9c6:	c1 70       	breq	8000a9f4 <__avr32_f64_div_round_subnormal+0x96>
8000a9c8:	c0 c3       	brcs	8000a9e0 <__avr32_f64_div_round_subnormal+0x82>
8000a9ca:	e8 05 11 20 	rsub	r5,r4,32
8000a9ce:	f6 04 09 4b 	lsl	r11,r11,r4
8000a9d2:	f4 05 0a 45 	lsr	r5,r10,r5
8000a9d6:	0a 4b       	or	r11,r5
8000a9d8:	f4 04 09 4a 	lsl	r10,r10,r4
8000a9dc:	08 17       	sub	r7,r4
8000a9de:	c0 b8       	rjmp	8000a9f4 <__avr32_f64_div_round_subnormal+0x96>
8000a9e0:	f4 04 12 00 	clz	r4,r10
8000a9e4:	f9 b4 03 00 	movlo	r4,0
8000a9e8:	f7 b4 02 e0 	subhs	r4,-32
8000a9ec:	f4 04 09 4b 	lsl	r11,r10,r4
8000a9f0:	30 0a       	mov	r10,0
8000a9f2:	08 17       	sub	r7,r4
8000a9f4:	a3 8a       	lsr	r10,0x2
8000a9f6:	f5 eb 11 ea 	or	r10,r10,r11<<0x1e
8000a9fa:	a3 8b       	lsr	r11,0x2
8000a9fc:	c1 0b       	rjmp	8000a81c <__avr32_f64_div+0x20>
8000a9fe:	a3 79       	lsl	r9,0x3
8000aa00:	f3 e8 13 d9 	or	r9,r9,r8>>0x1d
8000aa04:	a3 78       	lsl	r8,0x3
8000aa06:	f3 e8 10 04 	or	r4,r9,r8
8000aa0a:	c6 f0       	breq	8000aae8 <__avr32_f64_div_res_subnormal+0xa0>
8000aa0c:	f2 04 12 00 	clz	r4,r9
8000aa10:	c1 70       	breq	8000aa3e <__avr32_f64_div_round_subnormal+0xe0>
8000aa12:	c0 c3       	brcs	8000aa2a <__avr32_f64_div_round_subnormal+0xcc>
8000aa14:	e8 05 11 20 	rsub	r5,r4,32
8000aa18:	f2 04 09 49 	lsl	r9,r9,r4
8000aa1c:	f0 05 0a 45 	lsr	r5,r8,r5
8000aa20:	0a 49       	or	r9,r5
8000aa22:	f0 04 09 48 	lsl	r8,r8,r4
8000aa26:	08 16       	sub	r6,r4
8000aa28:	c0 b8       	rjmp	8000aa3e <__avr32_f64_div_round_subnormal+0xe0>
8000aa2a:	f0 04 12 00 	clz	r4,r8
8000aa2e:	f9 b4 03 00 	movlo	r4,0
8000aa32:	f7 b4 02 e0 	subhs	r4,-32
8000aa36:	f0 04 09 49 	lsl	r9,r8,r4
8000aa3a:	30 08       	mov	r8,0
8000aa3c:	08 16       	sub	r6,r4
8000aa3e:	a3 88       	lsr	r8,0x2
8000aa40:	f1 e9 11 e8 	or	r8,r8,r9<<0x1e
8000aa44:	a3 89       	lsr	r9,0x2
8000aa46:	cf ba       	rjmp	8000a83c <__avr32_f64_div+0x40>

8000aa48 <__avr32_f64_div_res_subnormal>:
8000aa48:	5c 37       	neg	r7
8000aa4a:	2f f7       	sub	r7,-1
8000aa4c:	f1 b7 04 c0 	satu	r7,0x6
8000aa50:	e0 47 00 20 	cp.w	r7,32
8000aa54:	c1 54       	brge	8000aa7e <__avr32_f64_div_res_subnormal+0x36>
8000aa56:	ee 06 11 20 	rsub	r6,r7,32
8000aa5a:	e4 07 0a 42 	lsr	r2,r2,r7
8000aa5e:	e6 06 09 4c 	lsl	r12,r3,r6
8000aa62:	18 42       	or	r2,r12
8000aa64:	e6 07 0a 43 	lsr	r3,r3,r7
8000aa68:	f4 06 09 41 	lsl	r1,r10,r6
8000aa6c:	f4 07 0a 4a 	lsr	r10,r10,r7
8000aa70:	f6 06 09 4c 	lsl	r12,r11,r6
8000aa74:	18 4a       	or	r10,r12
8000aa76:	f6 07 0a 4b 	lsr	r11,r11,r7
8000aa7a:	30 00       	mov	r0,0
8000aa7c:	c1 58       	rjmp	8000aaa6 <__avr32_f64_div_res_subnormal+0x5e>
8000aa7e:	ee 06 11 20 	rsub	r6,r7,32
8000aa82:	f9 b0 00 00 	moveq	r0,0
8000aa86:	f9 bc 00 00 	moveq	r12,0
8000aa8a:	c0 50       	breq	8000aa94 <__avr32_f64_div_res_subnormal+0x4c>
8000aa8c:	f4 06 09 40 	lsl	r0,r10,r6
8000aa90:	f6 06 09 4c 	lsl	r12,r11,r6
8000aa94:	e6 07 0a 42 	lsr	r2,r3,r7
8000aa98:	30 03       	mov	r3,0
8000aa9a:	f4 07 0a 41 	lsr	r1,r10,r7
8000aa9e:	18 41       	or	r1,r12
8000aaa0:	f6 07 0a 4a 	lsr	r10,r11,r7
8000aaa4:	30 0b       	mov	r11,0
8000aaa6:	e0 12 ff 00 	andl	r2,0xff00
8000aaaa:	e8 12 00 80 	orl	r2,0x80
8000aaae:	e6 08 06 46 	mulu.d	r6,r3,r8
8000aab2:	e4 09 07 46 	macu.d	r6,r2,r9
8000aab6:	e4 08 06 44 	mulu.d	r4,r2,r8
8000aaba:	e6 09 06 48 	mulu.d	r8,r3,r9
8000aabe:	0c 05       	add	r5,r6
8000aac0:	f0 07 00 48 	adc	r8,r8,r7
8000aac4:	5c 09       	acr	r9
8000aac6:	30 07       	mov	r7,0
8000aac8:	f9 d2 c1 01 	bfextu	r12,r2,0x8,0x1
8000aacc:	00 34       	cp.w	r4,r0
8000aace:	e2 05 13 00 	cpc	r5,r1
8000aad2:	c4 6b       	rjmp	8000a95e <__avr32_f64_div_round_subnormal>
8000aad4:	1c 9b       	mov	r11,lr
8000aad6:	e6 1b 80 00 	andh	r11,0x8000,COH
8000aada:	30 0a       	mov	r10,0
8000aadc:	e3 cd 80 ff 	ldm	sp++,r0-r7,pc
8000aae0:	3f fb       	mov	r11,-1
8000aae2:	30 0a       	mov	r10,0
8000aae4:	e3 cd 80 ff 	ldm	sp++,r0-r7,pc
8000aae8:	f5 eb 10 04 	or	r4,r10,r11
8000aaec:	c0 90       	breq	8000aafe <__avr32_f64_div_op1_zero>
8000aaee:	1c 9b       	mov	r11,lr
8000aaf0:	e6 1b 80 00 	andh	r11,0x8000,COH
8000aaf4:	ea 1b 7f f0 	orh	r11,0x7ff0
8000aaf8:	30 0a       	mov	r10,0
8000aafa:	e3 cd 80 ff 	ldm	sp++,r0-r7,pc

8000aafe <__avr32_f64_div_op1_zero>:
8000aafe:	f1 e9 10 15 	or	r5,r8,r9<<0x1
8000ab02:	ce f0       	breq	8000aae0 <__avr32_f64_div_res_subnormal+0x98>
8000ab04:	e9 d9 c2 8b 	bfextu	r4,r9,0x14,0xb
8000ab08:	e0 44 07 ff 	cp.w	r4,2047
8000ab0c:	ce 41       	brne	8000aad4 <__avr32_f64_div_res_subnormal+0x8c>
8000ab0e:	f1 e9 10 c5 	or	r5,r8,r9<<0xc
8000ab12:	ce 10       	breq	8000aad4 <__avr32_f64_div_res_subnormal+0x8c>
8000ab14:	ce 6b       	rjmp	8000aae0 <__avr32_f64_div_res_subnormal+0x98>
8000ab16:	d7 03       	nop

8000ab18 <__avr32_umod64>:
8000ab18:	eb cd 40 ef 	pushm	r0-r3,r5-r7,lr
8000ab1c:	1a 97       	mov	r7,sp
8000ab1e:	20 1d       	sub	sp,4
8000ab20:	10 95       	mov	r5,r8
8000ab22:	10 9c       	mov	r12,r8
8000ab24:	14 92       	mov	r2,r10
8000ab26:	12 9e       	mov	lr,r9
8000ab28:	14 93       	mov	r3,r10
8000ab2a:	16 98       	mov	r8,r11
8000ab2c:	16 96       	mov	r6,r11
8000ab2e:	58 09       	cp.w	r9,0
8000ab30:	c4 51       	brne	8000abba <__avr32_umod64+0xa2>
8000ab32:	16 35       	cp.w	r5,r11
8000ab34:	e0 8b 00 93 	brhi	8000ac5a <__avr32_umod64+0x142>
8000ab38:	58 05       	cp.w	r5,0
8000ab3a:	c0 51       	brne	8000ab44 <__avr32_umod64+0x2c>
8000ab3c:	30 19       	mov	r9,1
8000ab3e:	f2 05 0d 08 	divu	r8,r9,r5
8000ab42:	10 9c       	mov	r12,r8
8000ab44:	f8 0e 12 00 	clz	lr,r12
8000ab48:	c5 01       	brne	8000abe8 <__avr32_umod64+0xd0>
8000ab4a:	ec 0c 01 0b 	sub	r11,r6,r12
8000ab4e:	eb dc c0 10 	bfextu	r5,r12,0x0,0x10
8000ab52:	f8 06 16 10 	lsr	r6,r12,0x10
8000ab56:	e6 0a 16 10 	lsr	r10,r3,0x10
8000ab5a:	f6 06 0d 08 	divu	r8,r11,r6
8000ab5e:	f5 e9 11 0b 	or	r11,r10,r9<<0x10
8000ab62:	ea 08 02 4a 	mul	r10,r5,r8
8000ab66:	16 3a       	cp.w	r10,r11
8000ab68:	e0 88 00 0c 	brls	8000ab80 <__avr32_umod64+0x68>
8000ab6c:	18 0b       	add	r11,r12
8000ab6e:	16 3c       	cp.w	r12,r11
8000ab70:	e0 8b 00 08 	brhi	8000ab80 <__avr32_umod64+0x68>
8000ab74:	16 3a       	cp.w	r10,r11
8000ab76:	f6 0c 00 08 	add	r8,r11,r12
8000ab7a:	16 3a       	cp.w	r10,r11
8000ab7c:	f0 0b 17 b0 	movhi	r11,r8
8000ab80:	f6 0a 01 09 	sub	r9,r11,r10
8000ab84:	f5 d3 c0 10 	bfextu	r10,r3,0x0,0x10
8000ab88:	f2 06 0d 08 	divu	r8,r9,r6
8000ab8c:	f5 e9 11 0b 	or	r11,r10,r9<<0x10
8000ab90:	ea 08 02 4a 	mul	r10,r5,r8
8000ab94:	16 3a       	cp.w	r10,r11
8000ab96:	e0 88 00 0b 	brls	8000abac <__avr32_umod64+0x94>
8000ab9a:	18 0b       	add	r11,r12
8000ab9c:	16 3c       	cp.w	r12,r11
8000ab9e:	e0 8b 00 07 	brhi	8000abac <__avr32_umod64+0x94>
8000aba2:	f6 0c 00 08 	add	r8,r11,r12
8000aba6:	16 3a       	cp.w	r10,r11
8000aba8:	f0 0b 17 b0 	movhi	r11,r8
8000abac:	14 1b       	sub	r11,r10
8000abae:	f6 0e 0a 4a 	lsr	r10,r11,lr
8000abb2:	30 0b       	mov	r11,0
8000abb4:	2f fd       	sub	sp,-4
8000abb6:	e3 cd 80 ef 	ldm	sp++,r0-r3,r5-r7,pc
8000abba:	16 39       	cp.w	r9,r11
8000abbc:	fe 9b ff fc 	brhi	8000abb4 <__avr32_umod64+0x9c>
8000abc0:	f2 01 12 00 	clz	r1,r9
8000abc4:	e0 81 00 85 	brne	8000acce <__avr32_umod64+0x1b6>
8000abc8:	16 39       	cp.w	r9,r11
8000abca:	5f 38       	srlo	r8
8000abcc:	14 35       	cp.w	r5,r10
8000abce:	5f 89       	srls	r9
8000abd0:	12 48       	or	r8,r9
8000abd2:	e2 08 18 00 	cp.b	r8,r1
8000abd6:	c0 60       	breq	8000abe2 <__avr32_umod64+0xca>
8000abd8:	e4 05 01 0a 	sub	r10,r2,r5
8000abdc:	f6 0e 01 46 	sbc	r6,r11,lr
8000abe0:	14 93       	mov	r3,r10
8000abe2:	0c 9b       	mov	r11,r6
8000abe4:	06 9a       	mov	r10,r3
8000abe6:	ce 7b       	rjmp	8000abb4 <__avr32_umod64+0x9c>
8000abe8:	ec 0e 09 4b 	lsl	r11,r6,lr
8000abec:	fc 09 11 20 	rsub	r9,lr,32
8000abf0:	e4 09 0a 4a 	lsr	r10,r2,r9
8000abf4:	f8 0e 09 4c 	lsl	r12,r12,lr
8000abf8:	f5 eb 10 03 	or	r3,r10,r11
8000abfc:	ec 09 0a 49 	lsr	r9,r6,r9
8000ac00:	eb dc c0 10 	bfextu	r5,r12,0x0,0x10
8000ac04:	f8 06 16 10 	lsr	r6,r12,0x10
8000ac08:	e6 0a 16 10 	lsr	r10,r3,0x10
8000ac0c:	f2 06 0d 08 	divu	r8,r9,r6
8000ac10:	f5 e9 11 09 	or	r9,r10,r9<<0x10
8000ac14:	ea 08 02 4b 	mul	r11,r5,r8
8000ac18:	12 3b       	cp.w	r11,r9
8000ac1a:	e0 88 00 06 	brls	8000ac26 <__avr32_umod64+0x10e>
8000ac1e:	18 09       	add	r9,r12
8000ac20:	12 3c       	cp.w	r12,r9
8000ac22:	e0 88 00 cc 	brls	8000adba <__avr32_umod64+0x2a2>
8000ac26:	16 19       	sub	r9,r11
8000ac28:	f5 d3 c0 10 	bfextu	r10,r3,0x0,0x10
8000ac2c:	f2 06 0d 08 	divu	r8,r9,r6
8000ac30:	f5 e9 11 0b 	or	r11,r10,r9<<0x10
8000ac34:	ea 08 02 49 	mul	r9,r5,r8
8000ac38:	16 39       	cp.w	r9,r11
8000ac3a:	e0 88 00 0c 	brls	8000ac52 <__avr32_umod64+0x13a>
8000ac3e:	18 0b       	add	r11,r12
8000ac40:	16 3c       	cp.w	r12,r11
8000ac42:	e0 8b 00 08 	brhi	8000ac52 <__avr32_umod64+0x13a>
8000ac46:	16 39       	cp.w	r9,r11
8000ac48:	f6 0c 00 08 	add	r8,r11,r12
8000ac4c:	16 39       	cp.w	r9,r11
8000ac4e:	f0 0b 17 b0 	movhi	r11,r8
8000ac52:	12 1b       	sub	r11,r9
8000ac54:	e4 0e 09 43 	lsl	r3,r2,lr
8000ac58:	c7 fb       	rjmp	8000ab56 <__avr32_umod64+0x3e>
8000ac5a:	ea 0e 12 00 	clz	lr,r5
8000ac5e:	c0 d0       	breq	8000ac78 <__avr32_umod64+0x160>
8000ac60:	f6 0e 09 49 	lsl	r9,r11,lr
8000ac64:	fc 08 11 20 	rsub	r8,lr,32
8000ac68:	ea 0e 09 4c 	lsl	r12,r5,lr
8000ac6c:	f4 08 0a 48 	lsr	r8,r10,r8
8000ac70:	f4 0e 09 43 	lsl	r3,r10,lr
8000ac74:	f1 e9 10 06 	or	r6,r8,r9
8000ac78:	f8 05 16 10 	lsr	r5,r12,0x10
8000ac7c:	e6 08 16 10 	lsr	r8,r3,0x10
8000ac80:	ec 05 0d 0a 	divu	r10,r6,r5
8000ac84:	ed dc c0 10 	bfextu	r6,r12,0x0,0x10
8000ac88:	f1 eb 11 0b 	or	r11,r8,r11<<0x10
8000ac8c:	ec 0a 02 49 	mul	r9,r6,r10
8000ac90:	16 39       	cp.w	r9,r11
8000ac92:	e0 88 00 06 	brls	8000ac9e <__avr32_umod64+0x186>
8000ac96:	18 0b       	add	r11,r12
8000ac98:	16 3c       	cp.w	r12,r11
8000ac9a:	e0 88 00 97 	brls	8000adc8 <__avr32_umod64+0x2b0>
8000ac9e:	f6 09 01 09 	sub	r9,r11,r9
8000aca2:	f5 d3 c0 10 	bfextu	r10,r3,0x0,0x10
8000aca6:	f2 05 0d 08 	divu	r8,r9,r5
8000acaa:	f5 e9 11 0b 	or	r11,r10,r9<<0x10
8000acae:	ec 08 02 49 	mul	r9,r6,r8
8000acb2:	16 39       	cp.w	r9,r11
8000acb4:	e0 88 00 0b 	brls	8000acca <__avr32_umod64+0x1b2>
8000acb8:	18 0b       	add	r11,r12
8000acba:	16 3c       	cp.w	r12,r11
8000acbc:	e0 8b 00 07 	brhi	8000acca <__avr32_umod64+0x1b2>
8000acc0:	f6 0c 00 08 	add	r8,r11,r12
8000acc4:	16 39       	cp.w	r9,r11
8000acc6:	f0 0b 17 b0 	movhi	r11,r8
8000acca:	12 1b       	sub	r11,r9
8000accc:	c7 1b       	rjmp	8000abae <__avr32_umod64+0x96>
8000acce:	f2 01 09 4b 	lsl	r11,r9,r1
8000acd2:	e2 03 11 20 	rsub	r3,r1,32
8000acd6:	f4 01 09 49 	lsl	r9,r10,r1
8000acda:	ea 03 0a 4a 	lsr	r10,r5,r3
8000acde:	f5 eb 10 06 	or	r6,r10,r11
8000ace2:	e4 03 0a 4a 	lsr	r10,r2,r3
8000ace6:	f0 01 09 4c 	lsl	r12,r8,r1
8000acea:	ef 49 ff fc 	st.w	r7[-4],r9
8000acee:	f5 ec 10 0b 	or	r11,r10,r12
8000acf2:	f6 0a 16 10 	lsr	r10,r11,0x10
8000acf6:	ea 01 09 40 	lsl	r0,r5,r1
8000acfa:	f0 03 0a 49 	lsr	r9,r8,r3
8000acfe:	ec 05 16 10 	lsr	r5,r6,0x10
8000ad02:	e5 d6 c0 10 	bfextu	r2,r6,0x0,0x10
8000ad06:	f2 05 0d 08 	divu	r8,r9,r5
8000ad0a:	f5 e9 11 0c 	or	r12,r10,r9<<0x10
8000ad0e:	10 9e       	mov	lr,r8
8000ad10:	f0 02 02 4a 	mul	r10,r8,r2
8000ad14:	18 3a       	cp.w	r10,r12
8000ad16:	e0 88 00 10 	brls	8000ad36 <__avr32_umod64+0x21e>
8000ad1a:	20 1e       	sub	lr,1
8000ad1c:	0c 0c       	add	r12,r6
8000ad1e:	18 36       	cp.w	r6,r12
8000ad20:	e0 8b 00 0b 	brhi	8000ad36 <__avr32_umod64+0x21e>
8000ad24:	fc c8 00 01 	sub	r8,lr,1
8000ad28:	f8 06 00 09 	add	r9,r12,r6
8000ad2c:	18 3a       	cp.w	r10,r12
8000ad2e:	e0 88 00 04 	brls	8000ad36 <__avr32_umod64+0x21e>
8000ad32:	10 9e       	mov	lr,r8
8000ad34:	12 9c       	mov	r12,r9
8000ad36:	f8 0a 01 09 	sub	r9,r12,r10
8000ad3a:	f5 db c0 10 	bfextu	r10,r11,0x0,0x10
8000ad3e:	f2 05 0d 08 	divu	r8,r9,r5
8000ad42:	f5 e9 11 0b 	or	r11,r10,r9<<0x10
8000ad46:	10 9c       	mov	r12,r8
8000ad48:	f0 02 02 4a 	mul	r10,r8,r2
8000ad4c:	16 3a       	cp.w	r10,r11
8000ad4e:	e0 88 00 10 	brls	8000ad6e <__avr32_umod64+0x256>
8000ad52:	20 1c       	sub	r12,1
8000ad54:	0c 0b       	add	r11,r6
8000ad56:	16 36       	cp.w	r6,r11
8000ad58:	e0 8b 00 0b 	brhi	8000ad6e <__avr32_umod64+0x256>
8000ad5c:	f8 c8 00 01 	sub	r8,r12,1
8000ad60:	f6 06 00 09 	add	r9,r11,r6
8000ad64:	16 3a       	cp.w	r10,r11
8000ad66:	e0 88 00 04 	brls	8000ad6e <__avr32_umod64+0x256>
8000ad6a:	10 9c       	mov	r12,r8
8000ad6c:	12 9b       	mov	r11,r9
8000ad6e:	f9 ee 11 09 	or	r9,r12,lr<<0x10
8000ad72:	14 1b       	sub	r11,r10
8000ad74:	f2 00 06 48 	mulu.d	r8,r9,r0
8000ad78:	10 9e       	mov	lr,r8
8000ad7a:	12 9c       	mov	r12,r9
8000ad7c:	18 3b       	cp.w	r11,r12
8000ad7e:	c1 52       	brcc	8000ada8 <__avr32_umod64+0x290>
8000ad80:	fc 00 01 09 	sub	r9,lr,r0
8000ad84:	f8 06 01 4c 	sbc	r12,r12,r6
8000ad88:	12 9e       	mov	lr,r9
8000ad8a:	ee fa ff fc 	ld.w	r10,r7[-4]
8000ad8e:	f4 0e 01 09 	sub	r9,r10,lr
8000ad92:	f6 0c 01 48 	sbc	r8,r11,r12
8000ad96:	f0 01 0a 4b 	lsr	r11,r8,r1
8000ad9a:	f2 01 0a 49 	lsr	r9,r9,r1
8000ad9e:	f0 03 09 48 	lsl	r8,r8,r3
8000ada2:	f3 e8 10 0a 	or	r10,r9,r8
8000ada6:	c0 7b       	rjmp	8000abb4 <__avr32_umod64+0x9c>
8000ada8:	18 3b       	cp.w	r11,r12
8000adaa:	5f 08       	sreq	r8
8000adac:	ee fa ff fc 	ld.w	r10,r7[-4]
8000adb0:	1c 3a       	cp.w	r10,lr
8000adb2:	5f 39       	srlo	r9
8000adb4:	12 68       	and	r8,r9
8000adb6:	ce a0       	breq	8000ad8a <__avr32_umod64+0x272>
8000adb8:	ce 4b       	rjmp	8000ad80 <__avr32_umod64+0x268>
8000adba:	12 3b       	cp.w	r11,r9
8000adbc:	f2 0c 00 08 	add	r8,r9,r12
8000adc0:	12 3b       	cp.w	r11,r9
8000adc2:	f0 09 17 b0 	movhi	r9,r8
8000adc6:	c3 0b       	rjmp	8000ac26 <__avr32_umod64+0x10e>
8000adc8:	16 39       	cp.w	r9,r11
8000adca:	f6 0c 00 08 	add	r8,r11,r12
8000adce:	16 39       	cp.w	r9,r11
8000add0:	f0 0b 17 b0 	movhi	r11,r8
8000add4:	c6 5b       	rjmp	8000ac9e <__avr32_umod64+0x186>
8000add6:	d7 03       	nop

8000add8 <__do_global_ctors_aux>:
8000add8:	eb cd 40 80 	pushm	r7,lr
8000addc:	48 79       	lddpc	r9,8000adf8 <__do_global_ctors_aux+0x20>
8000adde:	f2 f8 ff fc 	ld.w	r8,r9[-4]
8000ade2:	5b f8       	cp.w	r8,-1
8000ade4:	c0 70       	breq	8000adf2 <__do_global_ctors_aux+0x1a>
8000ade6:	f2 c7 00 04 	sub	r7,r9,4
8000adea:	5d 18       	icall	r8
8000adec:	0f 48       	ld.w	r8,--r7
8000adee:	5b f8       	cp.w	r8,-1
8000adf0:	cf d1       	brne	8000adea <__do_global_ctors_aux+0x12>
8000adf2:	e3 cd 80 80 	ldm	sp++,r7,pc
8000adf6:	d7 03       	nop
8000adf8:	00 00       	add	r0,r0
8000adfa:	00 0c       	add	r12,r0

Disassembly of section .exception:

8000ae00 <_evba>:
8000ae00:	c0 08       	rjmp	8000ae00 <_evba>
	...

8000ae04 <_handle_TLB_Multiple_Hit>:
8000ae04:	c0 08       	rjmp	8000ae04 <_handle_TLB_Multiple_Hit>
	...

8000ae08 <_handle_Bus_Error_Data_Fetch>:
8000ae08:	c0 08       	rjmp	8000ae08 <_handle_Bus_Error_Data_Fetch>
	...

8000ae0c <_handle_Bus_Error_Instruction_Fetch>:
8000ae0c:	c0 08       	rjmp	8000ae0c <_handle_Bus_Error_Instruction_Fetch>
	...

8000ae10 <_handle_NMI>:
8000ae10:	c0 08       	rjmp	8000ae10 <_handle_NMI>
	...

8000ae14 <_handle_Instruction_Address>:
8000ae14:	c0 08       	rjmp	8000ae14 <_handle_Instruction_Address>
	...

8000ae18 <_handle_ITLB_Protection>:
8000ae18:	c0 08       	rjmp	8000ae18 <_handle_ITLB_Protection>
	...

8000ae1c <_handle_Breakpoint>:
8000ae1c:	c0 08       	rjmp	8000ae1c <_handle_Breakpoint>
	...

8000ae20 <_handle_Illegal_Opcode>:
8000ae20:	c0 08       	rjmp	8000ae20 <_handle_Illegal_Opcode>
	...

8000ae24 <_handle_Unimplemented_Instruction>:
8000ae24:	c0 08       	rjmp	8000ae24 <_handle_Unimplemented_Instruction>
	...

8000ae28 <_handle_Privilege_Violation>:
8000ae28:	c0 08       	rjmp	8000ae28 <_handle_Privilege_Violation>
	...

8000ae2c <_handle_Floating_Point>:
8000ae2c:	c0 08       	rjmp	8000ae2c <_handle_Floating_Point>
	...

8000ae30 <_handle_Coprocessor_Absent>:
8000ae30:	c0 08       	rjmp	8000ae30 <_handle_Coprocessor_Absent>
	...

8000ae34 <_handle_Data_Address_Read>:
8000ae34:	c0 08       	rjmp	8000ae34 <_handle_Data_Address_Read>
	...

8000ae38 <_handle_Data_Address_Write>:
8000ae38:	c0 08       	rjmp	8000ae38 <_handle_Data_Address_Write>
	...

8000ae3c <_handle_DTLB_Protection_Read>:
8000ae3c:	c0 08       	rjmp	8000ae3c <_handle_DTLB_Protection_Read>
	...

8000ae40 <_handle_DTLB_Protection_Write>:
8000ae40:	c0 08       	rjmp	8000ae40 <_handle_DTLB_Protection_Write>
	...

8000ae44 <_handle_DTLB_Modified>:
8000ae44:	c0 08       	rjmp	8000ae44 <_handle_DTLB_Modified>
	...

8000ae50 <_handle_ITLB_Miss>:
8000ae50:	c0 08       	rjmp	8000ae50 <_handle_ITLB_Miss>
	...

8000ae60 <_handle_DTLB_Miss_Read>:
8000ae60:	c0 08       	rjmp	8000ae60 <_handle_DTLB_Miss_Read>
	...

8000ae70 <_handle_DTLB_Miss_Write>:
8000ae70:	c0 08       	rjmp	8000ae70 <_handle_DTLB_Miss_Write>
	...

8000af00 <_handle_Supervisor_Call>:
8000af00:	c0 08       	rjmp	8000af00 <_handle_Supervisor_Call>
8000af02:	d7 03       	nop

8000af04 <_int0>:
8000af04:	30 0c       	mov	r12,0
8000af06:	fe b0 cf 3d 	rcall	80004d80 <_get_interrupt_handler>
8000af0a:	58 0c       	cp.w	r12,0
8000af0c:	f8 0f 17 10 	movne	pc,r12
8000af10:	d6 03       	rete

8000af12 <_int1>:
8000af12:	30 1c       	mov	r12,1
8000af14:	fe b0 cf 36 	rcall	80004d80 <_get_interrupt_handler>
8000af18:	58 0c       	cp.w	r12,0
8000af1a:	f8 0f 17 10 	movne	pc,r12
8000af1e:	d6 03       	rete

8000af20 <_int2>:
8000af20:	30 2c       	mov	r12,2
8000af22:	fe b0 cf 2f 	rcall	80004d80 <_get_interrupt_handler>
8000af26:	58 0c       	cp.w	r12,0
8000af28:	f8 0f 17 10 	movne	pc,r12
8000af2c:	d6 03       	rete

8000af2e <_int3>:
8000af2e:	30 3c       	mov	r12,3
8000af30:	fe b0 cf 28 	rcall	80004d80 <_get_interrupt_handler>
8000af34:	58 0c       	cp.w	r12,0
8000af36:	f8 0f 17 10 	movne	pc,r12
8000af3a:	d6 03       	rete

8000af3c <ipr_val>:
8000af3c:	00 00 01 04 40 00 01 12 80 00 01 20 c0 00 01 2e     ....@...... ....
8000af4c:	d7 03 d7 03 d7 03 d7 03 d7 03 d7 03 d7 03 d7 03     ................
8000af5c:	d7 03 d7 03 d7 03 d7 03 d7 03 d7 03 d7 03 d7 03     ................
8000af6c:	d7 03 d7 03 d7 03 d7 03 d7 03 d7 03 d7 03 d7 03     ................
8000af7c:	d7 03 d7 03 d7 03 d7 03 d7 03 d7 03 d7 03 d7 03     ................
8000af8c:	d7 03 d7 03 d7 03 d7 03 d7 03 d7 03 d7 03 d7 03     ................
8000af9c:	d7 03 d7 03 d7 03 d7 03 d7 03 d7 03 d7 03 d7 03     ................
8000afac:	d7 03 d7 03 d7 03 d7 03 d7 03 d7 03 d7 03 d7 03     ................
8000afbc:	d7 03 d7 03 d7 03 d7 03 d7 03 d7 03 d7 03 d7 03     ................
8000afcc:	d7 03 d7 03 d7 03 d7 03 d7 03 d7 03 d7 03 d7 03     ................
8000afdc:	d7 03 d7 03 d7 03 d7 03 d7 03 d7 03 d7 03 d7 03     ................
8000afec:	d7 03 d7 03 d7 03 d7 03 d7 03 d7 03 d7 03 d7 03     ................
8000affc:	d7 03 d7 03                                         ....

Disassembly of section .fini:

8000b000 <_fini>:
8000b000:	eb cd 40 40 	pushm	r6,lr
8000b004:	48 26       	lddpc	r6,8000b00c <_fini+0xc>
8000b006:	1e 26       	rsub	r6,pc
8000b008:	c0 48       	rjmp	8000b010 <_fini+0x10>
8000b00a:	d7 03       	nop
8000b00c:	80 00       	ld.sh	r0,r0[0x0]
8000b00e:	af ea       	*unknown*
8000b010:	fe b0 b8 3e 	rcall	8000208c <__do_global_dtors_aux>
8000b014:	e3 cd 80 40 	ldm	sp++,r6,pc
